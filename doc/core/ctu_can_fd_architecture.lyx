#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{fancyhdr}
\pagestyle{fancy}
\usepackage{colortbl}
\definecolor{gray}{RGB}{230,230, 230}
\usepackage{subcaption}
\usepackage{cprotect}
\usepackage{float}
\floatstyle{plaintop}
\restylefloat{table}
\end_preamble
\use_default_options true
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing other 1.1
\use_hyperref true
\pdf_author "Ille Ondrej"
\pdf_subject "CAN FD IP function"
\pdf_keywords "CAN, Flexible data rate,"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\headheight 2cm
\secnumdepth 2
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% number the pages at the beginning in roman
\end_layout

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Number chapters as 
\begin_inset Quotes eld
\end_inset

1.
 xxx
\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

Chapter 1
\backslash
nxxx
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout


\backslash
makeatletter
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
@makechapterhead#1{%
\end_layout

\begin_layout Plain Layout

  
\backslash
vspace*{50
\backslash
p@}%
\end_layout

\begin_layout Plain Layout

  {
\backslash
parindent 
\backslash
z@ 
\backslash
raggedright 
\backslash
normalfont
\end_layout

\begin_layout Plain Layout

    
\backslash
ifnum 
\backslash
c@secnumdepth >
\backslash
m@ne
\end_layout

\begin_layout Plain Layout

      
\backslash
if@mainmatter
\end_layout

\begin_layout Plain Layout

        %
\backslash
huge
\backslash
bfseries 
\backslash
@chapapp
\backslash
space 
\backslash
thechapter
\end_layout

\begin_layout Plain Layout

        
\backslash
Huge
\backslash
bfseries 
\backslash
@chapapp{} 
\backslash
thechapter.
\backslash
space%
\end_layout

\begin_layout Plain Layout

        %
\backslash
par
\backslash
nobreak
\end_layout

\begin_layout Plain Layout

        %
\backslash
vskip 20
\backslash
p@
\end_layout

\begin_layout Plain Layout

      
\backslash
fi
\end_layout

\begin_layout Plain Layout

    
\backslash
fi
\end_layout

\begin_layout Plain Layout

    
\backslash
interlinepenalty
\backslash
@M
\end_layout

\begin_layout Plain Layout

    
\backslash
Huge 
\backslash
bfseries #1
\backslash
par
\backslash
nobreak
\end_layout

\begin_layout Plain Layout

    
\backslash
vskip 40
\backslash
p@
\end_layout

\begin_layout Plain Layout

  }}
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
chaptername{}
\end_layout

\begin_layout Plain Layout


\backslash
makeatother
\end_layout

\end_inset


\end_layout

\begin_layout Title

\series bold
\size giant
\color black
CTU CAN
\noun on
 FD 
\begin_inset Newline newline
\end_inset

IP core
\noun default
\color inherit
 
\series default
\size default

\begin_inset Newline newline
\end_inset


\series bold
\size larger
\color black

\begin_inset VSpace bigskip
\end_inset


\size default
\noun on
System Architecture
\end_layout

\begin_layout Author

\series bold
\size larger
Ille Ondrej
\series default
\size default

\begin_inset Newline newline
\end_inset


\series bold
\size larger
Martin Jeřábek
\series default
\size default

\begin_inset Newline newline
\end_inset


\begin_inset VSpace defskip
\end_inset

Czech Technical University in Prague
\begin_inset Newline newline
\end_inset

Faculty of Electrical Engineering
\begin_inset Newline newline
\end_inset

Department of Measurement
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename ../pics/LEV.bmp
	lyxscale 20
	scale 60

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Left Header

\size larger
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="top">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell multirow="3" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../pics/LEV.bmp
	lyxscale 20
	scale 9

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size larger
CTU CAN FD IP Core
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Right Header
Ille Ondrej, Martin Jeřábek
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="1.5cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Author
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial version - Separated stand-alone architecture document from Datasheet
 document.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% classis page numbering
\end_layout

\begin_layout Plain Layout


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Format
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Format}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Throughout this data sheet following notations are kept:
\end_layout

\begin_layout Itemize
Common text is written with this font.
\end_layout

\begin_layout Itemize
Memory registers are always described with capital letters e.g.
 REGISTER or REGISTER [BIT_FIELD] to represent register or bit field within
 a register.
\end_layout

\begin_layout Itemize
VHDL signal names, Entities, Architectures, Generics and FSM states are
 written with Italic and Roman styled letters e.g.
 
\family roman
\shape italic
tran_frame_valid or CAN_top_level.
\end_layout

\begin_layout Itemize
Important facts are emphasized by Bold letters such as: 
\begin_inset Quotes eld
\end_inset

core registers have 
\series bold
asynchronous
\series default
 reset
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Chapter
General Information
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Development tools
\end_layout

\begin_layout Standard
To develop this IP Core following tools are used:
\end_layout

\begin_layout Itemize
Modelsim ALTERA Starter Edition 6.5b and GHDL for RTL simulations.
\end_layout

\begin_layout Itemize
Quartus Prime and Xilinx Vivado for Synthesis to Intel and Xilinx FPGAs,
 Timing analysis and design size benchmarks.
\end_layout

\begin_layout Itemize
VUnit for simulation wrappers.
\end_layout

\begin_layout Itemize
Kactus2 for definition of register map in IP-XACT format.
\end_layout

\begin_layout Itemize
\SpecialChar LyX
 v.2.3.0 to write documentation.
\end_layout

\begin_layout Itemize
GitLab of CTU FEE as a remote GIT repository.
\end_layout

\begin_layout Itemize
TimingAnalyzer SW for Timing Diagrams.
\end_layout

\begin_layout Section
Design automation
\end_layout

\begin_layout Standard
To simplify development of CTU CAN FD IP core, achieve scalability and maintaina
bility of the design, part of CTU CAN FD Core is auto-generated.
 Register map is implemented in Kactus 2 in IP-XACT format.
 The design in IP-XACT format is considered to be an unified specification
 of user-interface.
 Following design resources are generated from IP-XACT specification:
\end_layout

\begin_layout Itemize
VHDL packages with address, bit-fields and reset values definitions (
\begin_inset Quotes eld
\end_inset

src/Libraries/CAN_FD_Frame_format.vhd
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

src/Libraries/CAN_FD_Register_map.vhd
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
C header file with address map definitions and register descriptions (
\begin_inset Quotes eld
\end_inset

driver/ctu_can_fd_regs.h
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

driver/ctu_can_fd_frame.h
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
Lyx documentation.
 Chapters: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[3.
 CAN FD Core memory map]{3.
 CAN FD Core memory map}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[4.
 CAN FD frame format]{4.
 CAN FD frame format}
\end_layout

\end_inset

 are generated (
\begin_inset Quotes eld
\end_inset

doc/core/CANFrameformat.lyx
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

doc/core/registerMap.lyx
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
RTL Code of Control Registers module and Event Logger Registers module.
\end_layout

\begin_layout Standard
To generate these design materials CTU CAN FD IP Core contains its own IP-XACT
 generator which can be found at 
\begin_inset CommandInset href
LatexCommand href
name "regmap_gen"
target "https://github.com/Blebowski/Reg_Map_Gen"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
General coding guidlines
\end_layout

\begin_layout Section
Source code access
\end_layout

\begin_layout Standard
CTU CAN FD IP Core source code is available in CTU FEE GitLab repository
 at:
\end_layout

\begin_layout Standard
\begin_inset space \qquad{}
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "https://gitlab.fel.cvut.cz/canbus/ctucanfd_ip_core"
target "https://gitlab.fel.cvut.cz/canbus/ctucanfd_ip_core"
literal "false"

\end_inset


\end_layout

\begin_layout Chapter
Interfaces
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Memory Bus
\end_layout

\begin_layout Subsection
APB
\end_layout

\begin_layout Subsection
Parallell Bus
\end_layout

\begin_layout Section
CAN Bus
\end_layout

\begin_layout Section
Timestamp
\end_layout

\begin_layout Section
Clock and reset
\end_layout

\begin_layout Section
Configuration options
\end_layout

\begin_layout Chapter
System architecture
\end_layout

\begin_layout Section
Block diagram
\end_layout

\begin_layout Standard
Detailed block diagram of CTU CAN FD IP Core is shown in Figure TODO.
\end_layout

\begin_layout Section
Reset architecture
\end_layout

\begin_layout Standard
CTU CAN FD IP Core has two reset sources: 
\series bold
External Reset
\series default
 and 
\series bold
Soft Reset
\series default
.
 Architecture of Reset is shown in Figure TODO.
 Both reset signals have the same effect.
\end_layout

\begin_layout Section
Clock architecture
\end_layout

\begin_layout Standard
CTU CAN FD IP Core contains one clock domain, 
\series bold
System clock
\series default
.
 Each other timing related information (e.g.
 Time quanta) is derived from System clock via Clock Enable signals.
 To reduce dynamic power consumption, majority of registers is written to
 allow inference of Clock Enables (FPGAs) or automated Clock Gating (ASIC).
 There is no explicit clock gating used within the IP Core.
 List of registers which are candidates for Clock Enable to Gated clock
 conversion is shown in Table TODO.
\end_layout

\begin_layout Section
Sequential logic
\end_layout

\begin_layout Standard
CTU CAN FD logic is implemented from DFFs with Asynchronous Reset.
 If TXT Buffer and RX Buffer RAMs are implemented from DFFs (not inferred,
 nor replaced by hard RAMs), DFFs without Set and Reset are used.
 All DFFs are active on positive clock edge (to mitigate effects of clock
 duty-cycle).
 CTU CAN FD is Latch-Free.
\end_layout

\begin_layout Section
Resynchronisers
\end_layout

\begin_layout Standard
Resynchronisers within CTU CAN FD IP Core are listed in Table TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="30text%">
<column alignment="left" valignment="top" width="20text%">
<column alignment="left" valignment="top" width="40text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchroniser function
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchroniser Type
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchroniser path
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchronisation of External Reset
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reset Synchroniser
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
can_top_level
\backslash
rst_sync_inst
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchronisation of CAN RX Data Stream
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal Synchroniser
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
can_top_level
\backslash
 bus_sampling_inst
\backslash
 can_rx_sig_sync_inst
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Resynchronisers
\begin_inset CommandInset label
LatexCommand label
name "tab:Resynchronisers-list"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Memories
\end_layout

\begin_layout Standard
CTU CAN FD contains memories which are used to store CAN FD frames.
 These memories are parts of RX Buffer and TXT Buffers.
 Each memory is implemented in a dedicated wrapper.
 List of memories is shown in Table TODO.
 Memories are designed to automatically infer dedicated synchronous RAM
 resources on FPGA implementation.
 ASIC implementation can either replace the memories by dedicated memories
 or leave memory implementation to synthesis tool.
 In such a case, each memory cell consists of Flip-Flop without Set and
 Reset.
\end_layout

\begin_layout Standard
Memories are not initialized, nor reset.
 Each memory is synchronous memory with one clock cycle latency on data
 read and no single cycle write access latency.
 Both memories are dual port memories with write-only port A and read-only
 port B.
 An example of memory access is shown in Figure TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="10">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="6page%">
<column alignment="left" valignment="top" width="0.8cm">
<column alignment="left" valignment="top" width="2.4cm">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="1cm">
<column alignment="left" valignment="top" width="1.1cm">
<column alignment="left" valignment="top" width="1cm">
<column alignment="left" valignment="top" width="1cm">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory location
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write mask
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instance Name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instances
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Depth
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Word Width
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Address size
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Port A Access
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Port B Access
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer RAM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rx_buffer_ram
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory Registers
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronous
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer RAM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
txt_buffer_ram
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory registers
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronous
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RAM memories
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-ports-common-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Pipeline architecture and triggers
\end_layout

\begin_layout Standard
CTU CAN FD serial stream processing is pipelined into three stages as is
 shown in Table TODO.
 Pipeline architecture meets Information Processing Time as defined in TODO.
 A block diagram of CTU CAN FD with demonstration of logic split into each
 pipeline stage is shown in Figure TODO.
 Each stage of pipeline processing is enabled by a trigger signal which
 is active for one clock cycle.
 Trigger signals are used to synchronise data transfer in exact moments
 to meet Bit Timing requirements on CAN Bus.
 An example of pipeline processing is shown in Figure TODO.
 In case of negative re-synchronisation, length of TSEG2 can be shortened
 to less then 2 clock cycles, in such a case following TX Trigger signal
 is throttled by one clock cycle and overall Bit Time length remains unaffected.
 Such a situation is shown in Figure TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="20line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipeline stage
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger signal
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Modules which process data in this pipeline stage
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Trigger (0)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus Sampling, Bit Destuffing
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Trigger (1)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol Control
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Trigger
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Pipeline stages
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-ports-common"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A high level algorithm for processing of CAN RX Data stream is described
 in Table TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="3line%">
<column alignment="left" valignment="top" width="60line%">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipeline Stage
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Module
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN RX input is synchronised to System clock domain.
 Delay imposed by synchronisation is treated as wire delay and it is ignored.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus value is sampled to save information about previous sampled bus value
 for next edge detection.
 Valid synchronisation edge is detected on RX Data Stream.
 CAN RX value is propagated to Bit De-stuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus sampling
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit De-stuffing is performed and value of RX bit is sampled by DFF on output
 of Bit De-stuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit-Destuffing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC from RX Data with Bit Stuffing is calculated (if unit is receiver).
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX bit value is sampled, RX Shift register is shifted, TX Shift register
 is preloaded by following field to be transmitted, protocol control FSM
 moves into next state.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol Control
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC from RX Data without Bit Stuffing is calculated (if unit is receiver).
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value on output of TX Shift register is Bit Stuffed and sampled by DFF on
 output of Bit Stuffing.
 Value on output of Bit Stuffing is propagated directly to CAN TX output
 of IP Core.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Shift register is shifted.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol Control
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC from TX data without Bit Stuffing is calculated from output of TX Shift
 register.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC from TX data with Bit Stuffing is calculated one clock cycle after Bit
 Stuffing pipeline stage.
 As this stage does not affect data transmitted on the bus in the actual
 bit, it is not considered as next pipeline stage.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Pipeline stages
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-ports-common-2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Internal Buses
\end_layout

\begin_layout Standard
CTU CAN FD contains two parallel buses to reduce number of signals in the
 design and maintain code readability as shown in Table TODO.
 Signals within these buses are listed in TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus Name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Module of origin
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus function
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Driving Bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1024
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory Registers
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distribute configuration values from Memory registers to the rest of the
 design.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Status Bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
512
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provide status information about CAN Core to Memory Registers.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Internal buses
\begin_inset CommandInset label
LatexCommand label
name "tab:Resynchronisers-list-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
CAN Frame metadata
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Test mode
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
CAN Core
\end_layout

\begin_layout Standard
CAN Core implements following functionality:
\end_layout

\begin_layout Itemize
Transmission and Reception of CAN frame formats.
\end_layout

\begin_layout Itemize
Control of TXT Buffers and RX Buffer.
\end_layout

\begin_layout Itemize
Bit Stuffing, Bit Destuffing.
\end_layout

\begin_layout Itemize
CRC Calculation and CRC checking.
\end_layout

\begin_layout Itemize
Fault Confinement counters and Error State.
\end_layout

\begin_layout Itemize
Bus traffic counters.
\end_layout

\begin_layout Itemize
Operation control (Transmitter, Receiver, Bus Idle).
\end_layout

\begin_layout Standard
CAN Core block diagram is shown in Figure TODO.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/can_core.lyx"

\end_inset


\end_layout

\begin_layout Subsection
Protocol control
\end_layout

\begin_layout Standard
Protocol control implements following functionality:
\end_layout

\begin_layout Itemize
Transmission and Reception of standard CAN Frames.
\end_layout

\begin_layout Itemize
CAN Arbitration.
\end_layout

\begin_layout Itemize
Handling of Bus Integration, Error and Overload frames.
\end_layout

\begin_layout Itemize
CRC and Stuff count comparison and Error detection.
\end_layout

\begin_layout Itemize
Storing of Received CAN frame to RX Buffer.
\end_layout

\begin_layout Itemize
Reading of Transmitted CAN frame from TXT Buffers.
\end_layout

\begin_layout Itemize
Control of TXT Buffers and TX Arbitrator via HW Commands.
\end_layout

\begin_layout Itemize
Counting number of frame retransmissions.
\end_layout

\begin_layout Itemize
Control synchronisation (No synchronisation, Hard Synchronisation, Re-Synchronis
ation)
\end_layout

\begin_layout Itemize
Control Bit time switching (Nominal Sample, Data Sample, Secondary Sample)
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/protocol_control.lyx"

\end_inset


\end_layout

\begin_layout Subsubsection
Protocol control FSM
\end_layout

\begin_layout Standard
Protocol control FSM implements following functionality:
\end_layout

\begin_layout Itemize
CAN Frame format.
\end_layout

\begin_layout Itemize
Controls Control counter, Retransmitt Counter, Re-integration counter.
\end_layout

\begin_layout Itemize
Controls TX Shift Register.
\end_layout

\begin_layout Itemize
Controls RX Shfit Register.
 Storing values from RX Shift register to RX Buffer.
\end_layout

\begin_layout Itemize
Reading of transmitted frame from TXT Buffer (Addressing and Reading Data
 words from TXT Buffer).
\end_layout

\begin_layout Itemize
Storing of received frame to RX Buffer.
\end_layout

\begin_layout Itemize
Controls measurement of Transceiver Delay.
\end_layout

\begin_layout Itemize
Controls TXT Buffers and TX Arbitrator via HW Commands.
\end_layout

\begin_layout Itemize
Controls synchronisation (No synchronisation, Hard Synchronisation, Re-Synchroni
sation).
\end_layout

\begin_layout Itemize
Controls Bit time switching (Nominal Sample, Data Sample, Secondary Sample).
\end_layout

\begin_layout Itemize
Performs Form Error detection
\end_layout

\begin_layout Itemize
Controls CRC checking.
\end_layout

\begin_layout Itemize
Performs CAN arbitration.
\end_layout

\begin_layout Standard
Protocol control FSM state transition diagam is shown in Figure TODO.
 Rules for Protocol control state transitions are described in Table TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Condition of state transition
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipeline stage when transition occurs.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Regular condition
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error frame request
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CTU CAN FD disabled
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anytime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Protocol control state transition rules
\begin_inset CommandInset label
LatexCommand label
name "tab:Protocol-control-state-transition-rules"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Control counter
\end_layout

\begin_layout Standard
Control counter controls duration of CAN frame fields which last longer
 than 1 bit.
 These fields and according configuration of control counter is shown in
 Table TODO.
 Control counter is preloaded in Process pipeline stage.
 Control counter counts towards zero.
 Control counter counting is controlled by Protocol control FSM.
 Control counter is decremented by 1 each bit time in Process pipeline stage.
 When Control counter reaches 1 and 0, this is signalled to Protocol Control
 FSM.
 A current CAN frame field ends when Control counter reaches zero.
 An example of control counter operation during CAN frame is shown in Figure
 TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="40line%">
<column alignment="left" valignment="top" width="40line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Frame field 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Control counter preload value
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier Extension
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data length code
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Depends on transmitted / received data field length.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14, 16, 20 - depends on CRC sequence
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff count (+ Stuff parity)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End of Frame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interframe space
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Suspend transmission
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error flag, Overload flag
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error delimiter, Overload delimiter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Control counter
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Control counter module contains a complementary counter which counts from
 0.
 Complementary counter is incremented by 1 each bit time in Process pipeline
 stage.
 Complementary counter counts only during data field.
 Complementary counter provides information that data byte of data elapsed
 (divisible by 8), or whole memory word elapsed (divisible by 32).
 Complementary counter decodes address of Data memory word within TXT Buffer
 according to Table TODO.
\end_layout

\begin_layout Standard
Control counter module implements Arbitration lost capture register.
 Arbitration lost capture register stores position within CAN frame at which
 loss of arbitration occurred.
 Arbitration lost capture register is loaded when Arbitration lost is signalled
 by Protocol Control FSM.
 When arbitration loss occurs within Base Identifier or Identifier Extension,
 bit position is given by current value of control counter.
\end_layout

\begin_layout Paragraph
Retransmitt counter
\end_layout

\begin_layout Standard
Retransmitt counter controls number of retransmissions of current CAN frame
 from a dedicated TXT Buffer.
 Retransmitt counter counts from zero and it is controlled by Protocol control
 FSM.
 Retransmitt counter counts only when Retransmitt limitation is enabled
 by user.
 Retransmitt counter is cleared when a TXT Buffer changes between two consecutiv
e transmissions (another TXT Buffer with another TX Frame selected by TX
 Arbitrator, reffer to TODO).
 Retransmitt counter is cleared upon succesfull transmission.
 Retransmitt counter is incremented by 1 when Arbitration is lost or when
 Error frame transmission is requested by Error detector (reffer to TODO).
 When Retransmitt counter reaches number of retransmissions, it signals
 it to Protocol control FSM.
\end_layout

\begin_layout Paragraph
Reintegration counter
\end_layout

\begin_layout Standard
Re-integration counter counts 128 consecutive ocurrences of 11 consecutive
 recessive bits after unit turned Bus-off.
 Re-integration counter counts only during Re-integration, not during initial
 integration.
 Reffer to TODO for distuinguishing between Integration and Re-integration.
 Re-integration counter is controlled by Scanner FSM.
 Re-integration counter is counts from zero.
 Re-integration counter is incremented by 1 after each 11 consecutive Recessive
 bits received.
 Re-integration counter signals reaching 128 to Protocol control FSM.
\end_layout

\begin_layout Paragraph
TX Shift Register
\end_layout

\begin_layout Standard
TX Shift register is 32 bit shift register which transmitts given bit sequence
 to the output of Protocol control module.
 TX Shift register is preloaded by Protocol control FSM in Process pipeline
 stage when new data sequence is about to be transmitted, thus output value
 is also valid in Process pipeline stage of the same bit.
 TX Shift register is shifted by one bit in Stuff pipeline stage.
 TX shift register is preloaded according to Table TODO.
 TX Shift register is enabled only as long as unit is transmitter, tx shift
 register is not operating when unit is receiver or after arbitration was
 lost.
 TX shift register shifts from lowest bit index to highest bit index (shifting
 up).
 Transmission of single bits or constant sequences (e.g.
 Error frame) is handled separately, and has higher priority than transmission
 from TX Shift register.
 Rules for handling of these situations are described in Table TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="20line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit on CAN bus in which TX shift register is preloaded 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Preloaded bit sequence
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Where the bit sequence is preloaded from
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SOF bit, Suspend, Intermission, Idle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base Identifier
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer memory RAM data output on Port B.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE bit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier Extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer memory RAM data output on Port B.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
r0 bit of CAN 2.0 frame with Extended Identifier, EDL/r0 bit.
 ESI bit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data length code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Metadata output registers in TX Arbitrator output.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Data length code, In Data field when 32 bits of Data were transmitte
d.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data word (4 bytes) for transmission.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer memory RAM data output on Port B.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Data length code in ISO CAN FD frames without Data field, in
 last bit of Data field in ISO CAN FD frames.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff count and Stuff parity.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter of Stuffed bits in Bit Stuffing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Stuff count, Last bit of Data field in non-ISO CAN FD frames
 (no stuff-count), last bit of DLC in non-ISO CAN frames with no Data field.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculated CRC.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC calculation register in CAN CRC module.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Shift register
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="40line%">
<column alignment="left" valignment="top" width="40line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit value transmitted 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Special conditon
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dominant
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error frame request - Unit is Error active
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recessive
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error frame request - Unit is Error passive
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dominant
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM requests transmission of dominant bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recessive
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Shift register is disabled and none of the above conditions apply.
 This situation corresponds to transmission of continous stream of Recessive
 bits.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Shift register - handling of special cases
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter-1-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
RX Shift Register
\end_layout

\begin_layout Standard
RX Shift register is 32 bit shift register which receives bit sequence and
 stores parts of this sequence to dedicated RX registers when commanded
 by CAN Core.
 RX Shift register operates in two basic modes as it is described in Table
 TODO.
 Mode of RX Shift register determines whether input of each byte in register
 is taken from output of previous byte, or directly from input of RX Shift
 register.
 Diagram of RX shift register is shown in Figure TODO.
 Shifting of each byte of RX Shift register is enabled separately.
 RX Shift register shifts up.
 RX Shift register stores part of its content to either a dedicated capture
 register or RX Buffer memory when signalled to do so by Protocol Control
 FSM as described in Table TODO.
 Note that received CRC is not stored into any capture register and it is
 used for CRC check directly from RX Shift register because after CRC sequence
 RX Shift register is not used till the end of frame and its content remains
 stable.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="40line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Shift register mode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit on CAN bus when mode is used.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte which is enabled.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear mode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base identifier, Identifier Extension, DLC, CRC sequence, Stuff count
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All bytes are enabled.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inputs of each next byte are connected to outputs of previous byte.
 Shift register forms single 32-bit long shift register.
 All bits are shifted simultaneously.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte mode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data field
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Only one byte is enabled at any time.
 Enabled byte is given by Index of actually received Data byte on CAN bus.
 TODO.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inputs of each next byte are connected to input of Shift register.
 Shift register forms 4 separate 8-bit shift registers.
 Only 1 shift register (one byte) is active at any time.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX shift register modes
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-ports-common-3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="30line%">
<column alignment="left" valignment="top" width="30line%">
<column alignment="left" valignment="top" width="30line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit on CAN bus in which
\end_layout

\begin_layout Plain Layout
RX shift register stores part of its content.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning of stored sequence 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination where value is stored.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Base Identifier.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Identifier Extension
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extended Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Data length code.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data length code
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Data field or last bit of Memory word within Data field (after
 each 32 bits).
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4 bytes (single memory word) of CAN Data field.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer RAM memory.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Stuff count
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Grey coded Stuff count +Stuff parity
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX shift register - stored values
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter-1-2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Error detector
\end_layout

\begin_layout Standard
TODO.
\end_layout

\begin_layout Subsection
Operation control
\end_layout

\begin_layout Standard
Operation control implements following functionality:
\end_layout

\begin_layout Itemize
Operational state of CTU CAN FD node (Transmitter, Receiver, Idle).
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/operation_control.lyx"

\end_inset


\end_layout

\begin_layout Standard
Operation control implements a FSM whose state transition diagram is shown
 in Figure TODO.
 Operation control FSM is controlled by Protocol control FSM.
\end_layout

\begin_layout Subsection
Fault confinement
\end_layout

\begin_layout Standard
Fault confinement implements following functionality:
\end_layout

\begin_layout Itemize
TX, RX error counters according to CAN FD standard.
\end_layout

\begin_layout Itemize
Rules for manipulation of TX, RX error counters.
\end_layout

\begin_layout Itemize
Fault confinement state of node (Error active, Error passive, Bus-off).
\end_layout

\begin_layout Itemize
Set of special error counters to distuinguish between Errors in Nominal
 Bit-rate and Data Bit-rate.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/fault_confinement.lyx"

\end_inset


\end_layout

\begin_layout Standard
Fault confinement block diagram is shown in Figure TODO.
 Fault confinement counters are controlled by Protocol control FSM via interface
 standardized in TODOISO.
 Description of this interface is shown in Table TODO.
 Fault confinement counters are also configurable from Memory registers
 via Driving Bus.
\end_layout

\begin_layout Standard
State transition diagram of Fault confinement FSM is shown in Figure TODO.
 Threshold for Error warning limit and transition to Error Passive can be
 configured from user registers.
 
\end_layout

\begin_layout Subsection
Bit Stuffing
\end_layout

\begin_layout Standard
Bit stuffing implements following functionality:
\end_layout

\begin_layout Itemize
Insertion of Stuff bits to transmitted bit stream (regular and fixed stuff
 bits).
\end_layout

\begin_layout Itemize
Halting CAN Core for one bit time when stuff bit is inserted.
\end_layout

\begin_layout Itemize
Holds counter with number of Stuff bits modulo 8 for transmission of Stuff
 count field.
\end_layout

\begin_layout Itemize
Insertion of stuff bit in the beginning of Stuff Count or CRC field of CAN
 FD Frame.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/bit_stuffing.lyx"

\end_inset


\end_layout

\begin_layout Standard
Bit stuffing processes input data in Stuff pipeline stage.
 When Bit stuffing is enabled it inserts bit of opposite polarity after
 it processed sequence of equal consecutive bits with length of Stuff rule.
 Length of Stuff rule is controlled by Protocol control FSM and it is TODO
 when Regular bit Stuffing is used and TODO when fixed bit stuffing is used.
 When Bit Stuffing is disabled it propagates data from input to output without
 insertion of stuff bits.
 Input data are processed by Bit Stuffing in Stuff pipeline stage regardless
 of the fact if Bit Stuffing is enabled or disabled.
 Block diagram of bit stuffing is shown in Figure TODO.
 Bit Stuffing maintains a counter of equal consecutive bits which is manipulated
 according to pseudo-algorithm described in Table TODO.
 Bit stuffing is enabled only when unit is a transmitter of CAN Frame.
 When unit is Receiver, Bit Stuffing is disabled and only propagates Recessive
 bit values to output.
 A sample sequence where a Stuff bit is inserted is shown in Figure TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="90line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing is disabled, there is no transmission / reception in progress
 by CTU CAN FD.
 Counter of equal consecutive bits is held at 0.
 Bit stuffing only propagates Recessive value to output in Stuff pipeline
 stage.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmission starts, Bit Stuffing is enabled.
 Length of Stuff rule is configured to TODO by Protocol Control FSM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit stuffing processes equal consecutive bits from Protocol Control and
 processes them in Stuff pipeline stage.
 Processed bit values are propagated to output.
 Counter of equal consecutive bits is incremented.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing processes a bit of different value before counter of equal
 consecutive bits reached TODO.
 Counter of equal consecutive bits is cleared.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit stuffing processes equal consecutive bits from Protocol Control and
 processes them in Stuff pipeline stage.
 Counter of equal consecutive bits is incremented.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter of equal consecutive bits reaches length of Stuff rule.
 Instead of propagating processed bit to output, Bit Stuffing inserts bit
 of opposite polarity on the output.
 Bit Stuffing signals halting to Protocol Control for one Bit time.
 Counter of equal consecutive bits is reset.
 Number of Stuff Bits is incremented by 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After one bit time for which Protocol control was halted, Bit Stuffing starts
 processing input data stream again.
 After Stuff Bit, counter of equal consecutive bits is incremented to account
 for 
\begin_inset Quotes eld
\end_inset

recursive
\begin_inset Quotes erd
\end_inset

 behaviour of Bit-Stuffing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Applies only for CAN FD frames
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN FD Frame advances to the end of Data field.
 Bit stuffing method is changed to Fixed Bit Stuffing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff bit is inserted in the first bit which is processed by Fixed Bit Stuffing
 method.
 Length of Bit Stuffing rule is configured to TODO.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter of equal consecutive bits is incremented with each processed bit
 regardless of previous processed bit value.
 Stuff bit is inserted after number of bits were processed which is equal
 to length of Stuff rule.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit stuffing operation
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter-1-3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Bit Destuffing
\end_layout

\begin_layout Standard
Bit De-stuffing implements following functionality:
\end_layout

\begin_layout Itemize
Discarding of Stuff Bits from Received bit Stream (regular and fixed stuff
 bits).
\end_layout

\begin_layout Itemize
Halting CAN Core for one bit time when Stuff Bit is discarded.
\end_layout

\begin_layout Itemize
Holds counter with number of De-Stuff bits modulo 8 for comparison of Stuff
 count with received Stuff count field.
\end_layout

\begin_layout Itemize
Discarding Stuff bit in the beginning of Stuff Count or CRC field of CAN
 FD Frame.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/bit_destuffing.lyx"

\end_inset


\end_layout

\begin_layout Standard
Bit De-stuffing processes input data in Destuff pipeline stage.
 When Bit De-stuffing is enabled it discards a bit after it processed sequence
 of equal consecutive bits with length of Stuff rule when the actually processed
 bit value is opposite than value of previous processed bits.
 Length of Stuff rule is controlled by Protocol control FSM and it is TODO
 when Regular Bit Stuffing is used and TODO when Fixed bit stuffing is used.
 When Bit Stuffing is disabled, it propagates data from input to output
 without discarding stuff bits.
 Bit Destuffing processes input data bits in Destuff pipeline stage regardless
 of the fact that it is enabled or disabled.
 Block diagram of Bit destuffing is shown in Figure TODO.
 Bit de-stuffing detects Stuff error if it processes sequence of equal consecuti
ve bits one bit longer than length of Stuff Rule when regular Bit Stuffing
 is used.
 Bit Stuffing also detects Stuff error when n-th processed bit is equal
 to previous bit when Fixed bit stuffing method is used.
 Bit Stuffing maintains a counter of equal consecutive bits which is manipulated
 according to pseudo-algorithm described in Table TODO.
 Bit Destuffing is enabled when unit is either Transmitter or Receiver of
 CAN frame.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="90line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Applies only for CAN FD frames
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit de-stuffing operation
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter-1-3-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
CAN CRC
\end_layout

\begin_layout Standard
CAN CRC implements following functionality:
\end_layout

\begin_layout Itemize
Calculate CRC sequences according to TODO (for ISO CAN FD) and according
 to TODO (for non-ISO CAN FD).
\end_layout

\begin_layout Itemize
Choose appropriate bit stream for calculation of CRC sequence.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/can_crc.lyx"

\end_inset


\end_layout

\begin_layout Standard
Block diagram of CAN CRC is shown in Figure TODO.
 CAN CRC contains 3 generic CRC calculation modules (CRC15, CRC17, CRC21).
 CRC 15 is calculated from data without Stuff bits.
 CRC 17, CRC21 are calculated from data with Stuff bits inserted.
 CRC register is cleared / preloaded to Initial value upon enabling of CRC
 calculation.
 Each bit of CAN frame next step of CRC calculation is executed.
 Transmitter calculates data from transmitted data stream.
 Receiver calculates data from received data stream.
 CRC circuits proces input data according to Table TODO.
 Next step of CRC calculation can be enabled by means of two enable signals:
 Regular enable and Speculative enable.
 Meaning of these two signals is explained in Table TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="50line%">
<column alignment="left" valignment="top" width="15line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC module
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operational state
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data input for CRC calculation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipeline stage where calculation is executed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC 15
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitted data on output of Protocol Control.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Received data on input of Protocol control.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC 17
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitted data on output of Bit Stuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff + 1 clock cycle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Received data on input of Bit Destuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC 21
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitted data on output of Bit Stuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff + 1 clock cycle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Received data on input of Bit Destuffing.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
CAN CRC calculation
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter-1-2-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="60line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC Enable signal
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Regular enable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When CRC module is enabled by regular enable signal, it executes next step
 of calculation in according pipeline stage regardless of input data value
 to be processed.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Speculative enable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When CRC module is enabled by speculative enable signal, it executes next
 step of calculation in according pipeline stage only when input data value
 to be processed is dominant.
 Recessive value is ignored.
 Speculative enable is used in Suspend Transmission, Last bit of Intermission
 and Bus Idle when dominant value is sampled and this value is interpreted
 as SOF by Protocol Control.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter-1-2-1-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Trigger multiplexor
\end_layout

\begin_layout Standard
TODO!
\end_layout

\begin_layout Section
RX Buffer
\end_layout

\begin_layout Standard
RX Buffer implements following functionality:
\end_layout

\begin_layout Itemize
Storing received frame to FIFO buffer as CAN frame progresses.
\end_layout

\begin_layout Itemize
Count number of available frames in FIFO.
\end_layout

\begin_layout Itemize
Provide read interface for Memory registers.
\end_layout

\begin_layout Itemize
Abort storing of CAN frame in case of an error.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/rx_buffer.lyx"

\end_inset


\end_layout

\begin_layout Standard
Block diagram of RX Buffer is shown in Figure TODO.
 Storing of received CAN frame to RX Buffer is controlled by Protocol control
 FSM.
 Protocol control FSM issues commands to the RX Buffer to store different
 parts of CAN frame.
 Memory layout of CAN frame within RX Buffer is the same as in TXT Buffer
 and it is described in TODO.
\end_layout

\begin_layout Subsubsection
2.7.1.1 Storing protocol
\end_layout

\begin_layout Standard
Commands for storing CAN frame are described in Table TODO.
 Commands from Protocol control FSM are filtered by Frame filters before
 the commands are applied to the RX Buffer.
 Handling of RX Buffer commands is performed by RX Buffer FSM whose state
 transition diagram is shown in Figure TODO.
\end_layout

\begin_layout Standard
Partially stored CAN frame is unavailable for reading from Memory registers.
 Frame is available for readout only once it was commited.
 Frame is committed when frame reception is valid.
 Before the frame is commited, it can be aborted when an error occurs.
 To handle duplicate write interface, there are two write pointers to RX
 Buffer RAM: Raw and Committed.
 Pointers are described in Table TODO.
\end_layout

\begin_layout Standard
RX Buffer maintains two overrun flags: User Overrun flag and Internal Overrun
 flag.
 Both overrun flags are set when RX Buffer FSM intents to write to RX Buffer
 RAM and there is not enough space in RX Buffer RAM (Overrun condition).
 Internal Overrun flag is reset at the end of Frame.
 User overrun flag is reset from Memory registers.
 When frame is error-free (no Error frame on CAN Bus), but overrun condition
 occured at some point before in the frame, frame is also discarded and
 Write pointers are manipulated as in case of Reception of abort command.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="15line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Issued in CAN frame part
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action performed
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source of stored information to RX Buffer RAM
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store metadata
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
At the end of Data Length Code field
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store Frame metadata, Identifier and Timestamp (if captured from beginning
 of frame)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame metadata and Identifier from capture registers in RX Shift register.
 Timestamp from capture register for Timestamp.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After each multiple of 4 bytes of Data field elapsed and at the end of Data
 field.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store Frame data word (4 bytes)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Shift register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reception valid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In last bit of End of Frame field
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame is commited to memory.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reception abort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Whenever Error is detected and Error frame transmitted
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame storing is aborted, raw write pointer is reverted to last commited
 write pointer.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer storing protocol
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-ports-common-3-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="15line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointer
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Incremented by 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pre-loaded
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pre-load value
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Raw Write Pointer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When a word is written to RX Buffer RAM ( Metadata, Identified, Data word
 or Timestamp)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When Reception abort command is issued by Protocol control or, Reception
 valid command is issued and Overflow occured before in the frame.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Commited Write Pointer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Commited Write Pointer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When frame is commited.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Raw Write Pointer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extra Timestamp Write Pointer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read Pointer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When a word is read from RX Buffer.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer pointers
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-ports-common-3-1-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
RX Buffer implements Time-stamping of received frames.
 Timestamp can be stored in Sample Point of Start of Frame or Sample Point
 of End of Frame.
 Timestamp is captured to capture register and stored to RX Buffer RAM from
 capture register.
 As position of Timestamp memory words within RX Buffer frame format is
 lower than Data words, it is impossible to store timestamp after the data
 were stored (Raw write pointer now points to the last stored Data Word
 + 1).
 Due to this reason timestamp from End of Frame is stored by an Extra Timestamp
 Write Pointer.
 This pointer is controlled by RX Buffer FSM to point to the first Timestamp
 Word in RX Buffer when a frame is commited.
 When frame is committed and Timestamp from End of Frame shall be stored,
 RX Buffer FSM stores the actual Timestamp at position of Extra Timestamp
 Write Pointer.
\end_layout

\begin_layout Subsubsection
2.7.1.1 Reading protocol
\end_layout

\begin_layout Standard
RX Buffer is read out from Memory registers word by word.
 Read pointer is incremented after each word is read.
 RX Buffer supports single reads (Read indication asserted for one clock
 cycle) and also continous burst read (Read indication asserted for several
 consecutive clock cycles).
 Since RX Buffer RAM has one clock cycle delay on data output, RAM read
 address is speculatively multiplexed as described in Table TODO and shown
 in Figure TODO.
\end_layout

\begin_layout Standard
RX Buffer contains Frame counter.
 Frame counter holds amount of CAN frames in actually stored in RX Buffer
 RAM.
 Frame counter is incremented by 1 when a frame is commited to RX Buffer,
 thus frame which is not yet committed is not included in Frame counter.
 Since RX Buffer RAM is read word by word, RX Buffer counts each read word
 from Memory registers and decrements Frame counter only when whole frame
 was read.
 If frame is committed at the same time as last word of another frame is
 read, Frame counter remains unchanged.
 Manipulation with Frame counter is further described in Table TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="90line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame counter is 0.
 CAN frame is being received and stored to RX Buffer RAM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame ends and it is commited to RX Buffer, Frame Counter is incremented
 to 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read pointer points to the first word of CAN frame (Metadata word).
 Memory registers issue a read from RX Buffer.
 RX Buffer RAM output contains Metadata word.
 RX Buffer loads value of RWCNT (Read word count) to an auxiliarly counter.
 Frame counter remains 1 and Read Pointer increments and points to Identifier
 word.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory registers issue RWCNT - 1 number of reads from RX Buffer and Read
 pointer increments by 1 on each read.
 Auxiliarly counter decrements by 1 on each read.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory registers issue a read from RX Buffer (reading last word of CAN frame).
 Auxiliarly counter indicates that last word of frame is read and Frame
 counter is decremented by 1.
 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Frame counter handling
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter-1-3-2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
RX Buffer can be erased by SW from Memory registers when Release Receive
 Buffer command is issued.
 TODO, think of what will happend when RX Buffer is released at the same
 time as Frame is being stored!
\end_layout

\begin_layout Subsection
Frame Filters
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/frame_filters.lyx"

\end_inset


\end_layout

\begin_layout Subsection
TXT Buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/txt_buffer.lyx"

\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.1 TX Buffer FSM
\end_layout

\begin_layout Subsubsection
2.7.1.1 TX Buffer Commands
\end_layout

\begin_layout Subsubsection
2.7.1.1 TX Buffer RAM
\end_layout

\begin_layout Subsection
TX Arbitrator
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/tx_arbitrator.lyx"

\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.1 TX Arbitrator FSM
\end_layout

\begin_layout Subsubsection
2.7.1.1 Priority decoder
\end_layout

\begin_layout Subsubsection
2.7.1.1 TX Buffer selection process
\end_layout

\begin_layout Subsubsection
2.7.1.1 Timestamp comparison
\end_layout

\begin_layout Subsection
Interrupt Manager
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/int_manager.lyx"

\end_inset


\end_layout

\begin_layout Subsection
Prescaler
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/prescaler.lyx"

\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.1 Prescaler FSM
\end_layout

\begin_layout Subsubsection
2.7.1.1 Synchronisation
\end_layout

\begin_layout Subsubsection
2.7.1.1 Trigger generation
\end_layout

\begin_layout Subsection
Bus sampling
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/bus_sampling.lyx"

\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.1 Transceiver delay
\end_layout

\begin_layout Subsubsection
2.7.1.1 Secondary sampling point 
\end_layout

\begin_layout Subsection
Memory registers
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/memory_registers.lyx"

\end_inset


\end_layout

\end_body
\end_document
