#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{fancyhdr}
\pagestyle{fancy}
\usepackage{colortbl}
\definecolor{gray}{RGB}{230,230, 230}
\usepackage{subcaption}
\usepackage{float}
\floatstyle{plaintop}
\restylefloat{table}
\end_preamble
\use_default_options true
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing other 1.1
\use_hyperref true
\pdf_author "Ille Ondrej"
\pdf_subject "CAN FD IP function"
\pdf_keywords "CAN, Flexible data rate,"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\headheight 2cm
\secnumdepth 2
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% number the pages at the beginning in roman
\end_layout

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Number chapters as 
\begin_inset Quotes eld
\end_inset

1.
 xxx
\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

Chapter 1
\backslash
nxxx
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout


\backslash
makeatletter
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
@makechapterhead#1{%
\end_layout

\begin_layout Plain Layout

  
\backslash
vspace*{50
\backslash
p@}%
\end_layout

\begin_layout Plain Layout

  {
\backslash
parindent 
\backslash
z@ 
\backslash
raggedright 
\backslash
normalfont
\end_layout

\begin_layout Plain Layout

    
\backslash
ifnum 
\backslash
c@secnumdepth >
\backslash
m@ne
\end_layout

\begin_layout Plain Layout

      
\backslash
if@mainmatter
\end_layout

\begin_layout Plain Layout

        %
\backslash
huge
\backslash
bfseries 
\backslash
@chapapp
\backslash
space 
\backslash
thechapter
\end_layout

\begin_layout Plain Layout

        
\backslash
Huge
\backslash
bfseries 
\backslash
@chapapp{} 
\backslash
thechapter.
\backslash
space%
\end_layout

\begin_layout Plain Layout

        %
\backslash
par
\backslash
nobreak
\end_layout

\begin_layout Plain Layout

        %
\backslash
vskip 20
\backslash
p@
\end_layout

\begin_layout Plain Layout

      
\backslash
fi
\end_layout

\begin_layout Plain Layout

    
\backslash
fi
\end_layout

\begin_layout Plain Layout

    
\backslash
interlinepenalty
\backslash
@M
\end_layout

\begin_layout Plain Layout

    
\backslash
Huge 
\backslash
bfseries #1
\backslash
par
\backslash
nobreak
\end_layout

\begin_layout Plain Layout

    
\backslash
vskip 40
\backslash
p@
\end_layout

\begin_layout Plain Layout

  }}
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
chaptername{}
\end_layout

\begin_layout Plain Layout


\backslash
makeatother
\end_layout

\end_inset


\end_layout

\begin_layout Title

\series bold
\size giant
\color black
CTU CAN
\noun on
 FD 
\begin_inset Newline newline
\end_inset

IP core
\noun default
\color inherit
 
\series default
\size default

\begin_inset Newline newline
\end_inset


\series bold
\size larger
\color black

\begin_inset VSpace bigskip
\end_inset


\size default
\noun on
System Architecture
\end_layout

\begin_layout Author

\series bold
\size larger
Ille Ondrej
\series default
\size default

\begin_inset Newline newline
\end_inset


\series bold
\size larger
Martin Jeřábek
\series default
\size default

\begin_inset Newline newline
\end_inset


\begin_inset VSpace defskip
\end_inset

Czech Technical University in Prague
\begin_inset Newline newline
\end_inset

Faculty of Electrical Engineering
\begin_inset Newline newline
\end_inset

Department of Measurement
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename ../pics/LEV.bmp
	lyxscale 20
	scale 60

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Left Header

\size larger
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="top">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell multirow="3" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../pics/LEV.bmp
	lyxscale 20
	scale 9

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size larger
CTU CAN FD IP Core
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Right Header
Ille Ondrej, Martin Jeřábek
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="1.5cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Author
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
07-2019
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial version - Separated stand-alone architecture document from Datasheet
 document.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% classis page numbering
\end_layout

\begin_layout Plain Layout


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Format
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Format}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Throughout this data sheet following notations are kept:
\end_layout

\begin_layout Itemize
Common text is written with this font.
\end_layout

\begin_layout Itemize
Memory registers are always described with capital letters e.g.
 REGISTER or REGISTER [BIT_FIELD] to represent register or bit field within
 a register.
\end_layout

\begin_layout Chapter
General Information
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This document describes HW Architecture of CTU CAN FD IP Core along with
 implementation details of CTU CAN FD.
 It describes the most important Interfaces within the core and function
 of each module within CTU CAN FD.
 This document is not written in specification format (device shall behave
 like so), rather in description format (device behaves like so).
 Nevertheless, this document is supposed to function as reference on how
 shall CTU CAN FD function.
 This document along with CTU CAN FD Datasheet is supposed to be used as
 verification reference on how shall the device behave.
\end_layout

\begin_layout Section
Development tools
\end_layout

\begin_layout Standard
To develop this IP Core following tools are used:
\end_layout

\begin_layout Itemize
GHDL for RTL simulations.
\end_layout

\begin_layout Itemize
Quartus Prime and Xilinx Vivado for Synthesis to Intel and Xilinx FPGAs,
 Timing analysis and design size benchmarks.
\end_layout

\begin_layout Itemize
VUnit for simulation wrappers.
\end_layout

\begin_layout Itemize
Kactus2 for definition of register map in IP-XACT format.
\end_layout

\begin_layout Itemize
\SpecialChar LyX
 v.2.3.0 to write documentation.
\end_layout

\begin_layout Itemize
GitLab of CTU FEE as a remote GIT repository.
\end_layout

\begin_layout Itemize
Wavedrom for Timing Diagrams.
\end_layout

\begin_layout Section
Design automation
\end_layout

\begin_layout Standard
To simplify development of CTU CAN FD IP core, part of CTU CAN FD Core is
 auto-generated.
 Register map is implemented in Kactus 2 in IP-XACT format (
\begin_inset Quotes eld
\end_inset

spec/CTU/ip/CAN_FD_IP_Core/2.1/CAN_FD_IP_Core.2.1.xml
\begin_inset Quotes erd
\end_inset

).
 The design in IP-XACT format is considered to be an unified specification
 of user-interface.
 Following resources are generated from IP-XACT specification:
\end_layout

\begin_layout Itemize
VHDL packages with address, bit-fields and reset values definitions (
\begin_inset Quotes eld
\end_inset

src/Libraries/can_fd_frame_format.vhd
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

src/Libraries/can_fd_register_map.vhd
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
C header file with address map definitions and register descriptions 
\begin_inset Newline newline
\end_inset

(
\begin_inset Quotes eld
\end_inset

driver/ctu_can_fd_regs.h
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

driver/ctu_can_fd_frame.h
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
Lyx documentation of register map.
 Reffer to chapters TODO and TODO.
\end_layout

\begin_layout Itemize
RTL Code of Control Registers module (
\begin_inset Quotes eld
\end_inset

src/memory_registers/generated/*)
\end_layout

\begin_layout Standard
To generate these design materials CTU CAN FD IP Core uses IP-XACT register
 map generator which is accessible at 
\begin_inset CommandInset href
LatexCommand href
name "regmap_gen"
target "https://github.com/Blebowski/Reg_Map_Gen"
literal "false"

\end_inset

.
 Register map generator is linked as sub-module of CTU CAN FD repository.
 Clone all the submodules recursively before using register map generator.
 All of the generated files are considered as don't touch.
 Part of this document is also auto-generated.
 Each section which describes list of Generics and Signals of a module is
 generated from VHDL RTL code.
\end_layout

\begin_layout Subsection
Register map generation
\end_layout

\begin_layout Standard
When CTU CAN FD GIT repository is clonned, register map can be generated
 by following script:
\end_layout

\begin_layout Verbatim

cd scripts
\end_layout

\begin_layout Verbatim

./update_reg_map
\end_layout

\begin_layout Subsection
Documentation generation
\end_layout

\begin_layout Standard
Documentation can be exported from VHDL RTL codes by following script:
\end_layout

\begin_layout Verbatim

cd scripts
\end_layout

\begin_layout Verbatim

python gen_lyx_tables.py --configPath vhdl_lyx_interface_cfg.yml
\end_layout

\begin_layout Standard
vhdl_lyx_interface_cfg.yml is a YAML configuration file which describes source
 RTL codes and destination LyX files.
\end_layout

\begin_layout Section
General coding guidlines
\end_layout

\begin_layout Section
Source code access
\end_layout

\begin_layout Standard
CTU CAN FD IP Core source code is available in CTU FEE GitLab repository
 at:
\end_layout

\begin_layout Standard
\begin_inset space \qquad{}
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "https://gitlab.fel.cvut.cz/canbus/ctucanfd_ip_core"
target "https://gitlab.fel.cvut.cz/canbus/ctucanfd_ip_core"
literal "false"

\end_inset


\end_layout

\begin_layout Chapter
Interfaces
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Memory Bus
\end_layout

\begin_layout Subsection
APB
\end_layout

\begin_layout Subsection
Parallell Bus
\end_layout

\begin_layout Section
CAN Bus
\end_layout

\begin_layout Section
Timestamp
\end_layout

\begin_layout Section
Clock and reset
\end_layout

\begin_layout Section
Configuration options
\end_layout

\begin_layout Chapter
System architecture
\end_layout

\begin_layout Section
Block diagram
\end_layout

\begin_layout Standard
Detailed block diagram of CTU CAN FD IP Core is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CTU-CAN-FD-Block-diagam"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/BD_IP_Core_system.pdf
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CTU CAN FD - Detailed block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:CTU-CAN-FD-Block-diagam"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Reset architecture
\end_layout

\begin_layout Standard
CTU CAN FD IP Core has two reset sources: 
\series bold
External Reset
\series default
 and 
\series bold
Soft Reset
\series default
.
 Both reset sources are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:reset-description"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Both reset cause assertion of System Reset which resets whole IP Core including
 Memory registers.
 Reset architecture is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:reset-structure"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Note that DFF which pipelines Soft Reset is a DFF without Set and Reset.
 Reset on this DFF is de-activated on purpose to avoid timing problems between
 Q output and CLR pin of this DFF.
 An example of reset sequence by both External as well as Soft Reset are
 shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Reset-operation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Note that all DFF in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:reset-structure"
plural "false"
caps "false"
noprefix "false"

\end_inset

 are clocked by System clock.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="15text%">
<column alignment="left" valignment="top" width="25text%">
<column alignment="left" valignment="top" width="52text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reset Name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Invoked by
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reset description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
External Reset
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pulling 
\begin_inset Quotes eld
\end_inset

res_n
\begin_inset Quotes erd
\end_inset

 input low.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To be used by HW reset structure integrating the IP Core (e.g.
 POR).
 When this reset is asserted, it takes two clock cycles of System clock
 before this reset is de-asserted.
 This reset allows resetting CTU CAN FD even when System clock is not running.
 System clock is needed only for reset de-assertion.
 Reset is active low.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soft Reset
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Writing MODE[RST] = '1'.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To be used by SW for resetting CTU CAN FD.
 System clock must be running when this reset is asserted (needed for Bus
 access and pipeline DFF).
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Reset description
\begin_inset CommandInset label
LatexCommand label
name "tab:reset-description"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Reset_structure.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Reset structure
\begin_inset CommandInset label
LatexCommand label
name "fig:reset-structure"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/reset_sequence.pdf
	lyxscale 20
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Reset operation
\begin_inset CommandInset label
LatexCommand label
name "fig:Reset-operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Clock architecture
\end_layout

\begin_layout Standard
CTU CAN FD IP Core contains one clock domain, 
\series bold
System clock
\series default
.
 Each other timing related information (e.g.
 Time quanta) is derived from System clock via Clock Enable signals.
 This makes CTU CAN FD fully synchronous design with no clock domain crossing.
 CTU CAN FD is assumed to be implemented in single power domain, all parts
 of CTU CAN FD must be either turned on or off.
 To reduce dynamic power consumption, majority of registers is written to
 allow inference of Clock Enables (FPGAs) or automated Clock Gating (ASIC).
 There is no explicit clock gating used within the IP Core.
\end_layout

\begin_layout Section
Sequential logic
\end_layout

\begin_layout Standard
CTU CAN FD logic is implemented from DFFs with Asynchronous Reset.
 If TXT Buffer and RX Buffer RAMs are implemented from DFFs (not inferred,
 nor replaced by hard RAMs), DFFs without Set and Reset are used.
 All DFFs are active on positive clock edge (to mitigate effects of clock
 duty-cycle).
 CTU CAN FD is Latch-Free.
 TODO: Note on DFFs which are without Set-Reset.
\end_layout

\begin_layout Section
Resynchronisers
\end_layout

\begin_layout Standard
Resynchronisers within CTU CAN FD IP Core are listed in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Resynchronisers-list"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="30text%">
<column alignment="left" valignment="top" width="20text%">
<column alignment="left" valignment="top" width="42text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchroniser function
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchroniser Type
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchroniser path
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchronisation of External Reset
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reset Synchroniser
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
can_top_level
\backslash
rst_sync_inst
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resynchronisation of CAN RX Data Stream
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal Synchroniser
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
can_top_level
\backslash
 bus_sampling_inst
\backslash
 can_rx_sig_sync_inst
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Resynchronisers
\begin_inset CommandInset label
LatexCommand label
name "tab:Resynchronisers-list"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Memories
\begin_inset CommandInset label
LatexCommand label
name "sec:Memories"

\end_inset


\end_layout

\begin_layout Standard
CTU CAN FD contains memories which are used to store CAN FD frames.
 These memories are parts of RX Buffer and TXT Buffers.
 Each memory is implemented in a dedicated wrapper.
 List of memories is shown in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:RAM-memories"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Memories are designed to automatically infer dedicated synchronous RAM
 resources on FPGA.
 ASIC implementation can either replace the memories by dedicated memories,
 or leave memory implementation to synthesis tool.
 In such a case, each memory cell consists of Flip-Flop without Set and
 Reset.
\end_layout

\begin_layout Standard
Memories are not initialized, nor reset.
 Each memory is synchronous memory with one clock cycle latency on data
 read and one cycle write access latency.
 Both memories are dual port memories with write-only port A and read-only
 port B.
 An example of memory access is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:dual-port-RAM-access"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 In case of read during write, memories return old data value, there is
 no 
\begin_inset Quotes eld
\end_inset

bypassing
\begin_inset Quotes erd
\end_inset

 implemented.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="10">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="6page%">
<column alignment="left" valignment="top" width="0.8cm">
<column alignment="left" valignment="top" width="2.4cm">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="1cm">
<column alignment="left" valignment="top" width="1.1cm">
<column alignment="left" valignment="top" width="1.1cm">
<column alignment="left" valignment="top" width="1.1cm">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory location
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write mask
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instance Name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instances
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Depth
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Word Width
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Address size
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Port A Access
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Port B Access
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer RAM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rx_buffer_ram
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TODO
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory Registers
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronous
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer RAM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
txt_buffer_ram
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory registers
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronous
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RAM memories
\begin_inset CommandInset label
LatexCommand label
name "tab:RAM-memories"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Timing_diagrams/PDFs/dual_port_mems.pdf
	lyxscale 20
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Dual port memories access
\begin_inset CommandInset label
LatexCommand label
name "fig:dual-port-RAM-access"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Pipeline architecture and triggers
\end_layout

\begin_layout Standard
CTU CAN FD serial stream processing is pipelined into three stages which
 are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:pipeline-stages-description"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Pipeline architecture meets Maximal Information Processing Time (2 Time
 Quanta) when system clock is equal to Time Quanta clock (processing takes
 two clock periods).
 Due to this, Minimal Time Quanta of CTU CAN FD is 2.
\end_layout

\begin_layout Standard
Each stage of pipeline processing is controlled by a trigger signal which
 is active for one clock cycle.
 Trigger signals are used to synchronise data transfer in exact moments
 to meet Bit Timing requirements on CAN Bus.
 Trigger signals are used as clock enable signals to process the data in
 according pipeline stage.
 If trigger signal is inactive, processed data remain on output and keep
 their previous value (Data after Bit Destuffing (RX) and Bit Stuffing (TX)).
 An example of pipeline processing is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:data-path-pipeline"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Note that Process pipeline stage always occurs one clock cycle after Destuff
 pipeline stage.
 Between Process and Stuff pipeline stage there will be number of clock
 cycles where no data are processed / received nor transmitted.
 This gap corresponds to TSEG2.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/pipeline_example.pdf
	lyxscale 20
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Datapath pipeline processing
\begin_inset CommandInset label
LatexCommand label
name "fig:data-path-pipeline"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In case of negative re-synchronisation, length of TSEG2 can be shortened
 to less then 2 clock cycles, in such a case following TX Trigger signal
 is throttled by one clock cycle and overall Bit Time length remains unaffected.
 Such a situation is further described in TODO.
 A high level algorithm for processing of CAN data stream is described in
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:pipeline-stages-algorithm"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="6">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="20line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipeline stage
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger signal
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Corresponding moment on CAN Bus
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Modules which process data in this pipeline stage
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Trigger (0)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sample point
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus Sampling, Bit Destuffing
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff Bits are removed from CAN RX stream.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Trigger (1)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
One clock cycle after Sample point
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol Control
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX bus value is processed by Protocol control, following TX bus value is
 determined.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Trigger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start of Bit time
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff bit is inserted to CAN TX stream.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Pipeline stages
\begin_inset CommandInset label
LatexCommand label
name "tab:pipeline-stages-description"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features islongtable="true" longtabularalignment="center">
<column alignment="left" valignment="top" width="3line%">
<column alignment="left" valignment="top" width="62line%">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipeline Stage
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Module
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN RX input is synchronised to System clock domain.
 Delay imposed by synchronisation is treated as wire delay and it is ignored.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus value is sampled to save information about previous sampled bus value
 for next edge detection.
 Valid synchronisation edge is detected on RX Data Stream.
 CAN RX value is propagated to Bit De-stuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus sampling
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit De-stuffing is performed and value of RX bit is sampled by DFF on output
 of Bit De-stuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit-Destuffing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC from RX Data with Bit Stuffing is calculated (if unit is receiver).
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX bit value is sampled, RX Shift register is shifted, TX Shift register
 is preloaded by following field to be transmitted, protocol control FSM
 moves into next state.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol Control
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC from RX Data without Bit Stuffing is calculated (if unit is receiver).
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value on output of TX Shift register is Bit Stuffed and sampled by DFF on
 output of Bit Stuffing.
 Value on output of Bit Stuffing is propagated directly to CAN TX output
 of IP Core.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Shift register is shifted.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol Control
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC from TX data without Bit Stuffing is calculated from output of TX Shift
 register.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC from TX data with Bit Stuffing is calculated one clock cycle after Bit
 Stuffing pipeline stage.
 As this stage does not affect data transmitted on the bus in the actual
 bit, it is not considered as next pipeline stage.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Pipeline stages - algorithm
\begin_inset CommandInset label
LatexCommand label
name "tab:pipeline-stages-algorithm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Internal Buses
\end_layout

\begin_layout Standard
CTU CAN FD contains two parallel buses to reduce number of signals in the
 design and maintain code readability as shown in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Internal-buses"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Signals within these buses are listed in TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus Name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Module of origin
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus function
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Driving Bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1024
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory Registers
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distribute configuration values from Memory registers to the rest of the
 design.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Status Bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
512
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provide status information about CAN Core to Memory Registers.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Internal buses
\begin_inset CommandInset label
LatexCommand label
name "tab:Internal-buses"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
CAN Frame metadata
\end_layout

\begin_layout Standard
Through this document, term 
\begin_inset Quotes eld
\end_inset

frame metadata
\begin_inset Quotes erd
\end_inset

 is used for description of CAN frame information.
 Related CAN frame information are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:CAN-frame-metadata"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 In TXT Buffers and RX Buffer, metadata are stored in Frame Format word
 as is shown in TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="17text%">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="20text%">
<column alignment="left" valignment="top" width="42text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abbreviation
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Possible values 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ID_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BASE (0), EXTENDED (1)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distiguishes frame with Base identifier only and frame with Identifier Extension.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FR_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NORMAL_CAN (0), FD_CAN (1)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distiguishes CAN 2.0 frames and CAN FD frames.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Remote Transmission Request
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RTR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NO_RTR_FRAME (0), RTR_FRAME (1)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distinguishes between regular frame and RTR frame.
 When frame is CAN FD frame, RTR bit has no meaning.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Rate Shift flag
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BRS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BR_NO_SHIFT (0), BR_SHIFT (1)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distinguishes if Bit rate will be shifted in CAN FD frame or not.
 This bit has no meaning in CAN 2.0 frames.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error State Indicator
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ESI
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ESI_ERR_ACTIVE (0), ESI_ERR_PASSIVE (1)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value of received ESI bit.
 This bit has no meaning in CAN 2.0 frames.
 This bit has no meaning on TX Datapath (in TXT Buffers).
 Value of transmitted ESI bit is always given by actual Fault confinement
 state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data length code
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0 - 15 as defined in TODO.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data length code determines length of Data field within CAN frame.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
CAN frame metadata
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-frame-metadata"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
CAN Frame format
\begin_inset CommandInset label
LatexCommand label
name "sec:CAN-frame-format"

\end_inset


\end_layout

\begin_layout Standard
CAN frame spans multiple 32-bit words within TXT Buffers and within RX Buffer
 memories.
 One TXT Buffer always contains single frame.
 RX Buffer contains multiple frames one after another in a FIFO memory.
 Format of CAN frame within these memories is the same with exception of
 ESI bit (in TXT Buffer ESI has no meaning, in RX Buffer ESI has value of
 received ESI bit on CAN bus).
 Meaning of memory words within the CAN frame is described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:CAN-frame-format-memory-words"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Meaning of individual bits can be found in TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="15text%">
<column alignment="left" valignment="top" width="17text%">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name of memory word
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name in register map (see TODO)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame Format
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FRAME_FORM_W
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Contains DLC, ESI, Frame Type, Identifier Type, BRS.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDENTIFIER_W
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Contains CAN Identifier Base and Identifier Extension.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timestamp Low
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TIMESTAMP_L_W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Contains lower 32-bits of CAN frame timestamp (in RX Buffer as sampled during
 frame reception, in TXT Buffer as inserted by user).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timestamp High
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TIMESTAMP_U_W
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Contains upper 32-bits of CAN frame timestamp (in RX Buffer as sampled during
 frame reception, in TXT Buffer as inserted by user).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data words
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DATA_X_Y_W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Contain CAN frame data payload.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
CAN frame format - memory words
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-frame-format-memory-words"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Test mode
\end_layout

\begin_layout Standard
CTU CAN FD has test mode.
 Test mode is started by setting MODE[TSTM] = '1'.
 Features of test mode are listed in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:test-mode-features"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="82text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relevant register
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CTR_PRES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In test mode CTR_PRES is writable and allows setting values of TX Error
 counter, RX Error counter, Nominal Error counter and Data Error counter.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EWL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In test mode EWL is read-write and Error warning limit is configurable by
 SW.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ERP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In test mode ERP is read-write and Error Passive threshold is configurable
 by SW.
 When either RX Error counter or TX Error counter Error reaches Error Passive
 threshold, unit becomes Error Passive.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Test mode features
\begin_inset CommandInset label
LatexCommand label
name "tab:test-mode-features"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
ISO vs NON-ISO CAN FD
\end_layout

\begin_layout Standard
CTU CAN FD supports both types of CAN FD protocol, so called ISO FD (according
 to TODOSPEC) and also non-ISO FD (according to TODOSPEC).
 By default ISO FD is selected.
 Selection between ISO FD and NON-ISO FD is done by SETTINGS[NISOFD] register.
 This configuration can be changed only when device is disabled (SETTINGS[ENA]
 = '0').
 There are following diferences in NON-ISO version of CTU CAN FD:
\end_layout

\begin_layout Itemize
Stuff Count and Stuff Parity fields are not transmitted by Transmitter,
 nor received by Receiver.
\end_layout

\begin_layout Itemize
Stuff Count and Stuff Parity is not considered as part of CRC Check.
\end_layout

\begin_layout Itemize
Highest bit of CRC17 and CRC21 initialization vectors is 0.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
CAN Core
\end_layout

\begin_layout Standard
CAN Core implements following functionality:
\end_layout

\begin_layout Itemize
Transmission and Reception of CAN frame formats.
\end_layout

\begin_layout Itemize
Control of TXT Buffers and RX Buffer.
\end_layout

\begin_layout Itemize
Bit Stuffing, Bit Destuffing.
\end_layout

\begin_layout Itemize
CRC Calculation and CRC checking.
\end_layout

\begin_layout Itemize
Fault Confinement counters and Error State.
\end_layout

\begin_layout Itemize
Bus traffic counters.
\end_layout

\begin_layout Itemize
Operation control (Transmitter, Receiver, Bus Idle).
\end_layout

\begin_layout Standard
CAN Core block diagram is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CAN-Core-Block-diagam-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 CAN Core is structural entity which only instantiates other modules and
 by itself it implements nearly no logic.
 An exception to this rule are two multiplexers as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CAN-Core-Block-diagam-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Multiplexor on TX Datapath (green color) multiplexes between regularly
 send data (post bit stuffing) or constant Recessive value.
 Constant Recessive value is sent to the bus in Bus Monitoring mode.
 Multiplexor on RX Datapath (red color) multiplexes input data to Bit Destuffing.
 During normal operation, RX Data from input of CAN Core are taken.
 When Secondary sampling is used, transmitted data are taken.
 In Bus Monitoring mode, post bit-stuffing data logically ORed with RX Data
 from input of CAN Core (this corresponds to re-routing transmitted bit
 value internally as defined in TODO).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/BD_CAN_Core.pdf
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CAN Core - Block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:CAN-Core-Block-diagam-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/can_core.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Protocol control
\end_layout

\begin_layout Standard
Protocol control implements following functionality:
\end_layout

\begin_layout Itemize
Transmission and Reception of CAN Frames.
\end_layout

\begin_layout Itemize
Handling of CAN Arbitration.
\end_layout

\begin_layout Itemize
Handling of Bus Integration, Error and Overload frames.
\end_layout

\begin_layout Itemize
CRC and Stuff count comparison and Error detection.
\end_layout

\begin_layout Itemize
Storing of Received CAN frame to RX Buffer.
\end_layout

\begin_layout Itemize
Reading of Transmitted CAN frame from TXT Buffers.
\end_layout

\begin_layout Itemize
Control of TXT Buffers and TX Arbitrator via HW Commands.
\end_layout

\begin_layout Itemize
Counting number of frame retransmissions.
\end_layout

\begin_layout Itemize
Control synchronisation (No synchronisation, Hard Synchronisation, Re-Synchronis
ation)
\end_layout

\begin_layout Itemize
Control Bit-rate switching (Nominal Sample, Data Sample, Secondary Sample)
\end_layout

\begin_layout Standard
Protocol control diagram is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Protocol-Control-Block-diagam-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Protocol control is structural entity which only instantiates other modules
 and by itself it implements no logic.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/BD_Protocol_control.pdf
	lyxscale 20
	scale 57

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Protocol control - Block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Protocol-Control-Block-diagam-1-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/protocol_control.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
Protocol control FSM
\end_layout

\begin_layout Standard
Protocol control FSM implements following functionality:
\end_layout

\begin_layout Itemize
Realizes CAN Frame format.
\end_layout

\begin_layout Itemize
Controls Control counter, Retransmitt Counter, Re-integration counter.
\end_layout

\begin_layout Itemize
Controls TX Shift Register.
\end_layout

\begin_layout Itemize
Controls RX Shfit Register.
 Storing values from RX Shift register to RX Buffer.
\end_layout

\begin_layout Itemize
Reading of transmitted frame from TXT Buffer (Addressing and Reading Data
 words from TXT Buffer).
\end_layout

\begin_layout Itemize
Storing of received frame to RX Buffer.
\end_layout

\begin_layout Itemize
Controls measurement of Transceiver Delay.
\end_layout

\begin_layout Itemize
Controls TXT Buffers and TX Arbitrator via HW Commands.
\end_layout

\begin_layout Itemize
Controls synchronisation (No synchronisation, Hard Synchronisation, Re-Synchroni
sation).
\end_layout

\begin_layout Itemize
Controls Bit time switching (Nominal Sample, Data Sample, Secondary Sample).
\end_layout

\begin_layout Itemize
Performs Form Error detection.
\end_layout

\begin_layout Itemize
Controls CRC checking.
\end_layout

\begin_layout Itemize
Handles CAN arbitration.
\end_layout

\begin_layout Standard
Protocol control FSM state transition diagam is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Protocol-control-FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Rules for Protocol control state transitions are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Protocol-control-state-transition-rules"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Protocol control does not change its state in any other moment.
 Note that regular change of Protocol Control corresponding to e.g.
 transition from Control to Data occurs one clock cycle after Sample Point
 (in Process pipeline stage).
 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="15text%">
<column alignment="left" valignment="top" width="17text%">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Condition of state transition
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipeline stage when transition occurs.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Regular condition
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transition corresponds to regular change of CAN frame field (e.g.
 Stuff count to CRC).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error frame request
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
One clock cycle after Process
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transition corresponds to start of Active or Passive Error flag and can
 occur from any other state of Protocol Control FSM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CTU CAN FD disabled
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anytime
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When CTU CAN FD is disabled, protocol control FSM is held in reset state.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Protocol control state transition rules
\begin_inset CommandInset label
LatexCommand label
name "tab:Protocol-control-state-transition-rules"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_protocol_control.pdf
	lyxscale 20
	scale 95

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Protocol control FSM
\begin_inset CommandInset label
LatexCommand label
name "fig:Protocol-control-FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Control counter
\end_layout

\begin_layout Standard
Control counter measures duration of CAN frame fields which last longer
 than 1 bit.
 These fields and according configuration of control counter are shown in
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:CAN-control-counter"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Control counter is preloaded in Process pipeline stage.
 Control counter counts towards zero.
 Control counter counting is controlled by Protocol control FSM.
 Control counter is decremented by 1 each bit in Process pipeline stage.
 When Control counter is equal to 1 and 0, this is signalled to Protocol
 Control FSM.
 This situation indicates one bit before the end of CAN frame field or last
 bit of CAN frame field.
 A current CAN frame field ends when Control counter reaches zero.
 Control counter is not counting during CAN frame fields which last only
 1 bit (e.g.
 IDE bit), nor during fields which might last arbitrary number of bits (Idle).
 An example of Control counter operation during Base Identifier in CAN frame
 is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:control-counter-operation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="47line%">
<column alignment="left" valignment="top" width="47line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Frame field 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Control counter preload value
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier Extension
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data length code
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Depends on transmitted / received data field length.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14, 16, 20 - depends on length of CRC sequence
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff count (+ Stuff parity)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End of Frame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interframe space
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Suspend transmission
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error flag, Overload flag
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error delimiter, Overload delimiter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Re-integration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11, preloaded 128 times.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Control counter
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-control-counter"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/control_counter.pdf
	lyxscale 20
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Control counter operation
\begin_inset CommandInset label
LatexCommand label
name "fig:control-counter-operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Control counter module contains a complementary counter which counts from
 0.
 Complementary counter is incremented by 1 each bit time in Process pipeline
 stage.
 Complementary counter counts only during Data field.
 Complementary counter provides information that data byte has elapsed (counter
 is divisible by 8), or whole memory word has elapsed (counter is divisible
 by 32).
 Complementary counter is capable of addressing memory words at addresses
 4 (DATA_1_4_W) till 19 (DATA_61_64_W) in TXT Buffer.
 Complementary counter decodes address of Data memory word within TXT Buffer
 according to following equation:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $Memory\,word\,index=\left(\frac{Control\,counter}{32}\right)+5$
\end_inset


\end_layout

\begin_layout Standard
Control counter module implements Arbitration Lost Capture register.
 Arbitration Lost Capture register stores position within CAN Arbitration
 field at which Arbitration was lost.
 Arbitration lost capture register is loaded when Arbitration lost is signalled
 by Protocol Control FSM in Process pipeline stage.
 Arbitration Lost Capture saves current value of Control counter (determines
 bit at which arbitration was lost) and bit field type within arbitration
 (Base Identifier, IDE bit, Identifier Extension, etc.) when arbitration
 was lost.
 Arbitration lost capture register is readable by SW via Memory registers
 (ALC register).
 Meaning of values in Arbitration Lost Capture register is described in
 TODO.
 An example of Arbitration lost capture register is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:arbitration-lost-capture"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/arbitration_lost_capture.pdf
	lyxscale 20
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Arbitration lost capture 
\begin_inset CommandInset label
LatexCommand label
name "fig:arbitration-lost-capture"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Retransmitt counter
\end_layout

\begin_layout Standard
Retransmitt counter controls number of retransmissions of current CAN frame
 from a dedicated TXT Buffer.
 Retransmitt counter counts from zero, and it is controlled by Protocol
 control FSM.
 Retransmitt counter counts only when Retransmitt limitation is enabled
 by user (SETTINGS[RTRLE] = '1'), otherwise it stays at 0.
 Retransmitt counter is incremented by 1 when Arbitration is lost, or when
 Error frame transmission is requested by Error detector (reffer to TODO).
\end_layout

\begin_layout Standard
When Error Frame and Arbitration loss occur in the same frame, retransmitt
 counter is incremented only once (such a situation is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:retransmitt-counter-arbitration-loss"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 When multiple Error frames occur in the same frame (e.g.
 due to error during Error Frame), retransmitt counter is also incremented
 only once.
\end_layout

\begin_layout Standard
When Retransmitt counter reaches Retransmitt limit, it signals this to Protocol
 control FSM.
 In case of next arbitration loss or Error Frame request, Protocol control
 FSM stops transmitting actual frame, signals this to TXT Buffer and TXT
 Buffer moves to TX Failed state (see TODO).
 When unit is a receiver without attempt to transmitt a frame (no frame
 was available during Bus Idle, Intermission), retransmitt counter is not
 modified during this frame.
 When unit is Error Passive and transmission of a frame is not succesfull,
 unit becomes Receiver of next frame (due to Suspend transmission field)
 without attempting to transmitt a frame.
 If error occurs during next frame, retransmitt counter is not incremented.
 Possible configurations of Retransmitt limit are shown in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:retransmitt-counter-configurations"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Retransmitt counter is cleared when TXT Buffer used for transmission changes
 between two consecutive transmissions (another TXT Buffer with another
 TX Frame selected by TX Arbitrator), as is described in TODO.
 Retransmitt counter is cleared upon succesfull transmission (TXT Buffer
 goes to TX OK) or when transmission fails (TXT Buffer goes to TX Failed).
 Retransmitt counter is also cleared when TXT Buffer which is currently
 used for transmission goes to Aborted state.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="15text%">
<column alignment="left" valignment="top" width="17text%">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Retransmitt limit value
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Retransmitt limitation enabled
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Behaviour
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame transmission is attempted without any limitation until unit turns
 Bus-off.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame transmission is attempted only once, there is no retransmission attempt
 after first failed transmission (so called one-shot mode).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 - 15
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame transmission is attempted 1 - 15 times.
 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Retransmitt limit configuration
\begin_inset CommandInset label
LatexCommand label
name "tab:retransmitt-counter-configurations"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/retransmitt_counter.pdf
	lyxscale 20
	scale 63

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Retransmitt counter operation
\begin_inset CommandInset label
LatexCommand label
name "fig:retransmitt-counter-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/retransmitt_counter_arbitration.pdf
	lyxscale 20
	scale 61

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Retransmitt counter - arbitration loss and Error frame 
\begin_inset CommandInset label
LatexCommand label
name "fig:retransmitt-counter-arbitration-loss"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/retransmitt_counter_OK.pdf
	lyxscale 20
	scale 61

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Retransmitt counter - second re-transmission succesfull 
\begin_inset CommandInset label
LatexCommand label
name "fig:retransmitt-counter-OK"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection*
Reintegration counter
\begin_inset CommandInset label
LatexCommand label
name "subsec:Reintegration-counter"

\end_inset


\end_layout

\begin_layout Standard
Re-integration counter counts 128 consecutive ocurrences of 11 consecutive
 Recessive bits after unit turned Bus-off.
 Re-integration counter counts only during Re-integration, not during initial
 Integration.
 Re-integration counter is controlled by Protocol control FSM.
 Re-integration counter counts from zero.
 Re-integration counter is cleared when unit is Bus-off and it receives
 Command to Reset Error Counters (by writing logic 1 to COMMAND[ERCRST]
 register).
 Re-integration counter is incremented by 1 after each 11 consecutive Recessive
 bits are received.
 11 consecutive recessive bits are measured by Control counter.
 If during Re-integration dominant bit is detected, Control counter is pre-loade
d again to 11 (there was dominant bit before 11 consecutive recessive bits
 were reached).
 When Re-integration counter reaches 127, it signals this to Protocol control
 FSM (Protocol control FSM becomes Idle), unit becomes Error Active again
 and Operation control state is changed to Idle.
 An example use case of Reintegration counter operation is shown in Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:reintegration-counter"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="90line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CTU CAN FD is enabled by writing SETTINGS[ENA] = '1'.
 After Integration is over, unit becomes Error Active.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CTU CAN FD takes part in bus communication.
 Due to Error frames, it turns first Error Passive and then Bus-off.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW is notified of such an event by FCS Interrupt, then SW reads FAULT_STATE
 register and finds out that unit is Bus-off.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW decides that it wants the unit to join the network again.
 SW writes logic 1 to COMMAND[ERCRST] (so called 
\begin_inset Quotes eld
\end_inset

Error counter reset
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

Reintegration request
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reintegration counter is cleared.
 Control counter is preloaded to 10.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Control counter is being decremented by 1 for each Recessive bit received
 by Protocol Control FSM.
 If Dominant bit is detected, Control Counter is preloaded to 10 again.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After 11 consecutive Recessive bits are received, Control counter is 0,
 it signals this to Protocol control FSM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM increments Reintegration counter by 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After 128 repetitions of 11 consecutive Recessive bits (note that there
 can be CAN frames between consecutive sequences of 11 consecutive Recessive
 Bits, these frames are ignored by CTU CAN FD), Reintegration counter is
 128.
 Reintegration counter signals this to Protocol Control FSM.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM becomes Idle, CTU CAN FD becomes Error Active and it
 is ready to receive/transmitt frames again.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Reintegration counter - use case
\begin_inset CommandInset label
LatexCommand label
name "tab:reintegration-counter"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection*
TX Shift Register
\begin_inset CommandInset label
LatexCommand label
name "subsec:TX-Shift-Register"

\end_inset


\end_layout

\begin_layout Standard
TX Shift register is 32 bit shift register which transmitts given bit sequence
 to the output of Protocol Control module.
 TX Shift register is preloaded by Protocol Control FSM in Process pipeline
 stage when new data sequence is about to be transmitted, thus output value
 is also valid after Process pipeline stage of the same bit.
 TX Shift register is shifted by one position in Stuff pipeline stage of
 each bit on CAN bus during multi-bit frame fields.
 When Stuff Bit is inserted (Protocol control is halted for one bit), TX
 Shift register is not shifted.
\end_layout

\begin_layout Standard
TX shift register is preloaded according to Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:tx-shift-reg-preload"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 TX Shift register is enabled only as long as unit is transmitter, TX shift
 register is not shifting when unit is receiver, nor during CAN frame fields
 which last only one bit (SOF, ACK, etc.), nor during fields which transmitt
 constant sequence (EOF, Error Flag, etc.).
 In such a case constant value is transmitted on its output during whole
 frame field.
 TX shift register shifts from lowest bit index to highest bit index (shifting
 up).
 Transmission of single bits (e.g.
 SOF, ACK) or constant sequences (e.g.
 Active Error Flag, EOF) is handled by separate logic inside TX Shift register,
 and has higher priority than transmission from TX Shift register.
 Rules for handling of these situations are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:tx-shift-reg-special-rules"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 An example of TX Shift register operation during CAN frame is shown in
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:tx-shift-reg-operation"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="40line%">
<column alignment="left" valignment="top" width="22line%">
<column alignment="left" valignment="top" width="30line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit on CAN bus in which TX shift register is preloaded 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Preloaded bit sequence
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Where the bit sequence is preloaded from
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SOF, Suspend, Intermission, Idle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer memory RAM data output on Port B.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE bit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier Extension
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer memory RAM data output on Port B.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
r0 bit of CAN 2.0 frame with Extended Identifier, EDL/r0 bit.
 ESI bit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data length code
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Metadata output registers in TX Arbitrator output.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Data length code, In Data field when 32 bits of Data were transmitte
d.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data word (4 bytes) for transmission.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer memory RAM data output on Port B.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Data length code in ISO CAN FD frames without Data field, in
 last bit of Data field in ISO CAN FD frames.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff count and Stuff parity.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter of Stuffed bits in Bit Stuffing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Stuff count, Last bit of Data field in non-ISO CAN FD frames
 (no stuff-count), last bit of DLC in non-ISO CAN frames with no Data field.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculated CRC.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC calculation register in CAN CRC module.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Shift register preload rules
\begin_inset CommandInset label
LatexCommand label
name "tab:tx-shift-reg-preload"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="47line%">
<column alignment="left" valignment="top" width="47line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit value transmitted 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Special conditon
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dominant
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error frame request - Unit is Error active
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recessive
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error frame request - Unit is Error passive
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dominant
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM requests transmission of dominant bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recessive
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Shift register is disabled and none of the above conditions apply.
 This situation corresponds to transmission of continous stream of Recessive
 bits.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Shift register - handling of special cases
\begin_inset CommandInset label
LatexCommand label
name "tab:tx-shift-reg-special-rules"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="29" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="74line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Frame:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID: 0x123
\begin_inset Newline newline
\end_inset

DLC: 0x1
\begin_inset Newline newline
\end_inset

Data: 0xAB
\begin_inset Newline newline
\end_inset

Frame Type: CAN FD Frame
\begin_inset Newline newline
\end_inset

Identifier Type: Base Identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit on CAN bus
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Shift Register status,
\begin_inset Newline newline
\end_inset

left-most bit transmitted to the output of Protocol Control,
\begin_inset Newline newline
\end_inset

transmitted sequence boldom
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SOF
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
00100100 011
\series default
00000 00000000 00000000 (Base ID: 0x123: 00100100011)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
01001000 11
\series default
000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
10010001 1
\series default
0000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
00100011 
\series default
00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
0100011
\series default
0
\series bold
 
\series default
00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
100011
\series default
00
\series bold
 
\series default
00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
00011
\series default
000
\series bold
 
\series default
00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
0011
\series default
0000
\series bold
 
\series default
00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
011
\series default
00000
\series bold
 
\series default
00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
11
\series default
000000
\series bold
 
\series default
00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 11
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
1
\series default
0000000
\series bold
 
\series default
00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RTR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
r0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC - Bit 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
0001
\series default
0000 00000000 00000000 00000000 (DLC: 0x1 0001)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC - Bit 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
001
\series default
00000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC - Bit 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
01
\series default
000000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC - Bit 4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
1
\series default
0000000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data - Bit 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
10101011
\series default
 00000000 00000000 00000000 (Data: 0xAB 10101011)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data - Bit 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
0101011
\series default
0 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data - Bit 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
101011
\series default
00 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data - Bit 4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
01011
\series default
000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data - Bit 5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
1011
\series default
0000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data - Bit 6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
011
\series default
00000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data - Bit 7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
11
\series default
000000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data - Bit 8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
1
\series default
0000000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Shift register - example of operation
\begin_inset CommandInset label
LatexCommand label
name "tab:tx-shift-reg-operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection*
RX Shift Register
\begin_inset CommandInset label
LatexCommand label
name "subsec:RX-Shift-Register"

\end_inset


\end_layout

\begin_layout Standard
RX Shift register is 32 bit shift register which receives bit sequence and
 stores parts of this sequence to dedicated capture registers when commanded
 by CAN Core.
 RX Shift register operates in two basic modes as it is described in Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:rx-shift-register-modes"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Mode of RX Shift register determines whether input of each byte in shift
 register is taken from output of previous byte, or directly from input
 of RX Shift register.
 Diagram of RX Shift register is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rx-shift-reg-block-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Shifting of each byte of RX Shift register is enabled separately and it
 is controlled by Protocol control FSM.
 RX Shift register is shifting during multi-bit fields on CAN Bus and it
 shifts by one position each bit in Process pipeline stage.
 This corresponds to reception of Data byte on CAN bus.
 RX Shift register shifts up.
 RX Shift register stores part of its content to either a dedicated capture
 register or RX Buffer memory when signalled to do so by Protocol Control
 FSM as described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:rx-buffer-stored-sequences"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Received CRC is not stored into any capture register and it is used for
 CRC check directly from RX Shift register because after CRC sequence, RX
 Shift register is not used till the end of frame and its content remains
 stable.
 Other one bit metadata information are stored to dedicated capture registers
 directly from input of RX shift register in corresponding fields of CAN
 frame as described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:rx-buffer-stored-bits"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 An example of RX shift register operation is shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:rx-shift-reg-operation"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="19line%">
<column alignment="left" valignment="top" width="40line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Shift register mode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit fields on CAN bus when mode is used.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte which is enabled.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear mode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base identifier, Identifier Extension, DLC, CRC sequence, Stuff count
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All bytes are enabled.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shift register forms single 32-bit long shift register.
 Inputs of each next byte are connected to outputs of previous byte.
 All bits are shifted simultaneously.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte mode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data field
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Only one byte is enabled at any time.
 Enabled byte is given by Index of actually received Data byte on CAN bus.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shift register forms 4 separate 8-bit shift registers.
 Inputs of each byte are connected to input of Shift register.
 Only 1 shift register (one byte) is shifted at any time.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX shift register modes
\begin_inset CommandInset label
LatexCommand label
name "tab:rx-shift-register-modes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="31.5line%">
<column alignment="left" valignment="top" width="30line%">
<column alignment="left" valignment="top" width="30line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit on CAN bus in which
\end_layout

\begin_layout Plain Layout
RX shift register stores part of its content.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning of stored sequence 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination where value is stored.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Base Identifier.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Identifier Extension
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extended Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Data length code.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data length code
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Data field or last bit of Memory word within Data field (after
 each 32 bits).
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4 bytes (single memory word) of CAN Data field.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer RAM memory.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last bit of Stuff count
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Grey coded Stuff count +Stuff parity
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX shift register - stored sequences
\begin_inset CommandInset label
LatexCommand label
name "tab:rx-buffer-stored-sequences"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="29line%">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="20line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM state
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning of stored bit 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Corresponding Metadata signal
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination where value is stored.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BRS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value of Bit-Rate Shift Bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BRS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ESI
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value of Error State Indicator Bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ESI
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value of Identifier Extension Bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ID_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RTR/SRR/R1, RTR/R1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value of Remote transmission Request Bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RTR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EDL/R0, EDL/R1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value of Extended Data-length / Flexbile Data-rate format Bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FR_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture register
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX shift register - stored single bits
\begin_inset CommandInset label
LatexCommand label
name "tab:rx-buffer-stored-bits"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/BD_RX_Shift_reg.pdf
	lyxscale 20
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Shift register - Block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:rx-shift-reg-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="37" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="21.2line%">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="60line%">
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Frame:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID: 0x123
\begin_inset Newline newline
\end_inset

DLC: 0x2
\begin_inset Newline newline
\end_inset

Data: 0xAB 0xCD
\begin_inset Newline newline
\end_inset

Frame Type: CAN FD Frame
\begin_inset Newline newline
\end_inset

Identifier Type: Base Identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit on CAN bus
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Shift Register status,
\begin_inset Newline newline
\end_inset

right most bit is Received on Input of Protocol control,
\begin_inset Newline newline
\end_inset

received sequence boldom
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SOF
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 00000000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 0000000
\series bold
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 000000
\series bold
00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 00000
\series bold
001
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 0000
\series bold
0010
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 000
\series bold
00100
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 00
\series bold
001001
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 0
\series bold
0010010
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000000 
\series bold
00100100
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 0000000
\series bold
0 01001000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 000000
\series bold
00 10010001
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base ID - Bit 11
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000
\series bold
001 00100011 
\series default
(Base ID: 0x123: 00100100011)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RTR
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000001 00100011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000001 00100011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
r0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000001 00100011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC - Bit 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000010 0100011
\series bold
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC - Bit 2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00000100 100011
\series bold
00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC - Bit 3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00001001 00011
\series bold
001
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC - Bit 4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00010010 0011
\series bold
0010 
\series default
(DLC: 0x2 0010)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 0 - Bit 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00010010 0011001
\series bold
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 0 - Bit 2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00010010 001100
\series bold
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 0 - Bit 3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00010010 00110
\series bold
101
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 0 - Bit 4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00010010 0011
\series bold
1010
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 0 - Bit 5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00010010 001
\series bold
10101
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 0 - Bit 6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00010010 00
\series bold
101010
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 0 - Bit 7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00010010 0
\series bold
1010101
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 0 - Bit 8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00000000 00000000 00010010 
\series bold
10101011 
\series default
(Data: 0xAB 10101011)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 1- Bit 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0000000 00000000 0001001
\series bold
1
\series default
 10101011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 1- Bit 2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0000000 00000000 000100
\series bold
11
\series default
 10101011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 1- Bit 3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0000000 00000000 00010
\series bold
110
\series default
 10101011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 1- Bit 4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0000000 00000000 0001
\series bold
1100
\series default
 10101011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 1- Bit 5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0000000 00000000 000
\series bold
11001
\series default
 10101011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 1- Bit 6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0000000 00000000 00
\series bold
110011
\series default
 10101011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 1- Bit 7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0000000 00000000 0
\series bold
1100110
\series default
 10101011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte 1- Bit 8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0000000 00000000 
\series bold
11001101
\series default
 10101011 (Data: 0xCD 1100 1101)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Shift register operation
\begin_inset CommandInset label
LatexCommand label
name "tab:rx-shift-reg-operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
Error detector
\end_layout

\begin_layout Standard
Error detector processes errors detected by other modules, decides whether
 these errors are valid and creates Error frame request to Protocol Control
 FSM.
 Errors are detected in Process pipeline stage and Error frame request is
 provided to CAN Core one clock cycle after Process pipeline stage.
 Error frame request is pipelined to avoid combinatorial loops between Error
 detector and Protocol Control FSM.
 Error types and modules of their origin are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Error-detection-rules-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Error detector containts Error Code Capture register which stores type
 and position of last error.
 Error Code capture register is loaded when Error detector creates Error
 Frame request to Protocol control FSM.
 Reffer to TODO for description of Error Code Capture register.
 An example of Error detection (Form Error) with details of actions in each
 pipeline stage is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:error-detector"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="5line%">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="8line%">
<column alignment="left" valignment="top" width="48line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error type
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Frame Fields when Error is detected.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Frame Fields where Error can't occur.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Module where error is detected
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Error
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SOF, Control, Data, Stuff Count, CRC, CRC Delimiter, ACK
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
can occur anywhere
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Error detector in Bus Sampling
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit error is detected by Bus Sampling module by comparing transmitted and
 received value of bit on CAN Bus.
 Reffer to 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Bus-sampling"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for details of Bit Error detection by Bus Sampling module.
 Bit Error detection by Bus Sampling module is enabled always, it is only
 ignored in bit fields as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Bit-error-exceptions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arbitration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
can occur anywhere
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In Arbitration field, Bit Error detected by Bus Sampling is ignored by Error
 Detector.
 Instead Bit Error detected by Protocol Control FSM is considered.
 Protocol control FSM detects Bit Error during Arbitration field only when
 transmitted bit was Dominant and received bit is Recessive.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff Error
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arbitration, Control, Data, Stuff Count, CRC
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Intermission, Idle, Suspend, Error Frame, Overload Frame, End Of Frame,
 CRC Delimiter, ACK Field, ACK Delimiter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Destuffing
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff Error is detected by Bit Destuffing as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Bit-Destuffing"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 If Fixed Stuff bit does not have oposite value as previous bit, this error
 is detected as Stuff Error by Bit-Stuffing, but error is stored as Form
 Error in Error Code Capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Form Error
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SOF, Control, Stuff Count, CRC, End of Frame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arbitration, Data field, ACK, Intermission, Suspend, 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM, Bit Destuffing for Fixed Stuff bits.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Form Error is detected by Protocol Control FSM by explicitely checking value
 RX bit during fixed frame fields as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Form-error-detection"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Protocol control signals Form error to Error Detector and based on this,
 Error frame request is signalled one clock cycle after Process pipeline
 stage.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Error detection rules (part 1)
\begin_inset CommandInset label
LatexCommand label
name "tab:Error-detection-rules-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="5line%">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="8line%">
<column alignment="left" valignment="top" width="48line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error type
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Frame Fields when Error is detected.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Frame Fields where Error can't occur.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Module where error is detected
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC Error
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC Delimiter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
all fields but CRC Delimiter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error detector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comparison of RX CRC with calculated CRC is executed in Error Detector.
 Since after CRC field, RX Shift register is not shifting and CRC module
 is not calculating CRC anymore, comparison shows valid result from CRC
 Delimiter further.
 Based on result of comparison 
\begin_inset Quotes eld
\end_inset

CRC match
\begin_inset Quotes erd
\end_inset

 is signalled to Protocol control FSM.
 If unit is Receiver and 
\begin_inset Quotes eld
\end_inset

CRC match
\begin_inset Quotes erd
\end_inset

 is not signalled to Protocol control FSM in ACK Delimiter, Protocol control
 detects CRC Error (in Process pipeline stage of ACK Delimiter) and propagates
 it back to Error detector.
 Error detector forms Error frame request for Protocol control FSM.
 An example of CRC check mechanism and detection of CRC Error is shown in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:crc-check"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ACK Error
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ACK
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
all fields but ACK
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ACK Error is detected by Protocol control FSM when unit is transmitter,
 Recessive bit is received and unit is not in Self Test Mode (frame valid
 also without ACK).
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Error detection rules (part 2)
\begin_inset CommandInset label
LatexCommand label
name "tab:Error-detection-rules-2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="30.5line%">
<column alignment="left" valignment="top" width="63line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame Field
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Condition
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start of Frame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If Recessive bit is received, Form Error is detected.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
r0 bit after EDL/r1 bit in frame with Extended Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If Recessive bit is received, Form Error is detected.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
r0 bit in CAN FD Frames
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If Recessive bit is received, Form Error is detected.
 Protocol exception is not implemented on further extensions beyond CAN
 FD protocol.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC Delimiter, ACK Delimiter, End of Frame, Error Delimiter, Overload Delimiter.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If Dominant bit is received, Form Error is detected.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Form Error detection
\begin_inset CommandInset label
LatexCommand label
name "tab:Form-error-detection"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="15line%">
<column alignment="left" valignment="top" width="78.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame Field
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start of Frame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dominant bit is Transmitted.
 Bit Error would be detected when Recessive value was received.
 Such a situation is treated as Form error, and Bit Error is ignored.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integration, Reintegration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recessive value is transmitted, receiving Dominant is not detected as Bit
 Error since these might represent a frame between other units while CTU
 CAN FD is integrating.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arbitration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Error is detected by Protocol control FSM, thus Bit Error detected by
 Bus Sampling is ignored.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Control, Data, Stuff Count, CRC
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Error detected by Bus sampling is ignored if unit is receiver.
 Receiver in these fields transmitts only recessive bits and reception of
 Dominant bit is not treated as Bit Error since unit is receiving data from
 other Transmitter.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC Delimiter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiving Dominant bit during is interpreted as Form Error, due to this
 reason Bit Error detected by Bus sampling is ignored.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ACK Slot
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Error is ignored, since this is defined in TODOCANFDSPEC.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ACK Delimiter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
During ACK Delimiter, Recessive value is transmitted and reception of Dominant
 value is considered as Form Error.
 Due to this reason Bit Error is ignored.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End of Frame
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reception of Dominant bit during EOF is treated as Form Error due to this
 Bit Error is ignored.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Intermission
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recessive value is sent to the bus.
 Receiving Dominant bit during first or second bit of Intermission is interprete
d as Overload Frame.
 Receiving Dominant bit during third bit of Intermission is interpreted
 as SOF of next frame.
 Due to these reasons, Bit Error during Intermission is ignored.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Suspend, Idle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recessive value is sent to the bus.
 Receiving Dominant bit is interpreted as SOF of next frame.
 Due to this reason Bit Error during Suspend and Idle is ignored.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reintegration Wait
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When unit turned Bus-off, it is de-facto off the bus, It shall not transmitt
 anything unless it re-intagrates.
 Due to this reason Bit Error is ignored.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Passive Error flag
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Detecting Dominant bit during Passive Error flag is not interpreted as Bit
 Error since it is defined like so in TODOCANFDSPEC.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error Delimiter, Overload Delimiter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recessive bit is sent to the bus.
 Receiving Dominant bit is interpreted as Form Error.
 Due to this Bit Error is ignored.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit Error by Bus Sampling exceptions
\begin_inset CommandInset label
LatexCommand label
name "tab:Bit-error-exceptions"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/err_detection_example.pdf
	lyxscale 20
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Error detection example (Form Error)
\begin_inset CommandInset label
LatexCommand label
name "fig:error-detector"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/CRC_check_sequence.pdf
	lyxscale 20
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CRC check and CRC Error signalling
\begin_inset CommandInset label
LatexCommand label
name "fig:crc-check"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Operation control
\end_layout

\begin_layout Standard
Operation control implements following functionality:
\end_layout

\begin_layout Itemize
Operational state of CTU CAN FD node (Transmitter, Receiver, Idle).
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/operation_control.lyx"

\end_inset


\end_layout

\begin_layout Standard
Operation control implements a FSM whose state transition diagram is shown
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:fsm-operation-control"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Operation control FSM is controlled by Protocol control FSM and Fault confineme
nt FSM.
 Rules for control of Operation control FSM are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:operation-control-state-transitions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_operation_control.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Operation control FSM
\begin_inset CommandInset label
LatexCommand label
name "fig:fsm-operation-control"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="10line%">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="71line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Actual state
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Next state
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Off
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Idle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When unit is turned on (SETTINGS[ENA]='1'), unit integrates to the bus communica
tion.
 After integration is finished (11 consecutive recessive bits received),
 Protocol control signals Set Idle.
 Unit becomes Bus Idle.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Idle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit is Idle and in Sample point TX Arbitrator signals TX Frame Ready, Protocol
 control FSM locks selected TXT Buffer (reffer to TODO), Protocol control
 signals Set Transmitter and unit becomes Transmitter of frame from selected
 TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Idle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit is Idle, there is no TX frame signalled by TX Arbitrator.
 Dominant bit is sampled in Sampled point, Protocol control signals Set
 Receiver and unit becomes Receiver of next frame.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitter
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver due to 
\begin_inset Quotes eld
\end_inset

Set Receiver
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit transmitts frame.
 In Last bit of Intermission field, unit is still Transmitter, unit detects
 Dominant bit and considers this bit as SOF (reffer to TODO).
 If there is no TX frame signalled by TX Arbitrator, Protocol control signals
 
\begin_inset Quotes eld
\end_inset

Set Receiver
\begin_inset Quotes erd
\end_inset

 and unit becomes receiver of following frame.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit is Error Passive and it transmitts a frame.
 It enters 
\begin_inset Quotes eld
\end_inset

Suspend Transmission
\begin_inset Quotes erd
\end_inset

.
 If during 
\begin_inset Quotes eld
\end_inset

Suspend Transmission
\begin_inset Quotes erd
\end_inset

, dominant bit is detected, Protocol control issues 
\begin_inset Quotes eld
\end_inset

Set Receiver
\begin_inset Quotes erd
\end_inset

 and unit becomes receiver of next frame.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver due to 
\begin_inset Quotes eld
\end_inset

Arbitration Lost
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If during Arbitration field recessive bit is sent on TX, but dominant bit
 is monitored on RX by Protocol control, 
\begin_inset Quotes eld
\end_inset

Arbitration lost
\begin_inset Quotes erd
\end_inset

 is signalled and unit becomes Receiver.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Idle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit transmitts a frame.
 In last bit of Intermission of this frame, recessive bit is detected (no
 other unit is attempting to transmitt frame) and there is no TX frame ready
 for transmission, then Protocol control issues 
\begin_inset Quotes eld
\end_inset

Set Idle
\begin_inset Quotes erd
\end_inset

 command and unit becomes 
\begin_inset Quotes eld
\end_inset

Bus Idle
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit receives a frame.
 In last bit of Intermission, TX frame ready for transmission is signalled
 by TX Arbitrator.
 Protocol control signals 
\begin_inset Quotes eld
\end_inset

Set Transmitter
\begin_inset Quotes erd
\end_inset

 and unit becomes Transmitter of selected TX Frame.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Idle
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit receives a frame.
 In last bit of Intermission, there is no TX frame ready signalled by TX
 Arbitrator, recessive bit is monitored (no other unit is attempting to
 transmitt frame), then Protocol control issues 
\begin_inset Quotes eld
\end_inset

Set Idle
\begin_inset Quotes erd
\end_inset

 command and uni becomes 
\begin_inset Quotes eld
\end_inset

Bus Idle
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Idle, Transmitter, Receiver
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Off
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fault confinement FSM signals that unit is Bus-off or unit is disabled (SETTINGS
[ENA] = '0').
 In next Sample point, unit becomes 
\begin_inset Quotes eld
\end_inset

Off
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Operation control FSM - state transitions
\begin_inset CommandInset label
LatexCommand label
name "tab:operation-control-state-transitions"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Fault confinement
\end_layout

\begin_layout Standard
Fault confinement implements following functionality:
\end_layout

\begin_layout Itemize
TX, RX error counters according to CAN FD standard (TEC, REC).
\end_layout

\begin_layout Itemize
Rules for manipulation of TX, RX error counters.
\end_layout

\begin_layout Itemize
Fault confinement state of node (Error Active, Error Passive, Bus-Off).
\end_layout

\begin_layout Itemize
Set of special error counters to distuinguish between Errors in Nominal
 Bit-rate and Data Bit-rate.
\end_layout

\begin_layout Standard
Fault confinement block diagram is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:fault-confinement-block-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/BD_Fault_confinement.pdf
	lyxscale 20
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fault confinement block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:fault-confinement-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/fault_confinement.lyx"

\end_inset


\end_layout

\begin_layout Standard
Fault Confinement counters are controlled by Protocol control FSM via interface
 standardized in TODOISO.
 Detection of special conditions stated in TODOISOEXCEPTIONS is realized
 in 
\begin_inset Quotes eld
\end_inset

Fault confinement rules
\begin_inset Quotes erd
\end_inset

 module.
 Error counters module implements counters as described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:error-counters"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Counters can be modified from Memory registers via CTR_PRES register when
 CTU CAN FD is in Test mode (MODE[TSTM] = '1').
 Fault Confinement state as defined in TODOISO is implemented by Fault confineme
nt FSM.
 State transition diagram of Fault confinement FSM is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:fsm-fault-confinement"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Threshold for Error warning limit detection (EWL) and transition to Error
 Passive (ERP) can be configured from Memory registers when device is in
 Test mode (MODE[TSTM] = '1').
 Transition from Bus-off to Error Active is performed after Reintegration
 (Set Error Active is signalled by Protocol Control FSM).
 Reffer to 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Reintegration-counter"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for description of Reintegration counter operation.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_fault_confinement.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fault confinement FSM
\begin_inset CommandInset label
LatexCommand label
name "fig:fsm-fault-confinement"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="10line%">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="71line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter Name
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN FD standard name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Error counter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REC
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Incremented, decremented as described in TODOISO.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Error counter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TEC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Incremented, decremented as described in TODOISO.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nominal Error counter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Incremented by 1 for each Error detected during Nominal Bit-rate.
 Does not influence Fault confinement state of CTU CAN FD.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Error counter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Incremented by 1 for each Error detected during Data Bit-rate.
 Does not influence Fault confinement state of CTU CAN FD.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Error counters
\begin_inset CommandInset label
LatexCommand label
name "tab:error-counters"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Bit Stuffing
\end_layout

\begin_layout Standard
Bit Stuffing module implements following functionality:
\end_layout

\begin_layout Itemize
Insertion of Stuff Bits to TX bit stream (regular and fixed Stuff Bits).
\end_layout

\begin_layout Itemize
Halting CAN Core for one bit time when Stuff Bit is inserted.
\end_layout

\begin_layout Itemize
Holds counter with number of Stuff Bits modulo 8 for transmission of Stuff
 Count field.
\end_layout

\begin_layout Itemize
Insertion of Stuff Bit in the beginning of Stuff Count or CRC field of CAN
 FD Frame.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/bit_stuffing.lyx"

\end_inset


\end_layout

\begin_layout Standard
Bit Stuffing module processes TX Data from Protocol Control in Stuff pipeline
 stage.
 Bit Stuffing module operates in two modes as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:bit-stuffing-modes"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 When Bit Stuffing is enabled, it inserts bit of opposite polarity to TX
 bit stream based on Bit Stuffing Mode.
 Data are processed by Bit Stuffing with one clock cycle delay (output is
 registered).
 When Bit Stuffing is disabled, it propagates data from input to output
 without insertion of Stuff bits (but still with one clock cycle delay).
 Input data are processed in Stuff pipeline stage regardless of the fact
 if Bit Stuffing module is enabled or disabled (Input is not combinatorially
 bypassed when Bit Stuffing is disabled).
 Bit Stuffing is enabled only when unit is Transmitter of CAN Frame.
 When unit is Receiver, Bit Stuffing is disabled and only propagates recessive
 bit values from input to output.
 Bit Stuffing counts number of inserted Stuff bits in Regular Bit Stuffing
 mode in Counter of Stuff Bits (this counter is then used in Stuff Count
 frame field).
 A basic sequence of Bit Stuffing module operation is described in Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:bit-stuffing-operation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
When Bus is Idle and transmission of frame starts, SOF bit is the first
 bit which is processed by Bit Stuffing module.
 If unit samples dominant bit during third bit of Intermission, Bus Idle
 or Suspend Transmission, this bit is considered as SOF bit (see TODO).
 Such a bit is counted as first dominant bit by Bit Stuffing.
 Bit Stuffing is disabled when unit reaches CRC Delimiter frame field.
 Bit Stuffing is not disabled in last bit of CRC sequence so that Stuff
 Bit can be inserted behind the last bit of CRC sequence.
 When unit loses arbitration (turns Receiver), Bit Stuffing is disabled.
 An example of Bit Stuffing operation during whole frame is shown in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bit-stuffing-detailed-operation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 If an Error is detected (Error frame is requested by Error Detector), Bit
 Stuffing is disabled.
 Bit Stuffing is enabled only during fields which shall be coded by Bit-Stuffing
 as described in TODOREFISO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="10line%">
<column alignment="left" valignment="middle" width="10line%">
<column alignment="left" valignment="top" width="71line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing Mode
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff rule length
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Regular
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When 5 consecutive bits of equal polarity are processed, bit of opposite
 polarity is inserted.
 Inserted Stuff bit counts as first bit of next sequence of 5 equal bits
 (Bit Stuffing is recursive).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fixed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When 4 bits are processed a bit of opposite polarity (with respect to last
 bit of those 4) is inserted on output of Bit Stuffing.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit stuffing modes
\begin_inset CommandInset label
LatexCommand label
name "tab:bit-stuffing-modes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="88.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing is disabled, there is no transmission / reception in progress
 by CTU CAN FD.
 Counter of equal consecutive bits is 1.
 Bit Stuffing module only propagates Recessive value to output in Stuff
 pipeline stage.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmission starts (unit becomes Transmitter), Bit Stuffing is enabled.
 Length of Stuff rule is configured to 5 by Protocol Control FSM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing processes bits from Protocol Control in Stuff pipeline stage.
 Counter of equal consecutive bits is incremented by 1 for each processed
 bit of equal polarity (with respect to previous bit).
 When bit of opposite polarity is processed, Counter of equal consecutive
 bits is set to 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter of equal consecutive bits reaches length of Stuff rule.
 Instead of propagating processed bit to output, Bit Stuffing inserts bit
 of opposite polarity on the output.
 Bit Stuffing signals halting to Protocol Control.
 Protocol Control remains halted for length of one bit.
 Number of inserted Stuff Bits (counter of Stuff Bits) is incremented by
 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After one Bit Time for which Protocol Control was halted, it continous in
 transmission.
 Bit Stuffing continous in processing input data stream.
 Counter of equal consecutive bits is incremented after insertion of Stuff
 Bit to account for 
\begin_inset Quotes eld
\end_inset

recursive
\begin_inset Quotes erd
\end_inset

 behaviour of Bit-Stuffing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Applies only for CAN FD frames
\emph default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{cyan}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN FD Frame advances to last bit of frame field preceding Stuff Count.
 Bit Stuffing mode is changed to Fixed.
 Length of Bit Stuffing rule is configured to 4.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff bit is inserted by Bit Stuffing in the first bit which is processed
 by Fixed Bit Stuffing method (First bit of Stuff Count).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter of equal consecutive bits is incremented with each processed bit
 regardless of previous processed bit value.
 Stuff Bit is inserted after each 4 processed bits.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit stuffing operation
\begin_inset CommandInset label
LatexCommand label
name "tab:bit-stuffing-operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/CHART_bit_stuffing.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit Stuffing detailed operation
\begin_inset CommandInset label
LatexCommand label
name "fig:bit-stuffing-detailed-operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Bit Destuffing
\begin_inset CommandInset label
LatexCommand label
name "subsec:Bit-Destuffing"

\end_inset


\end_layout

\begin_layout Standard
Bit De-stuffing implements following functionality:
\end_layout

\begin_layout Itemize
Discarding of Stuff Bits from Received bit Stream (regular and fixed Stuff
 Bits).
\end_layout

\begin_layout Itemize
Halting CAN Core for one bit time when Stuff Bit is discarded.
\end_layout

\begin_layout Itemize
Holds counter with number of De-Stuff bits modulo 8 for comparison of Stuff
 count with received Stuff count field.
\end_layout

\begin_layout Itemize
Discarding first fixed Stuff bit of CAN FD Frame.
\end_layout

\begin_layout Itemize
Detection of Stuff Error.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/bit_destuffing.lyx"

\end_inset


\end_layout

\begin_layout Standard
Bit Destuffing processes input data (RX data stream) as provided by multiplexor
 in Figure TODO in Destuff pipeline stage.
 Bit Destuffing operates in two modes as described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:bit-destuffing-modes"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Bit Destuffing discards Stuff Bits according to current Bit Destuffing
 mode.
 Discarded Stuff Bit is signalled to Protocol control and it is ignored
 by Protocol control.
 Input data are processed with one clock cycle delay (output is registered).
 When Bit destuffing is disabled, it only propagates input data to output
 in Destuff pipeline stage without discarding any bit or detecting Stuff
 Error.
 Bit Destuffing is enabled when unit is Transmitter or Receiver since Transmitte
r also receives its own TX Stream.
 Bit Destuffing contains counter of discarded Stuff bits in Regular mode.
 This counter is then used for check of received Stuff Count vs calculated
 Stuff Count.
 A basic sequence of operation is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:bit-destuffing-operation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
When Bus is idle, unit is in Suspend transmission or third bit of Intermission,
 Bit-Destuffing processes dominant bit (which is subsequently evaluated
 as SOF by Protocol control FSM), then Bit-Destuffing processes this bit
 as first bit in sequence of equal consecutive bits.
 Bit Destuffing is disabled when unit reaches CRC Delimiter frame field.
 Bit Destuffing is not disabled in last bit of CRC sequence so that Stuff
 Bit can be discarded behind the last bit of CRC sequence.
 When transmission of Error frame is requested, Bit Destuffing is disabled.
 Bit Destuffing is enabled only during fields which shall be coded by Bit-Stuffi
ng as described in TODOREFISO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="10line%">
<column alignment="left" valignment="middle" width="10line%">
<column alignment="left" valignment="top" width="71line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Destuffing Mode
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff rule length
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Regular
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When 5 consecutive bits of equal polarity are processed, next bit is discarded.
 If discarded bit does not have opposite value as previous bit, Stuff Error
 is detected.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fixed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When 4 bits are processed next bit is discarded, next bit is discarded regardles
s of values of previous processed bits.
 If value of discarded bit is not equal to previous bit, Stuff Error is
 detected.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit Destuffing modes
\begin_inset CommandInset label
LatexCommand label
name "tab:bit-destuffing-modes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="88.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Destuffing is disabled, there is no transmission / reception in progress
 by CTU CAN FD.
 Counter of equal consecutive bits is 1.
 Bit Destuffing module only propagates Recessive value to output in Destuff
 pipeline stage.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reception starts (unit becomes Receiver), Bit Destuffing is enabled.
 Length of Stuff rule is configured to 5 by Protocol Control FSM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Destuffing processes input bits in Destuff pipeline stage.
 Counter of equal consecutive bits is incremented by 1 for each processed
 bit of equal polarity (with respect to previous bit).
 When bit of opposite polarity is processed, Counter of equal consecutive
 bits is set to 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter of equal consecutive bits reaches length of Stuff rule.
 Following bit is discarded (not processed) and marked to Protocol control
 FSM as 
\begin_inset Quotes eld
\end_inset

Destuffed
\begin_inset Quotes erd
\end_inset

.
 Protocol control ignores such a bit and its processing of RX data stream
 remains Halted for one Bit time.
 Number of discarded Stuff Bits (counter of discarded Stuff Bits) is incremented
 by 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After one Bit Time for which Protocol Control was halted, Bit Stuffing processes
 next bit.
 Next processed bit is also processed by Protocol control.
 Counter of equal consecutive bits is incremented after discarding Stuff
 Bit to account for 
\begin_inset Quotes eld
\end_inset

recursive
\begin_inset Quotes erd
\end_inset

 behaviour of Bit Destuffing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Applies only for CAN FD frames
\emph default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{cyan}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN FD Frame advances to the end of frame field preceding Stuff Count.
 Bit Destuffing mode is changed to Fixed.
 Length of Bit Stuffing rule is configured to 4.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff Bit is discarded by Bit Destuffing in the first bit which is processed
 by Fixed Bit Stuffing method (First bit of Stuff Count).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter of equal consecutive bits is incremented with each processed bit
 regardless of previous processed bit value.
 Stuff Bit is discarded after each 4 processed bits.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit de-stuffing operation
\begin_inset CommandInset label
LatexCommand label
name "tab:bit-destuffing-operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
CAN CRC
\end_layout

\begin_layout Standard
CAN CRC implements following functionality:
\end_layout

\begin_layout Itemize
Calculate CRC sequences according to TODO (for ISO CAN FD) and according
 to TODO (for non-ISO CAN FD).
\end_layout

\begin_layout Itemize
Choose appropriate bit stream and trigger for calculation of CRC sequence.
\end_layout

\begin_layout Standard
Block diagram of CAN CRC is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:can-crc-block-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/BD_CAN_CRC.pdf
	lyxscale 20
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CAN CRC block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:can-crc-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/can_crc.lyx"

\end_inset


\end_layout

\begin_layout Standard
CAN CRC contains 3 CRC calculation modules (CRC15, CRC17, CRC21).
 CRC 15 is calculated from data without Stuff Bits.
 CRC 17, CRC21 are calculated from data with Stuff Bits inserted.
 CRC register is preloaded to Initial value upon enabling of CRC calculation
 (before first bit is processed).
 Each bit of CAN frame, next step of CRC calculation is executed when according
 CRC calculation module is enabled.
 A pseudo-code for CRC calculation is shown in TODOISOREF.
\end_layout

\begin_layout Standard
Data stream (TX, RX data stream) which is used as input of CRC calculation
 is different based on Operational state (Transmitter / Receiver) and part
 of frame when CRC calculation step is executed.
 During Arbitration, or when speculative enable is used (during Bus Idle,
 Intermission, Suspend Transmission), CRC is calculated from RX Data stream
 as there can be multiple units transmitting on the bus at once and correct
 value (when bus has settled in Sample point) must be used for calculation.
 After Arbitration field (when only one unit is Transmitter), Transmitter
 calculates CRC from TX Data stream and Receivers calculate CRC from RX
 Data stream.
 Calculation step from TX Data stream is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:crc-calculation-transmitter"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Calculation step from RX data stream is shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:crc-calculation-receiver"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
After Arbitration, source of data for CRC calculation changes from TX data
 stream to RX data stream.
 Pipeline stage during which next step of CRC calculation is executed differs
 based on source of input data (if RX data stream is used, input data are
 not valid before Sample point) as described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:can-crc-calculation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 When CRC17/CRC21 execute CRC calculation step from Stuffed/Destuffed bit,
 CRC15 remains unchagned (according trigger signal is gated).
 Next step of CRC calculation can be enabled by means of two enable signals:
 Regular enable and Speculative enable.
 Meaning of these two signals is explained in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:can-crc-enable-signals"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/crc_transmitter.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CRC calculation - TX Data stream
\begin_inset CommandInset label
LatexCommand label
name "fig:crc-calculation-transmitter"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/crc_receiver.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CRC calculation - RX Data stream
\begin_inset CommandInset label
LatexCommand label
name "fig:crc-calculation-receiver"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="8.8line%">
<column alignment="left" valignment="top" width="8line%">
<column alignment="left" valignment="top" width="42line%">
<column alignment="left" valignment="top" width="30line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC module
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data stream
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data input for CRC calculation
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipeline stage when calculation step is executed
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC 15
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitted data on output of Protocol Control.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Received data on input of Protocol control.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC 17
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitted data on output of Bit Stuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff + 1 clock cycle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Received data on input of Bit Destuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC 21
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitted data on output of Bit Stuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff + 1 clock cycle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Received data on input of Bit Destuffing.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
CAN CRC calculation
\begin_inset CommandInset label
LatexCommand label
name "tab:can-crc-calculation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="78.6line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN CRC Enable signal
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Regular enable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When CRC module is enabled by regular enable signal, it executes next step
 of calculation in according pipeline stage regardless of input data value
 to be processed.
 This enable signal is used during CAN frame fields from SOF until end of
 Data field.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Speculative enable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When CRC module is enabled by speculative enable signal, it executes next
 step of calculation in according pipeline stage only when input data value
 to be processed is dominant (logic 0).
 Recessive value is ignored.
 Speculative enable is used in Suspend Transmission, Last bit of Intermission
 and Bus Idle when dominant value is sampled and this value is interpreted
 as SOF by Protocol Control.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
CAN CRC enable signals
\begin_inset CommandInset label
LatexCommand label
name "tab:can-crc-enable-signals"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Trigger multiplexor
\end_layout

\begin_layout Standard
Trigger multiplexor implements following functionality:
\end_layout

\begin_layout Itemize
Gating of Trigger signals (clock enables for pipeline stages)
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/trigger_mux.lyx"

\end_inset


\end_layout

\begin_layout Standard
Trigger multiplexor creates Trigger signals for other blocks within CAN
 Core from Trigger signals generated by Prescaler as described in Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:trigger-signals"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="middle" width="10line%">
<column alignment="left" valignment="middle" width="10line%">
<column alignment="left" valignment="top" width="71line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger Name
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pipeline stage
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control TX Trigger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used for shifting TX shift register in Protocol control.
 Gated when there is Stuff Bit inserted by Bit Stuffing module.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control RX Trigger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used for shifting RX shift register in Protocol control, update of Protocol
 control FSM state, manipulation of Control counter and Retransmitt Counter.
 Gated when Stuff bit is discarded by Bit Destuffing module.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing Trigger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used for processing of TX data by Bit Stuffing module.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Destuffing Trigger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destuff
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used for processing of RX data by Bit Destuffing module.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC TX WBS Trigger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff + 1 clock cycle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used for CRC calculation step for CRC 17 / CRC 21 when CRC calculation step
 is executed from TX Data stream.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC TX NBS Trigger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used for CRC calculation step for CRC 15 when CRC calculation step is executed
 from TX Data stream.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC RX WBS Trigger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used for CRC calculation step for CRC 17 / CRC 21 when CRC calculation step
 is executed from RX Data stream.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC RX NBS Trigger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used for CRC calculation step for CRC 15 when CRC calculation step is executed
 from RX Data stream.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Trigger signals 
\begin_inset CommandInset label
LatexCommand label
name "tab:trigger-signals"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Bus traffic counters
\end_layout

\begin_layout Standard
Bus traffic counters contains two 32-bit counters (TX Frame counter and
 RX Frame counter).
 TX frame counter counts succesfully transmitted frames (without Error Frame)
 and is incremented by 1 for each such a transmitted frame.
 RX frame counter counts succesfully received frames (without Error Frame)
 and is incremented by 1 for each such a frame.
 If unit is Transmitter in Loop-back mode (it also receives frame transmitted
 by itself), both counters are incremented upon succesfull Transmission/Receptio
n.
 In such case, TX counter is incremented when TX frame is considered valid
 and RX frame is considered valid (see TODOCANFDSPEC).
 
\end_layout

\begin_layout Standard
Both counters can be erased by SW via COMMAND[TXFRCRST] and COMMAND[RXFRCRST]
 register.
 Value of counters can be read out from TODO and TODO registers.
 Bus traffic counters are instantiated only when 
\begin_inset Quotes eld
\end_inset

sup_traffic_counters=true
\begin_inset Quotes erd
\end_inset

.
 When Bus Traffic counters are not instantiated, access to TODO and TODO
 is reserved and writes to COMMAND[TXFRCRST] and COMMAND[RXFRCRST] have
 no effect.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
RX Buffer
\end_layout

\begin_layout Standard
RX Buffer implements following functionality:
\end_layout

\begin_layout Itemize
Storing frame to FIFO memory as CAN frame progresses.
\end_layout

\begin_layout Itemize
Count number of stored frames in FIFO.
\end_layout

\begin_layout Itemize
Provide read interface for Memory registers.
\end_layout

\begin_layout Itemize
Abort storing of CAN frame in case of an Error frame request or Overrun.
\end_layout

\begin_layout Standard
Block diagram of RX Buffer is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rx-buffer-block-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Visio_generated/BD_RX_Buffer.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:rx-buffer-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/rx_buffer.lyx"

\end_inset


\end_layout

\begin_layout Standard
RX Buffer contains FIFO memory (details of actual RAM memory are described
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Memories"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Size of RX Buffer memory is configurable by 
\begin_inset Quotes eld
\end_inset

rx_buffer_size
\begin_inset Quotes erd
\end_inset

 generic.
 Format of CAN FD frame within the memory is described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:CAN-frame-format"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and visualized in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rx-buffer-memory-format"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Size of CAN frame within RX Buffer memory spans from 4 to 20 32-bit memory
 words.
 RTR frames and frames with no Data field span 4 memory words (Metadata,
 Identifier, Timestamp upper, Timestamp lower).
 Each next 4 bytes of data span one memory word.
 Longest frame with 64 data bytes spans 20 memory words (Metadata, Identifier,
 Timestamp upper, Timestamp lower, 16 data words).
\end_layout

\begin_layout Standard
RX frame is stored to FIFO by means of RX Buffer Storing Protocol which
 is described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Storing-protocol"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 RX Frame is read from FIFO by means of RX Buffer Reading Protocol which
 is described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Reading-protocol"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 RX Buffer contains pointers to FIFO which are described in detail in Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:rx-buffer-pointers"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 RX Buffer can by flushed by issuing Release Receive Buffer command (writing
 logic 1 to COMMAND[RRB]).
 In such a case, all pointers are reset to zero as well as counter of stored
 frames (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Reading-protocol"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 If Release Receive Buffer command is issued by SW during storing of CAN
 frame, Overrun flag is set, and upon the end of actual frame this frame
 is discarded, and Raw Write Pointer is reset to value of previous Comited
 Write Pointer.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="30line%">
<column alignment="left" valignment="top" width="33.5line%">
<column alignment="left" valignment="top" width="15line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointer
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Incremented by 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pre-loaded
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pre-load value
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Raw Write Pointer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When a word is written to RX Buffer RAM (Metadata, Identifier, Data word
 or Timestamp)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When Reception abort command is issued or, Reception valid command is issued
 and Overflow occured before in the frame.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Commited Write Pointer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Commited Write Pointer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When frame is commited.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Raw Write Pointer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timestamp Write Pointer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
During storing of Timestamp lower word.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When Raw Write Pointer points to Lower Timestamp word of frame which is
 actually being stored.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Raw Write Pointer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read Pointer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When a word is read from RX Buffer.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer pointers
\begin_inset CommandInset label
LatexCommand label
name "tab:rx-buffer-pointers"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Visio_generated/RX_Buffer_layout.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer memory format
\begin_inset CommandInset label
LatexCommand label
name "fig:rx-buffer-memory-format"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Storing protocol
\begin_inset CommandInset label
LatexCommand label
name "subsec:Storing-protocol"

\end_inset


\end_layout

\begin_layout Standard
Protocol control FSM forms 
\begin_inset Quotes eld
\end_inset

Master
\begin_inset Quotes erd
\end_inset

 side of RX Buffer Storing Protocol and it issues commands which are described
 in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:rx-buffer-commands"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Commands from Protocol control FSM are filtered by Frame filters before
 sending to RX Buffer.
 Commands pass CAN fame filters when RX frame matches CAN frame filters
 as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Frame-Filters"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 If RX frame does not match CAN frame filters, commands are gated and does
 not reach RX Buffer within current CAN frame.
 RX Buffer FSM forms 
\begin_inset Quotes eld
\end_inset

Slave
\begin_inset Quotes erd
\end_inset

 side of this protocol, it receives commands and reacts upon them.
 State transition diagram of RX Buffer FSM is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rx-buffer-fsm"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Commands are issued by Protocol control FSM continously as reception of
 CAN frame progresses.
 Commands are issued by Protocol control FSM when unit is Receiver of a
 frame, or when Loopback mode (SETTINGS[ILBP] = '1') is enabled.
 When unit is Transmitter and Loopback mode is disabled, commands are not
 issued to RX Buffer (CAN frame is not being stored).
 An example of RX Buffer Storing protocol is shown in Figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Storing-protocol"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rx-buffer-storing-error"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 In detail, Storing protocol is described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:rx-buffer-storing-detailed"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
During storing of CAN frame, this frame can't be read out by SW via Memory
 registers.
 When frame is succesfully received without Error frame or Overrun (last
 bit of End of frame field), it is commited to RX Buffer and it becomes
 available for SW.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/rx_buffer_storing_protocol.pdf
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer storing protocol - succesfull reception
\begin_inset CommandInset label
LatexCommand label
name "fig:rx-buffer-storing-ok"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/rx_buffer_storing_protocol_error.pdf
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer storing protocol - Error frame
\begin_inset CommandInset label
LatexCommand label
name "fig:rx-buffer-storing-error"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Visio_generated/FSM_RX_Buffer.pdf
	lyxscale 20
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer FSM
\begin_inset CommandInset label
LatexCommand label
name "fig:rx-buffer-fsm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="25line%">
<column alignment="left" valignment="top" width="25line%">
<column alignment="left" valignment="top" width="28.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Issued in CAN frame part
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action performed
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source of stored information to RX Buffer RAM
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store metadata
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
At the end of Data Length Code field.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store Frame metadata, Identifier and zeroes to Timestamp words.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame metadata and Identifier from capture registers in RX Shift register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
After multiple of 4 bytes of Data field elapsed and at the end of Data field.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store Frame data word (4 bytes).
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Shift register in Protocol control.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reception valid
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In Sample Point of last bit of End of Frame field.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timestamp is stored and CAN Frame is commited to memory.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timestamp capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reception abort
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When Error frame is transmitted.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame storing is aborted, Raw Write Pointer is reverted to last Commited
 Write Pointer.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer commands
\begin_inset CommandInset label
LatexCommand label
name "tab:rx-buffer-commands"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="88.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reception of CAN frame starts.
 If RX frame Timestamp is configured to be captured at SOF, it is captured
 to Timestamp capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier is received to RX Shift register and stored to dedicated Capture
 register.
 Metadata information are stored to dedicated Capture register.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RX-Shift-Register"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
At the end of Control field, it is already clear whether unit is Transmitter
 or Receiver.
 It can no longer happend that a word will be stored to RX Buffer and unit
 will turn Receiver due to losing arbitration.
 Protocol control FSM issues Store Metadata command.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer FSM stores Metadata to Frame format word, received CAN Identifier
 to Identifier word and zeroes to Timestamp words during 4 consecutive clock
 cycles.
 Raw Write Pointer is incremented by 1 during each of these cycles.
 When Raw Write Pointer points to Lower Timestamp word, it is captured to
 Timestamp Write Pointer.
 After this step Raw Write Pointer points to first Data word.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data field of CAN frame starts.
 After each 4 bytes are received, Protocol control FSM issues Store Data
 command.
 These 4 bytes are stored to RX Buffer RAM in single word and Raw Write
 Pointer is incremented.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
At the end of last bit of Data field, Protocol control FSM issues Store
 Data command.
 Remaining bytes are stored to RX Buffer RAM and Raw Write Pointer is incremente
d.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN frame progresses to End of Frame field.
 In Sample point of End of Frame field, RX frame is considered valid (assuming
 no Error frame).
 Protocol control FSM issues Reception valid command.
 If RX frame Timestamp shall be taken in EOF, it is captured to Timestamp
 capture register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timestamp is stored from Timestamp capture register (by means of Timestamp
 Write Pointer), to RX Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If Overrun condition did not occur during storing of current frame, frame
 is commited to memory, Raw Write Pointer moves to Commited Write Pointer
 and number of frames in RX Buffer (Frame counter) is incremented.
 If Overrun condition or Release Receiver Buffer did occur during storing
 of current frame, frame is not commited to memory, Raw Write Pointer is
 reverted to Commited Write Pointer and number of frames in RX Buffer remains
 unchanged.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer storing protocol - detailed description
\begin_inset CommandInset label
LatexCommand label
name "tab:rx-buffer-storing-detailed"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Overrun and Error
\end_layout

\begin_layout Standard
RX Buffer maintains two overrun flags: User Overrun flag and Internal Overrun
 flag.
 Both overrun flags are set when RX Buffer FSM intents to write to RX Buffer
 RAM, and RX Buffer RAM is full (Overrun condition).
 Internal Overrun flag is reset at the end of Frame.
 User overrun flag is reset from Memory registers.
 When frame is error-free (no Error frame on CAN Bus), but overrun condition
 occured at some point before in the frame, frame is discarded (not commited)
 and Write pointers are manipulated as if Reception abort command was received.
\end_layout

\begin_layout Subsection
RX frame Timestamp
\end_layout

\begin_layout Standard
RX Buffer implements Time-stamping of RX frames.
 Timestamp of RX Buffer is created by sampling 
\begin_inset Quotes eld
\end_inset

Timestamp
\begin_inset Quotes erd
\end_inset

 input of CTU CAN FD in Sample Point of SOF or EOF bits (configured by RX_SETTIN
GS[RTSOP]).
 In Sample Point of these bits, Timestamp is captured to capture register
 and stored to RX Bufer memory from capture register at the end of CAN frame
 .
 As position of Timestamp memory words within RX Buffer is lower than Data
 words, when RX frame Timestamp is sampled in capture register (at latest
 in Sample point of EOF), Raw Write pointer is pointing one memory word
 behind last word of CAN frame.
 Due to this reason, Raw Write pointer can't be used to store RX frame Timestamp
 and dedicated Timestamp Write pointer is used.
 This pointer is loaded by RX Buffer FSM to point to first Timestamp Word
 in RX Buffer at the end of CAN frame.
\end_layout

\begin_layout Subsection
Reading protocol
\begin_inset CommandInset label
LatexCommand label
name "subsec:Reading-protocol"

\end_inset


\end_layout

\begin_layout Standard
RX Buffer is read out from SW word by word by reading from RX_DATA register
 as described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:rx-buffer-read-protocol"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Read pointer is incremented after each word is read.
 RX Buffer supports single reads (Read indication asserted for one clock
 cycle) and also continous burst read (Read indication asserted for several
 consecutive clock cycles).
 Since RX Buffer RAM has one clock cycle delay on data output, RAM read
 address is speculatively multiplexed between Read Pointer and Read Pointer
 + 1 as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rx-buffer-speculation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Due to this speculation RX Buffer read pre-feteches data from next memory
 word instead of memory word given by Read Pointer.
 This speculation is executed to support burst read.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="88.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read pointer points to Frame Format word of most recently stored frame in
 RX Buffer.
 Output of RX Buffer RAM contain Frame Format.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW reads from RX_DATA register (Frame Format word).
 Auxiliarly counter is loaded to value of RWCNT.
 Read Pointer increments by 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW now knows value of RWCNT (number of remaining words in currently read
 frame).
 SW reads from RX_DATA register RWCNT times.
 Read Pointer is incremented by 1 and auxiliarly counter is decremented
 by 1 after each of these reads.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
During last read (when auxiliarly counter transits from 1 to 0), Frame counter
 is decremented by 1.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer - read protocol
\begin_inset CommandInset label
LatexCommand label
name "tab:rx-buffer-read-protocol"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Timing_diagrams/PDFs/rx_buffer_pointer_speculation.pdf
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer - Read pointer speculation
\begin_inset CommandInset label
LatexCommand label
name "fig:rx-buffer-speculation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
RX Buffer contains Frame counter (readable by SW via RX_STATUS[RXFRC]).
 Frame counter holds amount of CAN frames actually stored in RX Buffer.
 Frame counter is incremented by 1 when a frame is commited to RX Buffer.
 Since RX Buffer RAM is read word by word, RX Buffer counts each read word
 from Memory registers and decrements Frame counter only when whole frame
 was read.
 If new frame is committed at the same time as last word of another frame
 is read, Frame counter remains unchanged.
 Manipulation with Frame counter is described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:frame-counter-handling"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="88.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame counter is 0.
 CAN frame is being received and stored to RX Buffer RAM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame ends and it is commited to RX Buffer, Frame Counter is incremented
 to 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read Pointer points to the first word of CAN frame (Frame Format word).
 Memory registers issue a read from RX Buffer.
 RX Buffer RAM output contains Frame Format word.
 RX Buffer loads value of RWCNT (Read word count) to an auxiliarly counter.
 Frame counter remains 1 and Read Pointer increments and points to Identifier
 word.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory registers issue RWCNT - 1 number of reads from RX Buffer and Read
 pointer increments by 1 on each read.
 Auxiliarly register decrements by 1 each read.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory registers issue a read from RX Buffer (reading last word of CAN frame).
 Auxiliarly register indicates that last word of frame is read and Frame
 counter is decremented by 1.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Frame counter handling
\begin_inset CommandInset label
LatexCommand label
name "tab:frame-counter-handling"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Frame Filters
\begin_inset CommandInset label
LatexCommand label
name "subsec:Frame-Filters"

\end_inset


\end_layout

\begin_layout Standard
Frame filters implement following functionality:
\end_layout

\begin_layout Itemize
Filter RX frames before storing to RX Buffer based on CAN Identifier.
\end_layout

\begin_layout Itemize
Gate RX Buffer commands when CAN Identifier does not match Frame Filters.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/frame_filters.lyx"

\end_inset


\end_layout

\begin_layout Standard
Frame filters implement two types of filters: Bit filter and Range filter.
 There are three instances of Bit Filter (A, B, C) and one instance of Range
 filter.
 Each instance is selectively synthesizable by 
\begin_inset Quotes eld
\end_inset

sup_filt_A/B/C
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

sup_range
\begin_inset Quotes erd
\end_inset

 generics.
 When no Frame Filter is synthesized, all RX frames are stored to RX Buffer
 and no frame is filtered out.
\end_layout

\begin_layout Standard
Filter types are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:frame-filter-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 CAN Frame matches Frame Filters if Identifier passes at least one filter
 (logical OR).
 Filters are considered only when Acceptance Filter Mode is enabled (MODE[AFM]
 = '1').
 When Acceptance Filter Mode is disabled, no RX frames are filtered out.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="66line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Filter type
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Configuration values
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Condition for frame to pass
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit filter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit value, 
\begin_inset Newline newline
\end_inset

Bit Mask and 
\begin_inset Newline newline
\end_inset

Accepted Frame/Identifier type.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Received Frame/Identifier type = Accepted Frame/Identifier type)
\begin_inset Newline newline
\end_inset

&&
\begin_inset Newline newline
\end_inset

(Received CAN Identifier AND Filter Mask = Filter value)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Range filter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lower threshold, Upper threshold and Frame/Identifier type.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Received Frame/Identifier type = Accepted Frame/Identifier type
\begin_inset Newline newline
\end_inset

AND
\end_layout

\begin_layout Plain Layout
Decimal value of Received CAN Identifier is between Lower threshold and
 Upper threshold ().
 Lower and Upper threshold are given in the same format as Identifier.
 When Base Identifier is compared, only Identifier Base is accounted to
 Range comparison.
 When Extended Identifier is compared, both Base Identifier and Identifier
 Extension are taken into account.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Frame filter types
\begin_inset CommandInset label
LatexCommand label
name "tab:frame-filter-types"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
TXT Buffer
\end_layout

\begin_layout Standard
TXT Buffer implements following functionality:
\end_layout

\begin_layout Itemize
Stores single CAN FD frame for transmission in internal RAM memory.
\end_layout

\begin_layout Itemize
Manages HW and SW access to this RAM memory.
\end_layout

\begin_layout Itemize
Provide status of frame transmission for SW.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/txt_buffer.lyx"

\end_inset


\end_layout

\begin_layout Standard
There are 4 TXT Buffers in CTU CAN FD.
 Each TXT Buffer RAM is accessed by SW via Memory registers as described
 in TODO.
 SW stores CAN frame to TXT Buffer.
 For SW, TXT Buffer RAM is write-only.
 TXT Buffer RAM is also accessed by Protocol control FSM which reads CAN
 frame from TXT Buffer and transmitts it on CAN Bus.
 For Protocol control, TXT Buffer is read-only.
 TXT Buffer is managed by Protocol Control FSM which is shown in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:txt-buffer-fsm"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 CAN Frame format within TXT Buffer is the same as within RX Buffer and
 it is described within 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:CAN-frame-format"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Each TXT Buffer in CTU CAN FD has its own priority (configured by TX_PRIORITY).
 Based on priority, TX Arbitratror selects TXT Buffer which will be used
 for transmission (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:TX-Arbitrator"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Visio_generated/FSM_TXT_Buffer.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer FSM
\begin_inset CommandInset label
LatexCommand label
name "fig:txt-buffer-fsm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
TXT Buffer commands
\begin_inset CommandInset label
LatexCommand label
name "subsec:TXT-Buffer-commands"

\end_inset


\end_layout

\begin_layout Standard
Two types of commands can be issued to TXT Buffer: SW commands and HW commands.
 SW commands are issued from SW by memory access to TX_COMMAND register.
 HW commands are issued by Protocol Control FSM.
 Both command types are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:txt-buffer-commands"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Behaviour of simultaneous SW and HW commands is described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:txt-buffer-simul-hw-sw-commands"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 If SW command is applied to TXT Buffer FSM in state for which it is not
 valid, it has no effect.
 HW command is never applied in TXT Buffer FSM state for which it is not
 valid.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="8line%">
<column alignment="left" valignment="top" width="14line%">
<column alignment="left" valignment="top" width="56.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command type 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Valid TXT Buffer States
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When is command issued
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Ready
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Empty, TX OK, Aborted, TX Failed
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW has filled TXT Buffer RAM with CAN frame and wants to transmitt this
 frame.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Empty
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX OK, Aborted, TX Failed
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW wants to move TXT Buffer to its inital state after reset.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Abort
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ready, TX in progress, Abort in Progress
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW wants to abort a frame which is currently Ready for transmission or being
 transmitted.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ready
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM starts transmitting frame from TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unlock - Done
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX in Progress, Abort in Progress
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM successfully transmitted frame from TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unlock - Error
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX in Progress, Abort in Progress
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error frame occurred, Protocol control stops transmitting from TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unlock - Arbitration lost
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX in Progress, Abort in Progress
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arbitration was lost, Protocol control stops transmitting from TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unlock Failed
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX in Progress, Abort in Progress
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A frame was re-transmitted number of times unsucesfully (either Arbitration
 was lost or Error frame occurred) and Retransmitt counter reached Retransmitt
 threshold.
 Frame transmission will not be attempted anymore.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer commands
\begin_inset CommandInset label
LatexCommand label
name "tab:txt-buffer-commands"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="8line%">
<column alignment="left" valignment="top" width="8line%">
<column alignment="left" valignment="top" width="14line%">
<column alignment="left" valignment="top" width="58.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW Command
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW Command 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer state
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Result
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Abort
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ready
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is locked for transmission, Protocol control transmitts from
 this buffer.
 TXT Buffer becomes 
\begin_inset Quotes eld
\end_inset

Abort in Progress
\begin_inset Quotes erd
\end_inset

 and transmission is attempted only once.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unlock - Done
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Abort
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX in Progress
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is unlocked and becomes 
\begin_inset Quotes eld
\end_inset

TX OK
\begin_inset Quotes erd
\end_inset

 since transmission is successfull.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unlock - Failed
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Abort
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX in Progress
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is unlocked and becomes 
\begin_inset Quotes eld
\end_inset

TX Failed
\begin_inset Quotes erd
\end_inset

 since transmission failed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unlock - Arbitration lost, Error
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Abort
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX in Progress
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is unlocked and becomes 
\begin_inset Quotes eld
\end_inset

Aborted
\begin_inset Quotes erd
\end_inset

.
 No more transmissions are attempted from this TXT Buffer.
 In this case SW command has priority over HW command to guarantee that
 SW command will not be lost!
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer simultaneous HW/SW commands
\begin_inset CommandInset label
LatexCommand label
name "tab:txt-buffer-simul-hw-sw-commands"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
TXT Buffer RAM
\end_layout

\begin_layout Standard
TXT buffer RAM is written by SW (port A) and read by Protocol Control (port
 B).
 With regards to accessibility, TXT Buffer RAM can be in two states: Unlocked
 and Locked.
 TXT Buffer FSM states corresponding to Locked and Unlocked state of TXT
 Buffer are demonstrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:txt-buffer-fsm"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 When TXT Buffer is unlocked, it is not acessed by CAN Core (nor TX Arbitrator)
 as there is no frame transmission/validation from this TXT Buffer and SW
 can write to TXT Buffer via Memory registers.
 When TXT Buffer is Locked, it was either marked as 
\begin_inset Quotes eld
\end_inset

Ready
\begin_inset Quotes erd
\end_inset

 for transmission, or validated by TX Arbitrator, or transmission is in
 progress from this TXT Buffer.
 When TXT buffer is Locked, SW can not write to TXT Buffer RAM and such
 writes have no effect.
 
\end_layout

\begin_layout Subsection
TXT Buffer - Transmission availability
\begin_inset CommandInset label
LatexCommand label
name "subsec:TXT-Buffer-tx-avail"

\end_inset


\end_layout

\begin_layout Standard
When TXT Buffer FSM is in 
\begin_inset Quotes eld
\end_inset

Ready
\begin_inset Quotes erd
\end_inset

 state, it is 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 for transmission from TX Arbitrators point of view.
 However, if TXT Buffer receives Set Abort command, it become 
\begin_inset Quotes eld
\end_inset

Unavailable
\begin_inset Quotes erd
\end_inset

 for transmission in the same clock cycle as Set Abort command is active
 (
\begin_inset Quotes eld
\end_inset

txtb_available
\begin_inset Quotes erd
\end_inset

 drops low).
 In this clock cycle, TXT Buffer FSM is still in 
\begin_inset Quotes eld
\end_inset

Ready
\begin_inset Quotes erd
\end_inset

 state and it will move to 
\begin_inset Quotes eld
\end_inset

Aborted
\begin_inset Quotes erd
\end_inset

 (or 
\begin_inset Quotes eld
\end_inset

Abort in Progress
\begin_inset Quotes erd
\end_inset

) in following clock cycle.
 This combinatorial path from Set Abort command to output of TXT Buffer
 is necessary to avoid hazards on TXT Buffer selection as explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:TX-Datapath-hazard"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
TXT Buffer - Use cases
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="27line%">
<column alignment="left" valignment="top" width="59line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW Action / State
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW fills TXT Buffer RAM.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is in Empty state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW issues Set ready command.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer moves to Ready state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator selects TXT Buffer for transmission and indicates this to
 Protocol control.
 On third bit of Intermission or when Bus is idle, Protocol control issues
 HW Lock command, TXT Buffer moves to TX in Progress and Protocol control
 starts transmission from TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame Transmission ends successfully and Protocol control issues Unlock
 - Done command.
 TXT Buffer moves to TX OK state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW reads state of TXT Buffer and finds out that transmission ended succesfully.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer - sucessfull transmission
\begin_inset CommandInset label
LatexCommand label
name "tab:txt-buffer-ok-transmission"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="35line%">
<column alignment="left" valignment="top" width="51line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW Action / State
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW fills TXT Buffer RAM.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is in Empty state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW issues Set ready command.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer moves to Ready state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator selects TXT Buffer for transmission and signals to Protocol
 control there is a valid TXT Buffer for transmission.
 On third bit of Intermission or when Bus is idle, Protocol control issues
 HW lock command, TXT Buffer moves to TX in Progress.
 Protocol control starts transmission from TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
During transmission SW issues Set Abort command to TXT Buffer.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer moves to Abort in Progress.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If an Error frame occurs or arbitration is lost, TXT Buffer moves to Aborted
 state.
 If frame transmission finished succesfully, TXT Buffer moves to TX OK state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW reads state of TXT Buffer and finds out whether transmission was aborted
 or it ended succesfully.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer - Abort
\begin_inset CommandInset label
LatexCommand label
name "tab:txt-buffer-abort"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="35line%">
<column alignment="left" valignment="top" width="51line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW Action / State
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW fills TXT Buffer RAM.
 SW configures retransmitt limit to 5 and enables retransmitt limitation.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is in Empty state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW issues Set Ready command.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer moves to Ready state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator selects TXT Buffer for transmission and indicates available
 TXT Buffer for transmission to Protocol control.
 On third bit of Intermission or when Bus is idle, Protocol control issues
 HW lock command, TXT Buffer moves to TX in Progress and Protocol control
 starts transmission from TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
An error occurs or arbitration is lost, Protocol control issues Unlock -
 Error or Unlock - Arbitration lost command.
 TXT Buffer moves to state Ready.
 Retransmitt counter is incremented to 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Steps 3-4 repeat until retransmitt counter reaches 5
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{cyan}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On 5th retransmission (retransmitt counter = 5), error occurs.
 Protocol control issues Unlock - Failed command.
 TXT Buffer FSM moves to TX Failed state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW reads state of TXT Buffer and finds out that transmission failed.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer - transmission failed
\begin_inset CommandInset label
LatexCommand label
name "tab:txt-buffer-tx-failed"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="35line%">
<column alignment="left" valignment="top" width="51line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW Action / State
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW fills TXT Buffer RAM.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is in Empty state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW issues Set Ready command.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer moves to Ready state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW decides to abort transmission of this frame and issues Set Abort command.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator selects TXT Buffer for transmission and indicates available
 TXT Buffer for transmission to Protocol control.
 On third bit of Intermission or when Bus is idle, Protocol control issues
 HW lock command.
 By coincidence, Set Abort command (SW) and Lock command (HW) are active
 in the same clock cycle.
 TXT Buffer moves to Abort in Progress and Protocol control starts transmission
 from TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
An error occurs or arbitration is lost, Protocol control issues Unlock -
 Error or Unlock - Arbitration lost command.
 TXT Buffer moves to state Aborted.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW reads state of TXT Buffer and finds out that transmission was aborted.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer - Simultaneous Abort and Lock
\begin_inset CommandInset label
LatexCommand label
name "tab:txt-buffer-simul-abort-lock"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
TX Arbitrator
\begin_inset CommandInset label
LatexCommand label
name "sec:TX-Arbitrator"

\end_inset


\end_layout

\begin_layout Standard
TX Arbitrator implements following functionality:
\end_layout

\begin_layout Itemize
Pick TXT Buffer for transmission.
\end_layout

\begin_layout Itemize
Load CAN frame metadata from TXT Buffer and provide them for CAN Core during
 transmission.
\end_layout

\begin_layout Itemize
Execute comparison of external Timestamp with TX frame Timestamp and determine
 moment of CAN frame transmission.
\end_layout

\begin_layout Itemize
Signal to CAN Core that CAN frame was validated and can be locked for transmissi
on.
\end_layout

\begin_layout Itemize
Hold index of TXT Buffer from which CAN Core is actually transmitting.
\end_layout

\begin_layout Itemize
Detect change of TXT Buffer between two consecutive transmissions.
\end_layout

\begin_layout Standard
TX Arbitrator block diagram is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:tx-arbitrator-block-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Visio_generated/BD_TX_Arbitrator.pdf
	lyxscale 20
	scale 71

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Arbitrator block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:tx-arbitrator-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/tx_arbitrator.lyx"

\end_inset


\end_layout

\begin_layout Subsection
TXT Buffer validation process
\end_layout

\begin_layout Standard
With regards to processing by TX Arbitrator, TXT Buffer can be in one of
 states described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:tx-arbitrator-buffer-processing"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 TXT Buffer validation process starts when Priority Decoder picks highest
 priority 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 TXT Buffer (so called 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 TXT Buffer) for transmission.
 Validation process is shown in Figure TODO, and described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:tx-arbitrator-operation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 An FSM controlling the selection is shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:fsm-tx-arbitrator"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Note that every state of TXT Buffer FSM lasts for two clock cycles due
 to Wait State.
 Such a wait state is inserted to cover delay of TXT Buffer RAM.
\end_layout

\begin_layout Standard
If index of 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 TXT Buffer changes (due to another higher priority TXT Buffer becoming
 
\begin_inset Quotes eld
\end_inset

Ready
\begin_inset Quotes erd
\end_inset

 or change of TXT Buffer priorities) during validation process or after
 validation process was finished, TXT Buffer validation process restarts
 with newly 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 TXT Buffer.
 If 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer suddenly becomes 
\begin_inset Quotes eld
\end_inset

Unavailable
\begin_inset Quotes erd
\end_inset

 (due to Set Abort SW command), TX Arbitrator signals immediately (in the
 same clock cycle) to Protocol Control FSM that there is no 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer (this is done to avoid control hazards on TX frame datapath
 and it is further explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:TX-Datapath-hazard"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 These situations are not mutually exclusive, possible cornercases are explained
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:tx-arbitrator-cornercase-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:tx-arbitrator-cornercase-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
When there is 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer, Protocol control FSM issues HW Lock command during Bus Idle
 or third bit of Intermission.
 In such a case TX Arbitrator becomes 
\begin_inset Quotes eld
\end_inset

Locked
\begin_inset Quotes erd
\end_inset

 and TXT Buffer becomes 
\begin_inset Quotes eld
\end_inset

Used
\begin_inset Quotes erd
\end_inset

.
 Protocol control then transmitts frame from this TXT Buffer and upon its
 end it issues HW Unlock command.
 TXT Buffer then becomes either 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

Unavailable
\begin_inset Quotes erd
\end_inset

 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:TXT-Buffer-commands"
plural "false"
caps "false"
noprefix "false"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10line%">
<column alignment="left" valignment="top" width="83.5line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Filter name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unavailable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Unavailable
\begin_inset Quotes erd
\end_inset

 when it is not 
\begin_inset Quotes eld
\end_inset

Available for transmission
\begin_inset Quotes erd
\end_inset

, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:TXT-Buffer-tx-avail"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Such a TXT Buffer is ignored by TX Arbitrator.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Available
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 when it is 
\begin_inset Quotes eld
\end_inset

Available for transmission
\begin_inset Quotes erd
\end_inset

, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:TXT-Buffer-tx-avail"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Selected
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 when it is 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 with highest priority out of all 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 TXT Buffers.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Validated
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 when it is 
\begin_inset Quotes eld
\end_inset

Available for transmission
\begin_inset Quotes erd
\end_inset

, its Timestamp comparison has been executed and Metadata from TXT Buffer
 RAM (Frame Format word) have been loaded to capture registers for CAN Core.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Used
\begin_inset Quotes erd
\end_inset

 after CAN Core issues 
\begin_inset Quotes eld
\end_inset

HW Lock
\begin_inset Quotes erd
\end_inset

 command on 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer and is transmitting from this TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Arbitrator - TXT Buffer processing
\begin_inset CommandInset label
LatexCommand label
name "tab:tx-arbitrator-buffer-processing"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Visio_generated/FSM_TX_Arbitrator.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Arbitrator FSM
\begin_inset CommandInset label
LatexCommand label
name "fig:fsm-tx-arbitrator"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="30line%">
<column alignment="left" valignment="top" width="56line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
External action (SW or external components)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW fills TXT Buffer 1 and issues Set Ready command to this Buffer.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer becomes 
\begin_inset Quotes eld
\end_inset

Ready
\begin_inset Quotes erd
\end_inset

 and therefore 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 for TX Arbitrator.
 As this is only TXT Buffer which is 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

, Priority decoder selects it as highest priority 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 TXT Buffer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator FSM loads lower Timestamp word from TXT Buffer 1 RAM and stores
 it to auxiliarly register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator FSM loads upper Timestamp word from TXT Buffer 1 RAM and executes
 comparison of External Timestamp and Timestamp of CAN Frame in TXT Buffer
 1 (Lower word is in auxiliarly register and Upper word is on output of
 TXT Buffer 1 RAM).
 When External Timestamp is lower than Timestamp of CAN frame in TXT Buffer
 1, TX Arbitrator waits, otherwise it proceeds to step 5.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
External Timestamp is incrementing (as it is counter of running time of
 a system) and it reaches value of CAN Frame Timestamp in TXT Buffer 1.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator notices External Timestamp is now higher than Timestamp of
 a Frame in selected TXT Buffer.
 At this moment TX Arbitrator proceeds with frame validation.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator FSM loads TX Frame metadata from TXT Buffer 1 RAM (Frame Format
 word) to capture registers.
 TXT Buffer 1 becomes 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 and TXT Arbitrator signals that there is a valid TX frame for transmission
 to CAN Core.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
When Protocol control FSM is in Sample point during third bit of Intermission
 or Bus Idle, it issues Lock command to TXT Buffer 1 (TXT Buffer becomes
 
\begin_inset Quotes eld
\end_inset

Used
\begin_inset Quotes erd
\end_inset

, TXT Buffer FSM moves to TX in Progress) and TX Arbitrator (TX Arbitrator
 becomes locked).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator is locked and it is waiting for unlock command.
 No TXT Buffer validation is in progress.
 If another higher priority TXT Buffer becomes 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 this has no effect as current frame transmission is already in progress.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control transmitts frame from TXT Buffer 1, and issues 
\begin_inset Quotes eld
\end_inset

Unlock - Done
\begin_inset Quotes erd
\end_inset

 command to TXT Buffer 1 (Buffer becomes 
\begin_inset Quotes eld
\end_inset

Unavailable
\begin_inset Quotes erd
\end_inset

 and TXT Buffer FSM moves to 
\begin_inset Quotes eld
\end_inset

TX OK
\begin_inset Quotes erd
\end_inset

).
 Since TXT Buffer 1 was only TXT Buffer which was 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 before the transmission, now there is no TXT Buffer which is 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

.
 Therefore no TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 and no TXT Buffer validation is in progress.
 TX Arbitrator signals there is no TXT Buffer 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 to CAN Core.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW reads state of TXT Buffer and finds out whether transmission was aborted
 or it ended succesfully (or an Interrupt can be fired).
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Arbitrator operation
\begin_inset CommandInset label
LatexCommand label
name "tab:tx-arbitrator-operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="30line%">
<column alignment="left" valignment="top" width="56line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
External action (SW or external components)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW configures priority 1 to TXT Buffer 1 and priority 2 to TXT Buffer 2.
 SW fills TXT Buffer 1 and TXT Buffer 2 by CAN frame.
 SW Issues 
\begin_inset Quotes eld
\end_inset

Set Ready
\begin_inset Quotes erd
\end_inset

 command to TXT Buffer 1.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 1 becomes 
\begin_inset Quotes eld
\end_inset

Ready
\begin_inset Quotes erd
\end_inset

 and therefore 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

.
 Since this is only 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 TXT Buffer, it becomes 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator performs validation process (loads Timestamp words, executes
 Timestamp comparison, loads metadata) and TXT Buffer 1 becomes 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

.
 TX Arbitrator signals to CAN Core that there is 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer for transmission.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW Issues 
\begin_inset Quotes eld
\end_inset

Set Ready
\begin_inset Quotes erd
\end_inset

 command to TXT Buffer 2.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 2 becomes 
\begin_inset Quotes eld
\end_inset

Ready
\begin_inset Quotes erd
\end_inset

 and therefore 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

.
 As this is TXT Buffer has higher priority than TXT Buffer 1, TXT Buffer
 2 becomes 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 by Priority decoder.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer validation process restarts with TXT Buffer 2.
 TXT Buffer 1 remains 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 (TXT Buffer 1 is still available for transmission).
 If during validation process of TXT Buffer 2, Protocol control issued HW
 Lock command, transmission would be started from TXT Buffer 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator finishes validation process (loads Timestamp words, executes
 Timestamp comparison, loads metadata) of TXT Buffer 2.
 At the end TXT Buffer 2 becomes 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 and TXT Buffer 1 (which was 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 till now) becomes 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control issues HW Lock command and since now TXT Bufer 2 is 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

, transmission starts from TXT Buffer 2.
 TX Arbitrator becomes Locked.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Arbitrator - Corner case 1
\begin_inset CommandInset label
LatexCommand label
name "tab:tx-arbitrator-cornercase-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="35line%">
<column alignment="left" valignment="top" width="51line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
External action (SW or external components)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW configures TXT Buffer 1 priority to 1 and TXT Buffer 2 priority to 2.
 SW fills TXT Buffer 1 and TXT Buffer 2 by CAN frames.
 SW Issues 
\begin_inset Quotes eld
\end_inset

Set Ready
\begin_inset Quotes erd
\end_inset

 command to TXT Buffer 1 and TXT Buffer 2.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 1 and 2 become 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 and TXT Buffer 2 becomes 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 because it has higher priority than TXT Buffer 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator performs TXT Buffer 2 validation process (loads Timestamp
 words, executes Timestamp comparison, loads metadata) and TXT Buffer 2
 becomes 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

.
 TX Arbitrator signals to CAN Core that there is 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer for transmission.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW Issues 
\begin_inset Quotes eld
\end_inset

Set Abort
\begin_inset Quotes erd
\end_inset

 command to TXT Buffer 2.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 2 which is now 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 becomes 
\begin_inset Quotes eld
\end_inset

Unavailable
\begin_inset Quotes erd
\end_inset

.
 TX Arbitrator immediately signals to CAN Core that no TXT Buffer is available
 for transmission (
\begin_inset Quotes eld
\end_inset

tran_frame_valid
\begin_inset Quotes erd
\end_inset

 drops low).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As TXT Buffer 1 is now only 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 TXT Buffer and thus it becomes 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Plain Layout
TXT Arbitrator proceeds with validation of TXT Buffer 1 and upon its end
 when TXT Buffer 1 becomes 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

, it signals that there is available frame for transmission.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Arbitrator - Corner case 2
\begin_inset CommandInset label
LatexCommand label
name "tab:tx-arbitrator-cornercase-2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Priority decoder
\end_layout

\begin_layout Standard
Priority decoder selects highest priority TXT Buffer from all 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 TXT Buffers combinatorially in single cycle.
 Such a TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

.
 Priority of TXT Buffers is given by SW (TX_PRIORITY register).
 If no TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

, Priority decoder signals it on its output and no TXT Buffer is 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

.
 If two 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 TXT Buffers have equal priority, TXT Buffer with lower index is selected.
 Priority decoder provides index of 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 TXT Buffer on its output.
\end_layout

\begin_layout Standard
Priority decoder is implemented as comparator tree with 3 levels (see Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:priority-decoder-block-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Each level of array contains so called 
\begin_inset Quotes eld
\end_inset

Decoder cells
\begin_inset Quotes erd
\end_inset

.
 Decoder cell selects higher priority TXT Buffer from two TXT Buffers.
 Each decoder cell behaves like so:
\end_layout

\begin_layout Itemize
When only one of input TXT Buffers is 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 it is automatically selected, its index is propagated as 
\begin_inset Quotes eld
\end_inset

Winner
\begin_inset Quotes erd
\end_inset

 of comparison and 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 output is high.
\end_layout

\begin_layout Itemize
When no TXT Buffer input is 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 output is low.
\end_layout

\begin_layout Itemize
When both TXT Buffer inputs are 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 output is high and index TXT Buffer with higher priority is propagated
 as 
\begin_inset Quotes eld
\end_inset

Winner
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Priority decoder supports 8 input TXT Buffers (currently only 4 are used).
 Unused inputs are driven to zeroes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/ctu_can_fd_2/doc/pics/Visio_generated/BD_priority_decoder.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Priority decoder block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:priority-decoder-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
TXT Buffer change between transmissions
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="5line%">
<column alignment="left" valignment="top" width="35line%">
<column alignment="left" valignment="top" width="51line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW Action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HW Action / State
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW fills TXT Buffer 1 RAM.
 SW enables retransmitt limitation and configures Retransmitt limit to 5.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 1 is in 
\begin_inset Quotes eld
\end_inset

Empty
\begin_inset Quotes erd
\end_inset

 State.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW issues 
\begin_inset Quotes eld
\end_inset

Set Ready
\begin_inset Quotes erd
\end_inset

 command to TXT Buffer 1.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 1 moves to 
\begin_inset Quotes eld
\end_inset

Ready
\begin_inset Quotes erd
\end_inset

 State.
 TXT Buffer becomes 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 for transmission.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator performs validatation and TXT Buffer 1 becomes 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

, TX Arbitrator signals this to CAN Core.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core issues HW Lock command and starts transmitting from TXT Buffer
 1.
 TXT Buffer 1 becomes 
\begin_inset Quotes eld
\end_inset

Used
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
An Error frame occurs or arbitration is lost.
 Protocol control signals 
\begin_inset Quotes eld
\end_inset

HW Unlock - Arbitration lost
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

HW Unlock - Error frame
\begin_inset Quotes erd
\end_inset

 commands.
 TXT Buffer 1 becomes 
\begin_inset Quotes eld
\end_inset

Unavailable
\begin_inset Quotes erd
\end_inset

 , TXT Buffer FSM moves to 
\begin_inset Quotes eld
\end_inset

Ready
\begin_inset Quotes erd
\end_inset

 and Retransmitt Counter is incremented to 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SW fills TXT Buffer RAM 2.
 SW Issues 
\begin_inset Quotes eld
\end_inset

Set Ready
\begin_inset Quotes erd
\end_inset

 command to TXT Buffer 2.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 2 moves to Ready state.
 Lets assume TXT Buffer 2 has higher priority than TXT Buffer 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Now there are two 
\begin_inset Quotes eld
\end_inset

Available
\begin_inset Quotes erd
\end_inset

 TXT Buffers (1 and 2).
 TXT Buffer 2 becomes 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 by Priority decoder because it has higher priority.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Arbitrator performs validation and TXT Buffer 2 becomes 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

, TX Arbitrator signals this to CAN Core.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core issues HW Lock command, TXT Buffer 2 becomes 
\begin_inset Quotes eld
\end_inset

Used
\begin_inset Quotes erd
\end_inset

 (Transmission starts by CAN Core).
 At this moment Retransmitt counter is cleared because TXT Buffer used for
 current transmission (TXT Buffer 2) is different than the one for previous
 transmission (TXT Buffer 1).
 (Logically, counting retransmissions on TXT Buffer 2 shall not include
 one previous failed transmission from TXT Buffer 1, because it is different
 CAN frame which is being transmitted).
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Selected TXT Buffer changed between transmissions
\begin_inset CommandInset label
LatexCommand label
name "tab:txt-buffer-change"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
TXT Buffer addressing
\end_layout

\begin_layout Standard
During transmission when TX Arbitrator is 
\begin_inset Quotes eld
\end_inset

Locked
\begin_inset Quotes erd
\end_inset

, TX Arbitrator holds index of 
\begin_inset Quotes eld
\end_inset

Used
\begin_inset Quotes erd
\end_inset

 TXT Buffer.
 During this time, Protocol Control FSM provides address of memory word
 from which it reads relevant Data for transmission.
 By this mechanism, Protocol Control is addressing Identifier memory word
 and transmitts Base Identifier and Identifier Extension from this word.
 Data memory words (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:CAN-frame-format"
plural "false"
caps "false"
noprefix "false"

\end_inset

) are addressed during transmission of Data field and Protocol control transmitt
s value of 
\begin_inset Quotes eld
\end_inset

Data field
\begin_inset Quotes erd
\end_inset

 from these memory words.
 Each next 4 bytes of CAN Data field correspond to one memory word in TXT
 Buffer RAM.
 From output of TXT Buffer RAM, this memory word is loaded to TX Shift register
 and transmitted from there (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:TX-Shift-Register"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Therefore Protocol control must address according memory word in previous
 CAN frame field to cover latency of TXT Buffer RAM as is shown in Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:txt-buffer-ram-addressing"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Metadata for transmission are available from capture registers in TX Arbitrator
 which were loaded during TXT Buffer 
\begin_inset Quotes eld
\end_inset

Validation
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="20line%">
<column alignment="left" valignment="top" width="25line%">
<column alignment="left" valignment="top" width="46line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN frame field 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory word in TXT Buffer addressed by Protocol control 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning of data loaded to TX Shift register
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SOF, Idle, Suspend, Intermission
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base Identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identifier Extension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLC
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data word 0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data bytes 0 ..
 3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Byte N * 4 - 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data word N + 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data bytes (N * 4) to (N + 1) * 4
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer RAM adressing during transmission
\begin_inset CommandInset label
LatexCommand label
name "tab:txt-buffer-ram-addressing"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
TX Frame Timestamp comparison
\end_layout

\begin_layout Standard
Part of TXT Buffer validation process is comparison of external Timestamp
 with Timestamp of CAN Frame in currently validated TXT Buffer.
 If External Timestamp is lower than Timestamp of CAN frame, validation
 process is paused.
 When External Timestamp is equal to or higher than Timestamp of CAN Frame,
 TXT Buffer validation proceeds.
 If during this time index of 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 TXT Buffer changes, validation process is restarted.
\end_layout

\begin_layout Standard
Comparison of Timestamps realizes 
\begin_inset Quotes eld
\end_inset

Time Triggered Transmission
\begin_inset Quotes erd
\end_inset

 functionality.
 Only when External Timestamp passes (desired moment of transmission passes),
 TXT Buffer is admited for transmission to CAN Core.
 This does not mean that CAN Core will transmit the frame immediately.
 CAN Core will transmitt such a frame in nearest Bus Idle or when it samples
 domidnant bit during third bit of Intermission.
\end_layout

\begin_layout Standard
Consider having two TX frames with TX Timestamps 10 (in TXT Buffer 1) and
 50 (in TXT Buffer 2).
 Lets assume that TXT Buffer 2 has higher priority and it is therefore 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 and it is being 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

.
 It finishes its validation after External Timestamp reaches 50.
 Although CAN frame in TXT Buffer 1 has lower Timestamp when it should be
 transmitted, it is transmitted after frame from TXT Buffer 2 because TXT
 Buffer 2 has higher priority.
 Therefore TXT Buffer priority is at any moment considered first during
 TXT Buffer selection and TX frame Timestamp is considered only from 
\begin_inset Quotes eld
\end_inset

Selected
\begin_inset Quotes erd
\end_inset

 TXT Buffer.
\end_layout

\begin_layout Subsection
HW lock and unlock
\end_layout

\begin_layout Standard
Protocol control FSM issues HW Lock command in third bit of Intermission
 (when it samples Dominant bit) or during Bus Idle when there is 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer available.
 In such a case CTU CAN FD becomes Transmitter of following CAN frame.
 After HW Lock command, TX Arbitrator becomes Locked and signalling of 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer remains high during whole frame.
 If there is no TXT Buffer 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 so far and TXT Buffer becomes 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 just slightly after Protocol control samples Dominant bit during third
 bit of Intermission or Bus Idle, unit becomes Receiver and frame from 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer is not transmitted.
\end_layout

\begin_layout Subsection
TX Datapath hazard protection
\begin_inset CommandInset label
LatexCommand label
name "subsec:TX-Datapath-hazard"

\end_inset


\end_layout

\begin_layout Standard
TX frame datapath (TX Arbitrator + TXT Buffers) are both manipulated by
 SW and HW commands simultaneously.
 This fact opens question of control hazards susceptibility.
 Such a hazard would occur, when e.g.
 TXT Buffer ended in 
\begin_inset Quotes eld
\end_inset

Aborted
\begin_inset Quotes erd
\end_inset

 state after 
\begin_inset Quotes eld
\end_inset

Set Abort
\begin_inset Quotes erd
\end_inset

 command, but Protocol control FSM still managed to issue HW Lock command.
 In such case, Protocol control FSM would transmitt from TXT Buffer which
 is 
\begin_inset Quotes eld
\end_inset

Aborted
\begin_inset Quotes erd
\end_inset

 (and therefore content of its RAM can be modified by user).
 Due to combinatorial path between 
\begin_inset Quotes eld
\end_inset

Set Abort
\begin_inset Quotes erd
\end_inset

 and indication of 
\begin_inset Quotes eld
\end_inset

Validated
\begin_inset Quotes erd
\end_inset

 TXT Buffer, it never happends that when 
\begin_inset Quotes eld
\end_inset

Set Abort
\begin_inset Quotes erd
\end_inset

 command is issued to a TXT Buffer, Protocol control FSM would issue HW
 Lock command, therefore this situation will never occur.
 The relevant combinatorial path is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:tx-data-path-hazards"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Hazard_prevention_logic.pdf
	lyxscale 20
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Datapath hazard protection
\begin_inset CommandInset label
LatexCommand label
name "fig:tx-data-path-hazards"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
TX Abort + Retransmitt clear
\end_layout

\begin_layout Standard
TODO: Premysliet kedy sa bude mazat Retransmitt counter pre TXT Buffer ktory
 prejde do Aborted.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Interrupt Manager
\end_layout

\begin_layout Standard
Interrupt manager implements following functionality:
\end_layout

\begin_layout Itemize
Capture occurence of events/conditions within CTU CAN FD to Interrupt Status
 register.
\end_layout

\begin_layout Itemize
Interrupt Masking and Enabling.
\end_layout

\begin_layout Itemize
Generation of Level-based Interrupt output.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/int_manager.lyx"

\end_inset


\end_layout

\begin_layout Standard
Occurence of events within CTU CAN FD is captured to Interrupt Status register
 (INT_STAT) register when corresponding interrupt is unmasked.
 When Interrupt is masked, correponding event is ignored.
 Interrupt mask is set by writing logic 1 to corresponding bit of INT_MASK_SET
 register.
 Interrupt mask is cleared by writing logic 1 to corresponding bit of INT_MASK_C
LR register.
 When a bit in Interrupt Status register is set, it causes Interrupt output
 of CTU CAN FD to go high when this interrupt is enabled.
 A bit in Interrupt Status register is cleared by writing Logic 1 to correspondi
ng bit in INT_STAT register.
 Value of Interrupt output is given by logical OR of all enabled Interrupts
 which have Interrupt Status equal to logic 1.
 Interrupt output is registered to be glitch free.
 Interrupt is enabled by writing logic 1 to corresponding bit of INT_ENA_SET
 register.
 Interrupt is disabled by writing logic 1 to corresponding bit of INT_ENA_CLR
 register.
 Block diagram of single interrupt datapath is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:int-single-datapath"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Available types of Interrupts are described in TODO.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Interrupt_single.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Single Interrupt Datapath
\begin_inset CommandInset label
LatexCommand label
name "fig:int-single-datapath"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Prescaler
\end_layout

\begin_layout Standard
Prescaler implements following functionality:
\end_layout

\begin_layout Itemize
Time quanta measurement (both Nominal and Data).
\end_layout

\begin_layout Itemize
Bit segments measurement (SYNC, PROP, PH1 and PH2).
\end_layout

\begin_layout Itemize
Execute Hard synchronisation and Resynchronisation as defined in TODO.
\end_layout

\begin_layout Itemize
Check if edge is valid for synchronisation (only one edge between two Sample
 points).
\end_layout

\begin_layout Itemize
Generate TX Trigger and RX Triggers for each stage of pipeline.
\end_layout

\begin_layout Itemize
Switch between Nominal and Data bit-rates.
\end_layout

\begin_layout Standard
Prescaler block diagram is shown in Figure TODO.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/prescaler.lyx"

\end_inset


\end_layout

\begin_layout Standard
Prescaler contains separate logic for both Bit-rates (Nominal and Data).
 Logic for single Bit-rate consist of Bit Time Counters module and Resynchronisa
tion module.
 Doubled logic for Nominal and Data Bit-rate is implemented to achieve better
 timing performance (shorter combinatorial paths) with slightly higher resource
 usage when compared to common logic for Nominal and Data Bit-timing.
\end_layout

\begin_layout Subsection
Bit time counters
\end_layout

\begin_layout Standard
Bit time counters module contains two counters: Time Quanta counter and
 Segment counter.
 Time Quanta counter measures length of Time Quanta and provides information
 that Time Quanta has elapsed (so called Time Quanta edge).
 Time Quanta edge signal is either active continously (when Prescaler is
 1), or always just for one clock cycle and it is used as clock enable.
 When Prescaler is 1, Time Quanta is equal to system clock and Time Quanta
 counter is not running (in this case Time Quanta edge signal is active
 continously).
 Segment counter measures length of Bit time segment.
 Prescaler distuiguishes two Bit Segments: TSEG1 (covers SYNC + PROP + PH1
 parts of Bit) and TSEG2 (corresponds to PH2 part of Bit).
 Segment counter counts from 0 and it is restarted upon the end of previos
 segment or upon Hard synchronisation.
 Segment counter for Nominal(Data) Bit-rate shall never overflow when current
 sampling control is set to Nominal (Data) Bit-rate.
\end_layout

\begin_layout Standard
Nominal Bit time counters module is enabled when CTU CAN FD is running with
 Nominal Bit-rate.
 Data Bit-time counters is enabled when CTU CAN FD is running with Data
 Bit-rate.
 During bits of CAN frame where Bit-rate is switched, both Nominal and Data
 Bit-rate counters are enabled.
 When Bit time counter module is disabled, none of its both counters are
 running (to save power).
 Both counters (Segment counter and Time Quanta counter) are restarted when
 Bit time segment ends to force alignment of Nominal and Data Time Quanta
 in the moment of Bit-rate switch.
\end_layout

\begin_layout Subsection
Resynchronisation
\end_layout

\begin_layout Standard
Resynchronisation module measures length of Bit Time segment (TSEG1 and
 TSEG2).
 Resynchronisation module maintains register with Expected Segment Length.
 Expected Segment length is loaded according to rules described in Table
 TODO and it is always loaded upon the end of segment, or when re-synchronisatio
n occurs.
 Loading of Expected segment length is shown in Figures TODO and TODO.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="30line%">
<column alignment="left" valignment="top" width="30line%">
<column alignment="left" valignment="top" width="25line%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Occurs when
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Loaded to value
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Additional action
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End of Segment TSEG1 due to 
\end_layout

\begin_layout Plain Layout
Segment counter equal to Expected Segment Length.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default lenght of TSEG2.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End of Segment TSEG2 due to segment counter reached Expected Segment Length.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default lenght of TSEG1.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Positive resynchronisation with Phase Error smaller than SJW.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default lenght of TSEG1 + Phase Error.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Positive resynchronisation with Phase Error larger than SJW.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default lenght of TSEG1 + SJW.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Negative resynchronisation with Phase Error smaller than SJW.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default lenght of TSEG1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Immediate end of segment.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Negative resynchronisation with Phase Error larger than SJW.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default lenght of TSEG2 - SJW.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hard synchronisation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default lenght of TSEG1 - 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Expected segment length manipulation
\begin_inset CommandInset label
LatexCommand label
name "tab:expected-segment-length"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Resynchronisation module compares value of Expected segment length with
 current value of Segment Counter and issues Segment End request when these
 two match.
 Overally, Segment End request can be caused by following means:
\end_layout

\begin_layout Itemize
Segment counter equals Expected Segment length.
 Such a situation is shown in Figure TODO.
\end_layout

\begin_layout Itemize
Immediate end of segment occurs.
\end_layout

\begin_layout Standard
Immediate end of segment is signalled when there is negative resynchronisation
 during TSEG2 and Phase error is smaller than SJW.
 Immediate resynchronisation requests Segment End Request in the same clock
 cycle when Resynchronisation edge occurs without one clock cycle delay
 of updating Expected Segment Length register.
 Immediate resynchronisation is shown in Figure TODO.
\end_layout

\begin_layout Subsection
Segment end detector
\end_layout

\begin_layout Standard
Segment end detector processes Segment End Requests from Resynchronisation
 modules (Nominal and Data) and determines when current segment should be
 truly ended.
 Segment end detector captures these requests and processes them when Time
 Quanta has elapsed (Time Quanta edge is active).
 If request arrives in the same clock cycle as Time Quanta has elapsed,
 it is processed immediately.
\end_layout

\begin_layout Subsection
Bit rate switch
\end_layout

\begin_layout Standard
Since both Bit Time counters (Nominal and Data) are running in bits where
 Bit-rate is switched (BRS and CRC Delimiter), length of TSEG2 of these
 bits is measured by both counters and both Resynchronisation modules can
 provide Segment End Request.
 Segment End Detector only considers requests from Resynchronisation module
 which is given by actual Sample Control (Nominal, Data) as given by Protocol
 Control FSM.
 Bit-rate switch is shown in Figure TODO.
\end_layout

\begin_layout Subsection
Prescaler FSM
\end_layout

\begin_layout Standard
Prescaler FSM determines in which Bit time segment (TSEG1, TSEG2) Prescaler
 actually is.
 Its state transition diagram is shown in Figure TODO.
 Prescaler FSM issues requests to generate TX Trigger and RX Triggers to
 Trigger generator when end of segment is signalled by Segment End Detector.
\end_layout

\begin_layout Subsection
Trigger generator
\end_layout

\begin_layout Standard
Trigger generator processes requests to generate TX Trigger (used to process
 data in Stuff pipeline stage) and RX Triggers (used to process data in
 Destuff and Process pipeline stages).
 Typical scenario is shown in Figure TODO.
 As there is no lower limit on length of TSEG2 from TODO, resynchronisation
 which shortens length of TSEG2 to just one clock cycle can occur.
 In such a case, RX Trigger for Process pipeline stage and TX trigger pipeline
 stage would overlap.
 To avoid this situation, TX Trigger is throttled by one clock cycle as
 it is shown in Figure TODO, and TSEG2 lasts only one clock cycle.
 As value of Information Processing Time for CTU CAN FD is 2, this situation
 corresponds to shortening length of TSEG2 to less than Information Processing
 Time.
 Throttling of TX Trigger corresponds to delaying calculation of following
 bit value after Information Processing Time from Sample Point.
\end_layout

\begin_layout Subsection
Synchronisation checker
\end_layout

\begin_layout Standard
Synchronisation checker determines if synchronisation edge is Hard synchronisati
on edge or Re-synchronisation edge.
 Synchronisation checker maintains a flag about valid synchronisation edge.
 Such a flag is set when synchronisation edge occurs and cleared when TSEG1
 ends (Sample point of bit).
 Based on this flag, synchronisation checker determines if synchronisation
 edge as provided by Bus Sampling is valid Hard synchronisation edge or
 Resynchronisation edge.
 If there are more synchronisation edges between two sample points, only
 first edge is detected as valid synchronisation edge and other edges are
 ignored.
 A situation where two synchronisation edges are detected (and second one
 is filtered out) is shown in Figure TODO.
\end_layout

\begin_layout Subsection
Synchronisation type
\end_layout

\begin_layout Standard
Type of Synchronisation is controlled by Protocol control FSM based on current
 part of CAN frame as is shown in Figure TODO.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Bus sampling
\begin_inset CommandInset label
LatexCommand label
name "sec:Bus-sampling"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/bus_sampling.lyx"

\end_inset


\end_layout

\begin_layout Standard
Bus sampling module implements following functionality:
\end_layout

\begin_layout Itemize
Sample Bus in Sample point and store it to previous bus value register.
\end_layout

\begin_layout Itemize
Detect edges on sampled TX and RX Data.
 Check for valid synchronisation edges.
\end_layout

\begin_layout Itemize
Measure Transcevier Delay and calculate Secondary Sample Point offset.
\end_layout

\begin_layout Itemize
Create Secondary sample point.
\end_layout

\begin_layout Itemize
Detect Bit Error.
\end_layout

\begin_layout Standard
Block diagram of Bus sampling is shown in Figure TODO.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Memory registers
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "entity_docs/memory_registers.lyx"

\end_inset


\end_layout

\end_body
\end_document
