#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{fancyhdr}
\pagestyle{fancy}
\usepackage{colortbl}
\definecolor{gray}{RGB}{230,230, 230}
\end_preamble
\use_default_options true
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing other 1.1
\use_hyperref true
\pdf_author "Ille Ondrej"
\pdf_subject "CAN FD IP function"
\pdf_keywords "CAN, Flexible data rate,"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\headheight 2cm
\secnumdepth -2
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
\size giant
\color black
CTU CAN
\noun on
 FD 
\begin_inset Newline newline
\end_inset

IP core
\noun default
\color inherit
 
\series default
\size default

\begin_inset Newline newline
\end_inset


\series bold
\size larger
\color black

\begin_inset VSpace bigskip
\end_inset


\size default
\noun on
Datasheet
\end_layout

\begin_layout Author

\series bold
\size larger
Ille Ondrej
\series default
\size default

\begin_inset Newline newline
\end_inset


\series bold
\size larger
Martin Jeřábek
\series default
\size default

\begin_inset Newline newline
\end_inset


\begin_inset VSpace defskip
\end_inset

Czech Technical University in Prague
\begin_inset Newline newline
\end_inset

Faculty of Electrical Engineering
\begin_inset Newline newline
\end_inset

Department of Measurement
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename ../pics/LEV.bmp
	lyxscale 20
	scale 60

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Left Header

\size larger
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="top">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell multirow="3" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../pics/LEV.bmp
	lyxscale 20
	scale 9

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size larger
CTU CAN FD IP Core
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand input
filename "version.tex"

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Right Header
Ille Ondrej, Martin Jeřábek
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="1.5cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Author
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
07-2015
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial version describing release 1.0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
09-2016
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Added test framework description.
 Updated document to cover latest description of CAN Core.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.1.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
07-2018
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Updated register map description, external references to generated maps.
 Updated block diagrams.
 Updated test framework description.
 Updated Synthesis table.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Format
\end_layout

\begin_layout Standard
Throughout this data sheet following notations are kept:
\end_layout

\begin_layout Itemize
Common text is written with this font.
\end_layout

\begin_layout Itemize
Memory registers are always described with capital letters e.g.
 REGISTER or REGISTER [BIT_FIELD] to represent register or bit field within
 a register.
\end_layout

\begin_layout Itemize
VHDL signal names, Entities, Architectures, Generics and FSM states are
 written with Italic and Roman styled letters e.g.
 
\family roman
\shape italic
tran_frame_valid or CAN_top_level.
\end_layout

\begin_layout Itemize
Important facts are emphasized by Bold letters such as: 
\begin_inset Quotes eld
\end_inset

core registers have 
\series bold
asynchronous
\series default
 reset
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Technical terms referring to CAN FD Standard are described with smaller
 capital letters such as: 
\shape smallcaps
stuff bit
\shape default
 or
\shape smallcaps
 error frame
\shape default
, which is the same font as is used for these terms in original CAN FD 1.0
 standard.
\end_layout

\begin_layout Itemize
Note that block diagrams within the documentation does not contain exact
 names of signals or FSM States.
 Most pictures are illustrative and exact name of VHDL signal is appended
 in text.
\end_layout

\begin_layout Chapter
1.
 Introduction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This document describes CTU CAN FD IP Core originally developed at Department
 of Measurement at Faculty of Electrical Engineering at Czech Technical
 University for purpose of testing CAN Bus.
 The core supports ISO as well as NON-ISO variants of CAN FD protocol.
 The core contains own test framework and extensive set of RTL tests.
 Low-level C driver with OS/CPU independent driver and Socket CAN Linux
 driver are available.
 Project contains several scripts for design automation and CAN testing
 purposes such as IP - XACT register map generator or KvaAlt (Kvaser / Altera)
 Logger.
\end_layout

\begin_layout Section
1.1 Functionality requirements
\end_layout

\begin_layout Standard
The implementation of CTU CAN FD was driven by following design requirements:
\end_layout

\begin_layout Enumerate
Implement CAN FD NON ISO protocol according to 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "true"

\end_inset

 and implement CAN FD ISO protocol.
 ISO or Non-ISO protocol can be switched by a configuration bit in a register
\end_layout

\begin_layout Enumerate
Provide 
\shape smallcaps
Logical Link Control
\shape default
 extension of MAC layer.
 It enables sending and receiving frames by manipulation with buffers (instead
 of direct manipulation with CAN state machine).
 This approach simplifies firmware implementation.
\end_layout

\begin_layout Enumerate
Possibility of capturing value of external time stamp when CAN frame is
 received and start transmitting frame when specific value of external time
 stamp is reached.
\end_layout

\begin_layout Enumerate
Record various events on CAN bus along with time stamp.
\end_layout

\begin_layout Enumerate
After a frame is inserted with specified transmission time, provide information
 when it was truly sent.
\end_layout

\begin_layout Enumerate
Be able, to trigger event recording (point 4) by a specific event on CAN
\end_layout

\begin_layout Enumerate
Possibility of manipulating 
\shape smallcaps
Fault Confinement
\shape default
 state and counters (see 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "true"

\end_inset

 for details).
\end_layout

\begin_layout Section
1.2 Features
\end_layout

\begin_layout Itemize
Vendor independent, VHDL RTL code for synthesis.
\end_layout

\begin_layout Itemize
RTL test framework wrapped in VUnit wrappers and simulations executable
 via GHDL or Modelsim.
 Code coverage available via 
\begin_inset Quotes eld
\end_inset

gcov
\begin_inset Quotes erd
\end_inset

 engine.
\end_layout

\begin_layout Itemize
Example project of Synthesis in Xilinx Vivado and Intel Quartus Prime.
\end_layout

\begin_layout Itemize
Low level driver and Linux Socket CAN driver.
\end_layout

\begin_layout Itemize
Support of ISO and Non-ISO CAN FD protocol.
\end_layout

\begin_layout Itemize
SDC and XDC design constraints for synthesis to Altera and Xilinx FPGAs.
\end_layout

\begin_layout Section
1.3 License
\end_layout

\begin_layout Standard
HW and test framework of CTU CAN FD IP core are published under MIT License:
\end_layout

\begin_layout Quote
Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the Software
 is furnished to do so, subject to the following conditions:
\end_layout

\begin_layout Quote
The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.
\end_layout

\begin_layout Quote
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE
, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
\end_layout

\begin_layout Standard
Linux driver and low level driver are published under GPL v 2.0:
\end_layout

\begin_layout Quote
This program is free software; you can redistribute it and/or * modify it
 under the terms of the GNU General Public License as published by the Free
 Software Foundation; either version 2 of the License, or (at your option)
 any later version.
 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
 You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 
\end_layout

\begin_layout Section
1.4 Development tools
\end_layout

\begin_layout Standard
To develop this IP Core following tools are used:
\end_layout

\begin_layout Itemize
Modelsim ALTERA Starter Edition 6.5b and GHDL for RTL simulations.
\end_layout

\begin_layout Itemize
Quartus Prime and Xilinx Vivado for Synthesis to Intel and Xilinx FPGAs,
 Timing analysis and design size benchmarks.
\end_layout

\begin_layout Itemize
VUnit for simulation wrappers.
\end_layout

\begin_layout Itemize
Kactus2 for definition of register map in IP-XACT format.
\end_layout

\begin_layout Itemize
\SpecialChar LyX
 v.2.3.0 to write documentation.
\end_layout

\begin_layout Itemize
GitLab of CTU FEE as a remote GIT repository.
\end_layout

\begin_layout Itemize
TimingAnalyzer SW for Timing Diagrams.
\end_layout

\begin_layout Section
1.5 Design automation
\end_layout

\begin_layout Standard
To simplify development of CTU CAN FD IP core, achieve scalability and maintaina
bility of the design, part of CTU CAN FD Core is auto-generated.
 Register map is implemented in Kactus 2 in IP-XACT format.
 The design in IP–XACT format is considered to be an unified specification
 of user–interface.
 Following design resources are generated from IP-XACT specification:
\end_layout

\begin_layout Itemize
VHDL packages with address, bit-fields and reset values definitions (
\begin_inset Quotes eld
\end_inset

src/Libraries/CAN_FD_Frame_format.vhd
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

src/Libraries/CAN_FD_Register_map.vhd
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
C header file with address map definitions and register descriptions (
\begin_inset Quotes eld
\end_inset

driver/ctu_can_fd_regs.h
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

driver/ctu_can_fd_frame.h
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
Lyx documentation.
 Chapters: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[3.
 CAN FD Core memory map]{3.
 CAN FD Core memory map}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[4.
 CAN FD frame format]{4.
 CAN FD frame format}
\end_layout

\end_inset

 are generated (
\begin_inset Quotes eld
\end_inset

doc/core/CANFrameformat.lyx
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

doc/core/registerMap.lyx
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
To generate these design materials CTU CAN FD IP Core contains its own IP-XACT
 generator framework (located under 
\begin_inset Quotes eld
\end_inset

scripts/pyXact_generator
\begin_inset Quotes erd
\end_inset

) which extends the implementation of 
\begin_inset CommandInset href
LatexCommand href
name "olofk/ipyxact"
target "https://github.com/olofk/ipyxact"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
1.6 Source code access
\end_layout

\begin_layout Standard
CTU CAN FD IP Core source code is available in CTU FEE GitLab repository
 at:
\end_layout

\begin_layout Standard
\begin_inset space \qquad{}
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "https://gitlab.fel.cvut.cz/illeondr/CAN_FD_IP_Core"
target "https://gitlab.fel.cvut.cz/illeondr/CAN_FD_IP_Core"
literal "false"

\end_inset


\end_layout

\begin_layout Chapter
2.
 System architecture
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The CTU CAN FD IP Core is compliant with VHDL 2008.
 Following VHDL packages from IEEE library are used in RTL sources of CTU
 CAN FD IP core:
\end_layout

\begin_layout Itemize
std_logic_1164
\end_layout

\begin_layout Itemize
numeric_std
\end_layout

\begin_layout Itemize
std_logic_unsigned
\end_layout

\begin_layout Standard
Each module has a unique function and number of dependencies between modules
 is minimal, which allows modularity and flexibility.
 CAN FD IP core is a memory mapped periphery and it can be embedded to custom
 SoC on FPGA or ASIC.
 The code itself is vendor independent, requiring 
\series bold
no vendor specific libraries
\series default
 or other IP cores.
 CTU CAN FD has single Slave memory interface.
\end_layout

\begin_layout Section
2.1 Configuration and IO signals 
\end_layout

\begin_layout Standard
CTU CAN FD IP Core is highly configurable before synthesis.
 Different configuration options can be used to reduce logic resource usage.
\end_layout

\begin_layout Standard
CTU CAN FD IP Core can be accessed over either of two buses, Avalon Bus
 or APB (Amba Peripheral Bus).
 Native interface is Avalon Bus.
 APB compatibility is achieved via wrapper circuit.
 For memory writes, write data are always sampled in the same clock cycle
 as address is active, thus allowing consecutive writes.
 For memory reads, read data are returned one clock cycle after address
 is active.
\end_layout

\begin_layout Subsection
2.1.1 Generic parameters
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab:CAN-generics]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:CAN-generics"
plural "false"
caps "false"
noprefix "false"

\end_inset

 lists generic configuration parameters of CTU CAN FD IP Core which can
 be modified before synthesis.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
use_logger
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boolean
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger is/is not synthesized.
 
\end_layout

\begin_layout Plain Layout
Refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Event-logger"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
rx_buffer_size
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
natural
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size of receive buffer in 32 bit words.
\end_layout

\begin_layout Plain Layout
Refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:2.3.10-RX-buffer-1"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
use_sync
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boolean
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use/Don't use synchronization chain for sampling of CAN bus.
 Can be set to 
\begin_inset Quotes eld
\end_inset

false
\begin_inset Quotes erd
\end_inset

 when synthesis tools automatically insert the synchronisation chain.
 Otherwise set to 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
ID
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
natural
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ID of controller.
 Unique identifier in case of more instances of the IP core on single bus.
 Corresponds to address(19:16) to which the IP core is mapped.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
sup_filtX
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boolean
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Core should support Mask Identifier FilterX (A,B,C) on received frames.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
sup_range
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boolean
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Core should support Range Identifier Filter.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
logger_size
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
natural
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size of event logger memory in number of events.
\end_layout

\begin_layout Plain Layout
Refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Event-logger"

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
IP Core generic parameters
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-generics"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
2.1.2 Avalon memory interface
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab:CAN-ports-Avalon]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:CAN-ports-Avalon"

\end_inset

 lists signals of CTU CAN FD on Avalon memory interface.
 When using CTU CAN FD with Avalon Interface, 
\family roman
\shape italic
CAN_top_level
\family default
\shape default
 entity from 
\begin_inset Quotes eld
\end_inset

src/CAN_top_level.vhd
\begin_inset Quotes erd
\end_inset

 must be used.
 Specific addressing must be used as is explained in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab:CAN-FD-Avalon-address]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:CAN-FD-Avalon-address"

\end_inset

.
 Note that generic parameter 
\family roman
\shape italic
ID
\family default
\shape default
 is part of Avalon address, thus it is possible to configure address on
 Avalon Bus before synthesis.
 With this architecture, it is possible to create up to 16 instances on
 a single parallel memory bus.
 More cores can be instantiated when using Interconnect components.
 Address bits 23:20 must have constant value 0x3.
 This requirement is given by a custom system for which this core was originally
 developed.
 Description of this system is beyond the scope of this document.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon Address 23:20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon Address 19:16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon Address 15:0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
ID
\family default
\shape default
 value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Register Address Offset
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Avalon addressing
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-FD-Avalon-address"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
3 consecutive Avalon Write cycles are shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Avalon-write-timing-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Avalon-write-timing-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 First access (8 bit access) is writing RST bit of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[MODE]{MODE}
\end_layout

\end_inset

 register, thus executing SW reset of CTU CAN FD.
 Second access (16 bit access) is clearing all Interrupts in Interrupt vector
 via write to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[INT_STAT]{INT
\backslash
textunderscore STAT}
\end_layout

\end_inset

 register.
 Third access (32 bit access) is configuring Bit timing for Nominal Bit
 Rate in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR]{BTR}
\end_layout

\end_inset

 register.
 See 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Memory-registers"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for register description.
\end_layout

\begin_layout Standard
Similarly, 3 Avalon Read cycles are shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Avalon-read-timing-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Avalon-read-timing-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 First access (8 bit access) is reading 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[INT_STAT]{INT
\backslash
textunderscore STAT}
\end_layout

\end_inset

 register and its default value is returned.
 Second access (16 bit access) is reading device Identifier from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[DEVICE_ID]{DEVICE
\backslash
textunderscore ID}
\end_layout

\end_inset

 register.
 Third access (32 bit access) is reading 0xDEADBEEF value from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[YOLO_REG]{YOLO
\backslash
textunderscore REG}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Write bursts and Read bursts which demonstrate storing single CAN Frame
 with 8 data bytes to TXT Buffer and reading data from RX Buffer via 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[RX_DATA]{RX
\backslash
textunderscore DATA}
\end_layout

\end_inset

 register are shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Avalon-write-burst-timing-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Avalon-write-burst-timing-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Avalon-read-burst-timing-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Avalon-read-burst-timing-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Note that when reading CAN Frame from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[RX_DATA]{RX
\backslash
textunderscore DATA}
\end_layout

\end_inset

 register, address is not incremented during the burst.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="6">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="7cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Direction
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronous to clock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
clk_sys
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon clock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
res_n
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reset
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Asynchronous reset, active low
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
data_in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
data_out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
address
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Address
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
scs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Chip select signal, active high
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
srd
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read access, active high
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
swr
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write access, active high
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
sbe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avalon bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Byte enable, active high
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
int
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt output
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Avalon CTU CAN FD signals
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-ports-Avalon"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Timing_diagrams/PDFs/Avalon_write.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Avalon write timing diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Avalon-write-timing-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Timing_diagrams/PDFs/Avalon_read.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Avalon read timing diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Avalon-read-timing-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Timing_diagrams/PDFs/Avalon_write_burst.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Avalon write burst timing diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Avalon-write-burst-timing-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Timing_diagrams/PDFs/Avalon_read_burst.pdf
	lyxscale 20
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Avalon read burst timing diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Avalon-read-burst-timing-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
2.1.3 APB memory interface
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab:CAN-ports-APB]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:CAN-ports-APB"
plural "false"
caps "false"
noprefix "false"

\end_inset

 lists signals of CTU CAN FD on APB memory interface.
 When using CTU CAN FD with Avalon Interface, 
\family roman
\shape italic
can_top_apb
\family default
\shape default
 from 
\begin_inset Quotes eld
\end_inset

src/can_top_apb.vhd
\begin_inset Quotes erd
\end_inset

 entity must be used.
 APB memory interface has no address constraints as in case of Avalon Bus
 described in previous section.
\end_layout

\begin_layout Standard
APB Write cycle is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:APB-write-timing-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:APB-write-timing-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

 writing to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR]{BTR}
\end_layout

\end_inset

 register.
 APB Read cycles are shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:APB-read-timing-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:APB-read-timing-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

 reading from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[YOLO_REG]{YOLO
\backslash
textunderscore REG}
\end_layout

\end_inset

 register.
 APB does not support burst transfers.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="6">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="7cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Direction
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronous to clock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
aclk
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB clock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
arstn
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reset
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Asynchronous reset, active low
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_pwdata
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_prdata
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_paddr
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Address
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_penable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable.
 Indicates second cycle of APB transfer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_pprot
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protection type (signal is unused)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_pready
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Slave ready
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_psel
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Chip select signal, active high
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_pslverr
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transfer Error (always 0).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_pstrb
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write strobe
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
s_apb_pwrite
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
APB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Direction
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
irq
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt output
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
APB CTU CAN FD signals
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-ports-APB"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Timing_diagrams/PDFs/APB_write.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
APB write timing diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:APB-write-timing-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Timing_diagrams/PDFs/APB_read.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
APB read timing diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:APB-read-timing-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
2.1.4 Common signals
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab:CAN-ports-common]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:CAN-ports-common"
plural "false"
caps "false"
noprefix "false"

\end_inset

 lists common signals of CTU CAN FD which are available if either of APB
 or Avalon wrappers are used.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="6">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="6.5cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Direction
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronous to clock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
CAN_tx
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX signal to CAN bus
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
CAN_rx
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN bus
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX signal from CAN bus
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
time_quanta_clk
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output clock with period of time quantum.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
timestamp
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timestamp for frame transmission
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Common CTU CAN FD signals
\begin_inset CommandInset label
LatexCommand label
name "tab:CAN-ports-common"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
2.2 Clock domains, external signals synchronization and reset
\end_layout

\begin_layout Standard
CTU CAN FD IP Core is synchronous to one clock signal (in case of Avalon
 clock name is 
\family roman
\shape italic
clk_sys
\family default
\shape default
, in case of APB clock name is 
\family roman
\shape italic
aclk
\family default
\shape default
).
 Throughout the design clock name is 
\family roman
\shape italic
clk_sys
\family default
\shape default
.
 Every other time period is derived from 
\family roman
\shape italic
clk_sys
\family default
\shape default
 (
\shape smallcaps
Time Quantum
\shape default
, 
\shape smallcaps
Bit Time
\shape default
...).
 Reset signal (
\family roman
\shape italic
res_n
\family default
\shape default
 on Avalon, 
\family roman
\shape italic
arstn
\family default
\shape default
 on APB) is an 
\series bold
asynchronous reset
\series default
 (active low) and it is internally synchronized by two flip-flop synchronizer.
 After reset is released, 
\series bold
at least two clock cycles
\series default
 must elapse before the core is accessed.
 If this condition is corrupted, Avalon write access will have no effect
 and Avalon read will return zero values.
 On APB access will insert wait state via 
\family roman
\shape italic
s_apb_pready
\family default
\shape default
 signal.
 Refer to APB Specification 
\begin_inset CommandInset citation
LatexCommand cite
key "key-23"
literal "false"

\end_inset

 for more on APB wait states.
\end_layout

\begin_layout Standard
Input signals of Memory bus interface and time stamp value are expected
 to be synchronous to 
\family roman
\shape italic
clk_sys
\family default
\shape default
 / 
\family roman
\shape italic
aclk
\family default
\shape default
, and no clock synchronization is implemented on these signals.
 
\family roman
\shape italic
CAN_RX
\family default
\shape default
 signal is synchronized by synchronization chain with two flip-flops.
 This synchronization chain is optional, but it is recommended to use it,
 unless synthesis tools automatically insert synchronization chain! Insertion
 of this synchronization chain is set by 
\family roman
\shape italic
use_sync
\family default
\shape default
 generic.
\end_layout

\begin_layout Section
2.3 Signal architecture
\end_layout

\begin_layout Standard
To simplify VHDL implementation, two parallel 
\begin_inset Quotes eld
\end_inset

buses
\begin_inset Quotes erd
\end_inset

 are used: 
\series bold
Driving Bus
\series default
 (
\family roman
\shape italic
drv_bus
\family default
\shape default
) and
\series bold
 Status Bus
\series default
 (
\family roman
\shape italic
stat_bus
\family default
\shape default
).
 These buses have a form of std logic vector.
 Each bus is driven from one entity and connected to other entities.
\end_layout

\begin_layout Subsection
2.3.1 Driving Bus
\end_layout

\begin_layout Standard
The Driving bus is used to control functionality of every module from user
 registers.
 It is driven in 
\series bold
Memory Registers
\series default
 (
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Memory-registers"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Every parameter of CTU CAN FD IP Core which can be configured from SW is
 part of Driving Bus.
 An exact definition of Driving Bus separates memory registers from other
 blocks.
 Thus it is possible to change the registers structure without modification
 of internal signaling.
 List of signals in Driving Bus is in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[chap:Appendix-A--]{Appendix A}
\end_layout

\end_inset

.
 Driving bus has following format:
\end_layout

\begin_layout LyX-Code

\series bold
\color black
signal drv_bus : std_logic_vector(1023 downto 0)
\end_layout

\begin_layout Subsection
2.3.2 Status Bus
\end_layout

\begin_layout Standard
Status Bus is used to provide information about state registers of CAN Controlle
r Core.
 It's driven in CAN Controller Core.
 Status Bus is used by Memory Registers and Event Logger modules.
 List of signals in Status Bus is in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[chap:Appendix-B--]{Appendix B}
\end_layout

\end_inset

.
 Status Bus has following format:
\end_layout

\begin_layout LyX-Code

\series bold
\color black
signal stat_bus : std_logic_vector(511 downto 0)
\end_layout

\begin_layout Section
2.4 Absolute maximum ratings
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="2cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimal Value
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recommended value
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximal value
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clock frequency
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
105.98
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MHz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PH2, PH2 FD
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clock Cycles
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PH1 + PROP FD
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clock Cycles
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nominal bit-rate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,544
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 000
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kb/s
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data bit-rate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,112
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14 286
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kb/s
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Frame selection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clock
\end_layout

\begin_layout Plain Layout
Cycles
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Absolute maximum ratings
\begin_inset CommandInset label
LatexCommand label
name "tab: Absolute_maximum_rating"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
2.5 Block diagram
\end_layout

\begin_layout Standard
The block diagram of CTU CAN FD is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:IP-function-block]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IP-function-block"

\end_inset

.
 Every block is a separate VHDL entity and it is implemented in a standalone
 file.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/IP_core_block_diagram.pdf
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CTU CAN FD block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:IP-function-block"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
2.6 Pipeline architecture
\begin_inset CommandInset label
LatexCommand label
name "sec-Pipeline-architecture"

\end_inset


\end_layout

\begin_layout Standard
CTU CAN FD controller data-path is pipelined on both TX and RX data paths.
 Pipeline architecture is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Pipeline-Architecture]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Pipeline-Architecture"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and it describes pipeline levels on RX and TX data-paths.
\end_layout

\begin_layout Standard
RX data-path contains 3 stages of pipeline:
\end_layout

\begin_layout Enumerate
Sample RX pin from CAN bus.
\end_layout

\begin_layout Enumerate
Perform 
\shape smallcaps
Bit Destuffing
\shape default
 on sampled CAN RX data.
\end_layout

\begin_layout Enumerate
Process Bit Destuffed data by Protocol Control FSM (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Protocol-Control"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
TX data-path contains 2 stages of pipeline:
\end_layout

\begin_layout Enumerate
Transmit bit by Protocol Control.
\end_layout

\begin_layout Enumerate
Perform 
\shape smallcaps
Bit Stuffing
\shape default
 on transmitted bit.
 Output from 
\shape smallcaps
Bit Stuffing
\shape default
 is directly connected to CAN TX data.
\end_layout

\begin_layout Standard
To achieve such data processing two Triggering Signal Types are generated:
 TX triggers for transmission and RX triggers for reception.
 Triggers are generated by Prescaler circuit.
 TX Triggers contain two triggers, RX Triggers contain three triggers.
 Each signal within Trigger Type is delayed by one clock cycle from previous
 one, and it is used as Enable signal on Flip-Flop in the next stage of
 pipeline.
 This architecture directly affects 
\shape smallcaps
Information Processing Time
\shape default
, refer to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab: IPT_reqs]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab: IPT_reqs"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for explanation.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Pipeline_architecture.pdf
	lyxscale 20
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Data-path pipeline
\begin_inset CommandInset label
LatexCommand label
name "fig:Pipeline-Architecture"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
2.7 Components description
\end_layout

\begin_layout Subsection
2.7.1 CAN Core
\end_layout

\begin_layout Description
File core_top.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
core_top
\end_layout

\begin_layout Standard
CAN Core implements functionality of serial data transmission according
 to CAN FD standard.
 Frame transmission (
\shape smallcaps
Transceiver
\shape default
, 
\shape smallcaps
Receiver
\shape default
), 
\shape smallcaps
Arbitration
\shape default
, 
\shape smallcaps
Bit Stuffing
\shape default
, 
\shape smallcaps
Bit Destuffing
\shape default
, 
\shape smallcaps
CRC
\shape default
 calculation, Error handling and 
\shape smallcaps
Fault Confinement
\shape default
 are implemented by sub-module instances.
 Block diagram is in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:CAN-Core-block]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CAN-Core-block"

\end_inset

.
 Inside this module correct CRC is selected (
\family roman
\shape italic
crc15
\family default
\shape default
, 
\family roman
\shape italic
crc17
\family default
\shape default
, 
\family roman
\shape italic
crc21
\family default
\shape default
) based on actually transmitted frame type (
\family roman
\shape italic
tran_frame_type), 
\family default
\shape default
received frame type (
\family roman
\shape italic
rec_frame_type
\family default
\shape default
) and 
\shape smallcaps
Operational State
\shape default
 (
\family roman
\shape italic
OP_State
\family default
\shape default
).
 Transceive Trigger (
\family roman
\shape italic
tran_trig
\family default
\shape default
) and Receive Trigger (
\family roman
\shape italic
rec_trig
\family default
\shape default
) are created here from Triggering signals (
\family roman
\shape italic
sync_nbt
\family default
\shape default
, 
\family roman
\shape italic
sync_dbt
\family default
\shape default
, 
\family roman
\shape italic
sample_nbt
\family default
\shape default
, 
\family roman
\shape italic
sample_dbt
\family default
\shape default
) from Prescaler.
 When 
\shape smallcaps
Stuff Bit
\shape default
 is inserted or 
\shape smallcaps
Stuff Bit
\shape default
 is discarded, Transceive and Receive Triggers are not activated due to
 signals 
\family roman
\shape italic
data_halt
\family default
\shape default
 and 
\family roman
\shape italic
destuffed
\family default
\shape default
.
 Bit Stuffing and Bit Destuffing Triggers (
\family roman
\shape italic
bs_trig
\family default
\shape default
, 
\family roman
\shape italic
bds_trig
\family default
\shape default
) are multiplexed in this module.
 Status Bus (
\family roman
\shape italic
stat_bus
\family default
\shape default
) signals assignments and Traffic Measurement (
\family roman
\shape italic
tx_counter
\family default
\shape default
, 
\family roman
\shape italic
rx_counter
\family default
\shape default
) are implemented in this module.
 Internal loop-back multiplexer (
\family roman
\shape italic
int_loopback_ena
\family default
\shape default
) allows bypassing TX Data to RX Data without sending it to CAN Bus.
 Note that in case of Secondary Sampling (
\family roman
\shape italic
sp_control_int = SECONDARY_SAMPLE
\family default
\shape default
), TX data are also directly looped back to RX Data to allow proper operation
 of Protocol Control State machine.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Core_block_diagram.pdf
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CAN Core block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:CAN-Core-block"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.1 Protocol Control
\begin_inset CommandInset label
LatexCommand label
name "subsec-Protocol-Control"

\end_inset


\end_layout

\begin_layout Description
File protocolControl.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in core_top.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
protocolControl
\end_layout

\begin_layout Standard
Protocol Control (
\family roman
\shape italic
PC_State
\family default
\shape default
) is the main state machine handling CAN FD protocol.
 Protocol Control processes received data with the 
\family roman
\shape italic
rec_trig
\family default
\shape default
 signal (in 
\shape smallcaps
Sample Point
\shape default
 of 
\shape smallcaps
Bit Time
\shape default
).
 Protocol Control State is also changed with 
\family roman
\shape italic
rec_trig
\family default
\shape default
 signal.
 Data are transmitted with 
\family roman
\shape italic
tran_trig
\family default
\shape default
 signal (in 
\shape smallcaps
Sync
\shape default
 segment of 
\shape smallcaps
Bit Time
\shape default
).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab: PC_most_important_signals]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab: PC_most_important_signals"
plural "false"
caps "false"
noprefix "false"

\end_inset

 lists most important signals within Protocol Control module.
 Note that internal registers are named with 
\begin_inset Quotes eld
\end_inset

_r
\begin_inset Quotes erd
\end_inset

 suffix.
 When registers are connected to output of Protocol Control module, 
\begin_inset Quotes eld
\end_inset

_r
\begin_inset Quotes erd
\end_inset

 suffix is omitted (e.g register 
\family roman
\shape italic
stuff_enable_r
\family default
\shape default
 is connected to output port 
\family roman
\shape italic
stuff_enable
\family default
\shape default
).
 Protocol control state transition diagram is displayed in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:PC_control-1]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:PC_control-1"

\end_inset

.
 For simplicity only main state transitions are displayed!
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_protocol_control.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Protocol Control State Machine
\begin_inset CommandInset label
LatexCommand label
name "fig:PC_control-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="27" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="7cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Direction
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
PC_State
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
protocol_type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control FSM signal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
FSM_preset
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
internal
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal which is set to logic '1' with each transition of PC_State, otherwise
 set to 0.
 Indicates first clock cycle of any PC_State.
 First clock cycle of each state is used for configuration of the state
 (e.g.
 setting counters)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
data_tx
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmitted CAN frame.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
data_rx
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Received CAN frame.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
tran_trig
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transceive trigger in SYNC part of bit.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
rec_trig
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receive trigger in SAMPLE point of bit.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
OP_State
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operational state of CAN Node.
 See 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Operation-control"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
sp_control
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic_vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Time control.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
sync_control
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic_vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronization control.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
arbitration_lost
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signals loss of arbitration for Operation control FSM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
stuff_enable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In '1' Bit Stuffing is enabled, otherwise disabled.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
destuff_enable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In '1' Bit De-stuffing is enabled, otherwise disabled.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
fixed_stuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In '1' fixed Bit Stuffing is used, otherwise normal Bit Stuffing is used.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
fixed_destuff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In '1' fixed Bit De-stuffing is used, otherwise normal Bit De-stuffing is
 used.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
stuff_length
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic_vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of consecutive equal bits which cause insertion of 
\shape smallcaps
Stuff Bit
\shape default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
destuff_length
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic_vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of consecutive equal bits which cause insertion of 
\shape smallcaps
De-stuff Bit
\shape default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
txt_hw_cmd
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command structure for TXT Buffers.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
inc_one
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signals that Error counter should be incremented by 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
inc_eight
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signals that Error counter should be incremented by 8.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
dec_one
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signals that Error counter should be decremented by 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
crc_enable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In '1' CRC calculation is enabled.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
tran_valid
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transmission of frame was succesfull.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
rec_valid
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reception of frame was sucesfull.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
tran_pointer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
internal
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic_vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter for transmission of 
\shape smallcaps
Identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
data_pointer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
internal
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic_vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter for transmission of 
\shape smallcaps
Data
\shape default
 field.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
control_pointer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
internal
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std_logic_vector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter for transmission of other fields.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Most important Protocol Control signals
\begin_inset CommandInset label
LatexCommand label
name "tab: PC_most_important_signals"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Paragraph
off
\end_layout

\begin_layout Standard
Circuit operation starts from 
\family roman
\shape italic
off
\family default
\shape default
 state.
 When CTU CAN FD is enabled by write to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[SETTINGS]{SETTINGS[ENA]}
\end_layout

\end_inset

 register (
\family roman
\shape italic
drv_ena
\family default
\shape default
), and unit is not integrating anymore (
\family roman
\shape italic
not (error_state = bus_off)
\family default
\shape default
), Protocol Control moves to 
\family roman
\shape italic
interframe
\family default
\shape default
 state.
 Upon available TX Frame (
\family roman
\shape italic
tran_frame_valid_in
\family default
\shape default
) or reception of 
\shape smallcaps
Recessive
\shape default
 to 
\shape smallcaps
Dominant
\shape default
 edge (
\family roman
\shape italic
hard_sync_edge
\family default
\shape default
), new frame is started by transition to 
\family roman
\shape italic
sof
\family default
\shape default
.
 When TX Frame is available, TXT Buffer is locked (
\family roman
\shape italic
txt_hw_cmd.lock
\family default
\shape default
).
 After 1 bit, state is changed to 
\family roman
\shape italic
arbitration
\family default
\shape default
.
\end_layout

\begin_layout Paragraph
arbitration
\end_layout

\begin_layout Standard
In first clock cycle of 
\family roman
\shape italic
arbitration
\family default
\shape default
, shift registers for transmission of CAN Identifier are loaded (
\family roman
\shape italic
tran_ident_base_sr
\family default
\shape default
, 
\family roman
\shape italic
tran_ident_ext_sr
\family default
\shape default
).
 In arbitration, 
\shape smallcaps
Bit Error
\shape default
 is detected only upon transmission of 
\shape smallcaps
Dominant Bit
\shape default
 and Reception of 
\shape smallcaps
Recessive Bit
\shape default
.
 If 
\shape smallcaps
Recessive
\shape default
 is transmitted, but 
\shape smallcaps
Dominant
\shape default
 is received, arbitration loss is signaled to Operation Control FSM via
 
\family roman
\shape italic
arbitration_lost
\family default
\shape default
 signal.
 At the end of 
\shape smallcaps
Arbitration
\shape default
 field of CAN Frame, Protocol Control is moved to 
\family roman
\shape italic
control
\family default
\shape default
 state (for 
\shape smallcaps
Control
\shape default
 field of CAN Frame).
 In 
\shape smallcaps
Control
\shape default
 field, combinations of 
\shape smallcaps
CAN 2.0
\shape default
 / 
\shape smallcaps
CAN FD
\shape default
 and 
\shape smallcaps
Base
\shape default
 / 
\shape smallcaps
Extended
\shape default
 Identifiers are handled separately.
 Since in Control field it is already clear whether unit is Transmitter
 or Receiver of a frame, each case is considered separately.
 FSM state 
\family roman
\shape italic
arbitration 
\family default
\shape default
contains sub-FSM (
\family roman
\shape italic
arb_state
\family default
\shape default
) which is used to handle different types of CAN Identifiers.
 State transition diagram is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Arbitration_FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arbitration_FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Upon start of 
\family roman
\shape italic
arbitration
\family default
\shape default
, 
\family roman
\shape italic
arb_state
\family default
\shape default
 is in 
\family roman
\shape italic
base_id
\family default
\shape default
, which covers transmission of 
\shape smallcaps
Base
\shape default
 Identifier.
 After 11 bits of transmission / reception (controlled by 
\family roman
\shape italic
tran_pointer
\family default
\shape default
), state is switched to 
\family roman
\shape italic
two_bits
\family default
\shape default
, which covers transmission of two bits following 
\shape smallcaps
Base
\shape default
 Identifier.
 First bit is 
\shape smallcaps
Remote Transmission Request
\shape default
, 
\shape smallcaps
r1
\shape default
 or 
\shape smallcaps
Substitute remote request
\shape default
 depending on Frame Format (
\family roman
\shape italic
tran_frame_type
\family default
\shape default
) and Identifier Type (
\family roman
\shape italic
tran_ident_type
\family default
\shape default
).
 Second bit is 
\shape smallcaps
Identifier Extension
\shape default
 for every frame type.
 Note that 
\shape smallcaps
Identifier Extension
\shape default
 bit in frame with only 
\shape smallcaps
Base
\shape default
 Identifier should already be part of 
\shape smallcaps
Control
\shape default
 field! Since this bit is transmitted 
\shape smallcaps
Dominant
\shape default
 for these frames, node can not loose arbitration in this bit.
 Thus it is not problematic that this bit is part of 
\shape smallcaps
Arbitration
\shape default
 field instead of 
\shape smallcaps
Control
\shape default
 field.
 Upon sampled value of 
\shape smallcaps
Identifier Extension
\shape default
 bit (
\family roman
\shape italic
rec_ident_type
\family default
\shape default
), 
\family roman
\shape italic
arb_state 
\family default
\shape default
is transferred to either 
\family roman
\shape italic
ext_id
\family default
\shape default
, or Protocol Control exits to 
\family roman
\shape italic
control
\family default
\shape default
.
 In 
\family roman
\shape italic
ext_id
\family default
\shape default
, transmission of 18 bit Identifier 
\shape smallcaps
Extension
\shape default
 is covered.
 Upon end of Identifier 
\shape smallcaps
Extension
\shape default
 (
\family roman
\shape italic
tran_pointer = 0
\family default
\shape default
), 
\family roman
\shape italic
arb_state
\family default
\shape default
 is updated to 
\family roman
\shape italic
one_bit
\family default
\shape default
.
 One bit covers 1 bit following Identifier 
\shape smallcaps
Extension
\shape default
.
 This bit corresponds to 
\shape smallcaps
Remote Transmission Request
\shape default
 or 
\shape smallcaps
r1
\shape default
 bit depending on frame type.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_arbitration.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Arbitration State Machine
\begin_inset CommandInset label
LatexCommand label
name "fig:Arbitration_FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
control
\end_layout

\begin_layout Standard
In first cycle of 
\family roman
\shape italic
control
\family default
\shape default
, shift register (
\family roman
\shape italic
ctrl_tran_reg
\family default
\shape default
) for transmission is loaded if unit is 
\shape smallcaps
Transmitter
\shape default
.
 Length of field is controlled by 
\family roman
\shape italic
control_pointer
\family default
\shape default
 counter.
 In case of CAN FD Frame, bit rate is shifted (
\family roman
\shape italic
sp_control_r
\family default
\shape default
) in 
\shape smallcaps
Bit Rate Shift
\shape default
 bit.
 Data sampling (
\family roman
\shape italic
DATA_SAMPLE
\family default
\shape default
) is used for 
\shape smallcaps
Receiver
\shape default
, and Secondary sampling (
\family roman
\shape italic
SECONDARY_SAMPLE
\family default
\shape default
) is used 
\shape smallcaps
Transmitter
\shape default
.
 Both of these represent 
\shape smallcaps
Data Bit Rate
\shape default
 from CAN FD Standard.
 Such a difference is necessary, since 
\shape smallcaps
Transmitter
\shape default
 must be able to receive its own bit with delayed sample point for 
\shape smallcaps
Bit Error
\shape default
 detection (refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec-Error-detection"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\shape smallcaps
Receiver
\shape default
 of CAN FD Frame sets hard synchronization in 
\shape smallcaps
Extended Data Length
\shape default
 bit (
\family roman
\shape italic
sync_control_r <= HARD_SYNC
\family default
\shape default
).
 Note that after 
\shape smallcaps
Bit Rate Shift
\shape default
 bit of CAN FD 
\shape smallcaps
Transmitter
\shape default
, no synchronization is performed (
\family roman
\shape italic
sync_control_r <= NO_SYNC
\family default
\shape default
).
 Furthermore, in case of CAN FD Frames, 
\shape smallcaps
Transceiver Delay Calibration
\shape default
 is started (
\family roman
\shape italic
trv_delay_calib_r
\family default
\shape default
, ssp_reset) in 
\shape smallcaps
Extended Data Length
\shape default
 bit (refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Bus-Sampling"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Upon end of 
\shape smallcaps
Control
\shape default
 field (
\family roman
\shape italic
control_pointer = 0
\family default
\shape default
), Protocol Control state is changed to 
\family roman
\shape italic
data
\family default
\shape default
 or 
\family roman
\shape italic
CRC
\family default
\shape default
, based on Transmitted / Received Data Length (
\family roman
\shape italic
tran_dlc
\family default
\shape default
, 
\family roman
\shape italic
rec_dlc
\family default
\shape default
), 
\shape smallcaps
Remote Transmission Request
\shape default
 Flag (
\family roman
\shape italic
tran_is_rtr
\family default
\shape default
, 
\family roman
\shape italic
rec_is_rtr)
\family default
\shape default
 and 
\shape smallcaps
RTR
\shape default
 preferred behavior (
\family roman
\shape italic
drv_rtr_pref
\family default
\shape default
, see register 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[MODE]{MODE}
\end_layout

\end_inset

).
 Upon the end of 
\shape smallcaps
Control
\shape default
 field, receiver signals to RX Buffer, that first 4 words of CAN Frame (see
 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:2.3.10-RX-buffer-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) can be stored (
\family roman
\shape italic
store_metadata
\family default
\shape default
).
\end_layout

\begin_layout Paragraph
data
\end_layout

\begin_layout Standard
In 
\family roman
\shape italic
data
\family default
\shape default
 state, transmitter transmits data from locked TXT Buffer, and updates pointer
 to TXT Buffer memory (
\family roman
\shape italic
txt_buf_ptr_r
\family default
\shape default
) to obtain next data bytes.
 Within each TXT Buffer memory word (
\family roman
\shape italic
tx_data_word
\family default
\shape default
), transmitted bit is addressed with 
\family roman
\shape italic
data_tx_index
\family default
\shape default
.
 Receiver sample RX data to 8 bit shift register (
\family roman
\shape italic
rec_data_sr
\family default
\shape default
).
 When whole byte is received, it is stored to 
\family roman
\shape italic
store_data_word_r
\family default
\shape default
 register.
 Upon reception of 4 bytes (
\family roman
\shape italic
rec_word_bind = 3
\family default
\shape default
) or end of 
\shape smallcaps
Data
\shape default
 field (
\family roman
\shape italic
data_pointer = 0
\family default
\shape default
), contents of 
\family roman
\shape italic
store_data_word_r
\family default
\shape default
 is stored in RX Buffer by giving Store Data Command (
\family roman
\shape italic
store_data_r
\family default
\shape default
).
 Upon the end of 
\shape smallcaps
Data
\shape default
 field, Protocol Control is changed to 
\family roman
\shape italic
crc
\family default
\shape default
.
\end_layout

\begin_layout Paragraph
crc
\end_layout

\begin_layout Standard
In 
\family roman
\shape italic
crc
\family default
\shape default
 proper 
\shape smallcaps
CRC Sequence
\shape default
 is selected (
\family roman
\shape italic
crc_src
\family default
\shape default
), and 
\shape smallcaps
Fixed Bit Stuffing
\shape default
 and 
\shape smallcaps
Fixed Bit Destuffing
\shape default
 is configured for CAN FD Frames.
 CRC length is controlled with counter 
\family roman
\shape italic
data_pointer
\family default
\shape default
, and upon its expiration Protocol Control is updated to 
\family roman
\shape italic
delim_ack
\family default
\shape default
.
 This state contains sub-FSM
\family roman
\shape italic
 crc_state
\family default
\shape default
, which is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:CRC_FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CRC_FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 During first clock cycle (
\family roman
\shape italic
FSM_preset = '1'
\family default
\shape default
) of 
\family roman
\shape italic
crc
\family default
\shape default
, 
\family roman
\shape italic
crc_state
\family default
\shape default
 is preset to either 
\family roman
\shape italic
stuff_count
\family default
\shape default
 or 
\family roman
\shape italic
real_crc
\family default
\shape default
 depending on ISO / NON-ISO configuration of CTU CAN FD Core (
\family roman
\shape italic
drv_fd_type
\family default
\shape default
).
 During 
\family roman
\shape italic
stuff_count
\family default
\shape default
 state 
\shape smallcaps
Transmitter
\shape default
 transmits number of stuffed bits (
\family roman
\shape italic
stuff_count_grey
\family default
\shape default
) which is calculated by Bit Stuffing circuit (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-CRC"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Additionally stuff parity is transmitted (
\family roman
\shape italic
stuff_parity
\family default
\shape default
).
 Complementary, both fields are received in 
\family roman
\shape italic
rx_count_grey
\family default
\shape default
 and 
\family roman
\shape italic
rx_parity
\family default
\shape default
.
 Note the difference in disabling CRC calculation (
\family roman
\shape italic
crc_enable_r <= '0'
\family default
\shape default
) between ISO and NON-ISO CAN FD Frames.
 In NON-ISO CAN FD Frames, 
\shape smallcaps
CRC
\shape default
 calculation is disabled in first clock cycle of 
\family roman
\shape italic
crc
\family default
\shape default
.
 In ISO CAN FD Frames, CRC calculation is disabled upon transition to 
\family roman
\shape italic
real_crc
\family default
\shape default
 on 
\family roman
\shape italic
crc_state
\family default
\shape default
.
 During 
\family roman
\shape italic
real_crc
\family default
\shape default
 
\shape smallcaps
Transmitter
\shape default
 sends calculated CRC (
\family roman
\shape italic
crc15
\family default
\shape default
, 
\family roman
\shape italic
crc17
\family default
\shape default
, 
\family roman
\shape italic
crc21
\family default
\shape default
) and both nodes receive 
\shape smallcaps
CRC Sequence
\shape default
 to shift register (
\family roman
\shape italic
rec_crc_r
\family default
\shape default
).
 Upon the expiration of 
\family roman
\shape italic
data_pointer
\family default
\shape default
, Protocol Control is updated to 
\family roman
\shape italic
delim_ack
\family default
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_CRC.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CRC State Machine
\begin_inset CommandInset label
LatexCommand label
name "fig:CRC_FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
delim_ack
\end_layout

\begin_layout Standard
In 
\family roman
\shape italic
delim_ack
\family default
\shape default
 state 
\shape smallcaps
CRC Delimiter
\shape default
, 
\shape smallcaps
ACK Field
\shape default
 and 
\shape smallcaps
ACK Delimiter
\shape default
 bits are handled.
 Length of this field is controlled by 
\family roman
\shape italic
control_pointer
\family default
\shape default
 counter.
 In 
\shape smallcaps
CRC Delimiter
\shape default
 of CAN FD Frame, bit rate is switched back to 
\shape smallcaps
Nominal Bit Rate
\shape default
 (
\family roman
\shape italic
sp_control_r <= NOMINAL_SAMPLE
\family default
\shape default
).
 
\shape smallcaps
Bit Stuffing
\shape default
 and 
\shape smallcaps
Bit De-stuffing
\shape default
 is disabled (
\family roman
\shape italic
stuff_enable
\family default
\shape default
, 
\family roman
\shape italic
destuff_enable
\family default
\shape default
) in 
\shape smallcaps
CRC Delimiter
\shape default
 to allow insertion of 
\shape smallcaps
Stuff Bit
\shape default
 in last bit of 
\shape smallcaps
CRC
\shape default
 field.
 
\shape smallcaps
Receiver
\shape default
 will transmit 
\shape smallcaps
Dominant
\shape default
 bit in 
\shape smallcaps
ACK
\shape default
 field (
\family roman
\shape italic
control_pointer = 1
\family default
\shape default
), if received 
\shape smallcaps
CRC
\shape default
 is matching calculated 
\shape smallcaps
CRC
\shape default
 (
\family roman
\shape italic
crc_check
\family default
\shape default
).
 Note that 
\shape smallcaps
Transmitter
\shape default
 allows reception of up to two bits in position of 
\shape smallcaps
CRC Delimiter
\shape default
 (
\family roman
\shape italic
sec_ack
\family default
\shape default
) to compensate for possible 
\shape smallcaps
Bit Timing
\shape default
 mismatch due to Bit Rate Shift.
 Reception of 
\shape smallcaps
Dominant
\shape default
 Bit in 
\shape smallcaps
ACK
\shape default
 field is marked in 
\family roman
\shape italic
ack_recieved
\family default
\shape default
 register.
 Upon the end of 
\family roman
\shape italic
delim_ack
\family default
\shape default
, Protocol Control is updated to 
\family roman
\shape italic
eof
\family default
\shape default
 or 
\family roman
\shape italic
error
\family default
\shape default
 based on value in 
\family roman
\shape italic
ack_received
\family default
\shape default
.
\end_layout

\begin_layout Paragraph
eof
\end_layout

\begin_layout Standard

\shape smallcaps
End of Frame
\shape default
 field is transmitted in 
\family roman
\shape italic
eof 
\family default
\shape default
field.
 Length of state is controlled by 
\family roman
\shape italic
control_pointer
\family default
\shape default
.
 When 
\shape smallcaps
Dominant
\shape default
 bit is received in last bit of eof, Protocol Control is updated to 
\family roman
\shape italic
overload
\family default
\shape default
.
 Reception of other 
\shape smallcaps
Dominant
\shape default
 bit signals 
\shape smallcaps
Error Flag
\shape default
 and Protocol Control is updated to 
\family roman
\shape italic
error
\family default
\shape default
.
 One bit before the end of 
\family roman
\shape italic
eof
\family default
\shape default
 (
\family roman
\shape italic
control_pointer = 1
\family default
\shape default
), frame reception is considered as valid and 
\family roman
\shape italic
rec_valid_r
\family default
\shape default
 is set.
 In the last bit of 
\family roman
\shape italic
eof
\family default
\shape default
 (
\family roman
\shape italic
control_pointer = 0
\family default
\shape default
) frame transmission is considered as valid and 
\family roman
\shape italic
tran_valid_r 
\family default
\shape default
is set.
 TXT Buffer is unlocked and frame transmission is signaled to TXT Buffer
 (
\family roman
\shape italic
txt_hw_cmd.unlock, txt_hw_cmd.valid
\family default
\shape default
).
 If 
\family roman
\shape italic
control_pointer
\family default
\shape default
 elapses with only 
\shape smallcaps
Recessive
\shape default
 bits detected, Protocol Control is updated to 
\family roman
\shape italic
interframe
\family default
\shape default
.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_Interframe.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Interframe State Machine
\begin_inset CommandInset label
LatexCommand label
name "fig:Interframe-FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
interframe
\end_layout

\begin_layout Standard
In 
\family roman
\shape italic
interframe
\family default
\shape default
 state of Protocol Control Interframe Space of CAN Frame is transmitted.
 This state contains sub-FSM 
\family roman
\shape italic
interm_state
\family default
\shape default
 which is started in 
\family roman
\shape italic
intermission
\family default
\shape default
 and it is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Interframe-FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interframe-FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Reception of 
\shape smallcaps
Dominant
\shape default
 bit during first two bits of 
\family roman
\shape italic
intermission 
\family default
\shape default
(
\family roman
\shape italic
control_pointer_non_zero
\family default
\shape default
) is interpreted as 
\shape smallcaps
Overload Condition
\shape default
 and Protocol Control is updated to 
\family roman
\shape italic
overload
\family default
\shape default
.
 Reception of 
\shape smallcaps
Dominant
\shape default
 bit in last bit is interpreted as next 
\shape smallcaps
Start of Frame
\shape default
 and Protocol Control is updated to 
\family roman
\shape italic
sof
\family default
\shape default
.
 If node is 
\shape smallcaps
Error Passive
\shape default
 (
\family roman
\shape italic
error_state = error_passive
\family default
\shape default
) and Transmitter of previous frame (
\family roman
\shape italic
OP_State = transciever
\family default
\shape default
), 
\family roman
\shape italic
interframe
\family default
\shape default
 is moved to 
\family roman
\shape italic
suspend
\family default
\shape default
 state.
 In 
\family roman
\shape italic
suspend
\family default
\shape default
 state only 
\shape smallcaps
Recessive
\shape default
 bits are sent on the bus, and sampling 
\shape smallcaps
Dominant
\shape default
 bit moves Protocol Control to 
\family roman
\shape italic
sof
\family default
\shape default
, but unit immediately starts new frame as a receiver.
 Last state of 
\family roman
\shape italic
interm_state
\family default
\shape default
 is 
\family roman
\shape italic
interm_idle
\family default
\shape default
.
 which can be ended either by presence of 
\shape smallcaps
Recessive
\shape default
 to 
\shape smallcaps
Dominant
\shape default
 edge (
\family roman
\shape italic
hard_sync_edge
\family default
\shape default
) or presence of new frame for transmission (
\family roman
\shape italic
tran_frame_valid_in
\family default
\shape default
).
 Upon both of these conditions Protocol Control is updated to 
\family roman
\shape italic
sof
\family default
\shape default
.
\end_layout

\begin_layout Paragraph
error
\end_layout

\begin_layout Standard
Transmission of 
\shape smallcaps
Error Frame
\shape default
 is handled via state 
\family roman
\shape italic
error
\family default
\shape default
 of Protocol Control.
 Conditions which can lead to transition to 
\family roman
\shape italic
error
\family default
\shape default
 state are further explained in 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec-Error-detection"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 This state contains sub-FSM 
\family roman
\shape italic
err_frame_state
\family default
\shape default
 which is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Error-Frame-FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Error-Frame-FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 This FSM is started from 
\family roman
\shape italic
err_flg_sup
\family default
\shape default
 state.
 During 
\family roman
\shape italic
err_flg_sup
\family default
\shape default
, 6 
\shape smallcaps
Dominant
\shape default
 (
\shape smallcaps
Active Error Flag
\shape default
) or 
\shape smallcaps
Recessive
\shape default
 (
\shape smallcaps
Passive Error Flag
\shape default
) bits are sent and state is exited upon reception of 
\shape smallcaps
Recessive
\shape default
 bit to 
\family roman
\shape italic
err_delim
\family default
\shape default
.
 If there are 14 consecutive 
\shape smallcaps
Dominant
\shape default
 bits received (
\family roman
\shape italic
tran_pointer = 0
\family default
\shape default
), 
\family roman
\shape italic
error
\family default
\shape default
 state is restarted and error counters incremented by 8 (
\family roman
\shape italic
inc_eight = '1'
\family default
\shape default
).
 In 
\family roman
\shape italic
err_delim
\family default
\shape default
 6 
\shape smallcaps
Recessive
\shape default
 bits are counted, and Protocol Control State is moved to 
\family roman
\shape italic
interframe
\family default
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_Error.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Error Frame State Machine
\begin_inset CommandInset label
LatexCommand label
name "fig:Error-Frame-FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_Overload.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Overload Frame State Machine
\begin_inset CommandInset label
LatexCommand label
name "fig:Overload-Frame-FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
overload
\end_layout

\begin_layout Standard
Upon detection of 
\shape smallcaps
Overload Condition
\shape default
, Protocol Control state is updated to 
\family roman
\shape italic
overload
\family default
\shape default
.
 Logic of this state is formally very similar to state 
\family roman
\shape italic
error
\family default
\shape default
.
 This state consists of sub-FSM 
\family roman
\shape italic
ovr_frame_state
\family default
\shape default
 which is displayed in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Overload-Frame-FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Overload-Frame-FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 FSM is started from 
\family roman
\shape italic
ovr_flg_sup
\family default
\shape default
, which represent 
\shape smallcaps
Overload Flag Superposition
\shape default
.
 Duration of state is controlled by 
\family roman
\shape italic
control_pointer
\family default
\shape default
.
 Upon detection of 14 consecutive 
\shape smallcaps
Dominant
\shape default
 bits, Protocol Control is updated to 
\family roman
\shape italic
error
\family default
\shape default
.
 Upon reception of 
\shape smallcaps
Recessive
\shape default
 bit, 
\family roman
\shape italic
ovr_frame_state 
\family default
\shape default
is updated to 
\family roman
\shape italic
ovr_delim
\family default
\shape default
.
 
\shape smallcaps
Overload Delimiter
\shape default
 consists of 8 
\shape smallcaps
Recessive
\shape default
 bits.
 Upon expiration of 
\family roman
\shape italic
control_pointer
\family default
\shape default
, Protocol Control is moved to 
\family roman
\shape italic
interframe.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.2 Operation Control
\begin_inset CommandInset label
LatexCommand label
name "subsec-Operation-control"

\end_inset


\end_layout

\begin_layout Description
File operationControl.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in core_top.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
operationControl
\end_layout

\begin_layout Standard
Operation Control is module handling 
\shape smallcaps
Operation Mode
\shape default
 as defined in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "true"

\end_inset

.
 It means unit integration after start, transmission mode (
\shape smallcaps
Transmitter
\shape default
), reception mode (
\shape smallcaps
Receiver
\shape default
) and 
\shape smallcaps
Bus Idle
\shape default
.
 Other modes defined in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "true"

\end_inset

 (
\shape smallcaps
Bus Monitoring Mode
\shape default
, 
\shape smallcaps
Self - Test Mode
\shape default
) are implemented via dedicated signals of Driving Bus (
\family roman
\shape italic
drv_bus_mon_ena
\family default
\shape default
, 
\family roman
\shape italic
drv_self_test_ena
\family default
\shape default
 signals).
 State machine of 
\shape smallcaps
Operation Control
\shape default
 (
\family roman
\shape italic
OP_State
\family default
\shape default
) is described in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:OP_control]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:OP_control"

\end_inset

.
 This FSM can be forced to 
\family roman
\shape italic
transceiver
\family default
\shape default
 or 
\family roman
\shape italic
receiver
\family default
\shape default
 state by signals 
\family roman
\shape italic
set_transceiver
\family default
\shape default
, 
\family roman
\shape italic
set_receiver
\family default
\shape default
.
 State machine is started in 
\family roman
\shape italic
integrating
\family default
\shape default
 state.
 If CTU CAN FD is enabled (
\family roman
\shape italic
drv_ena
\family default
\shape default
), number of consecutive 
\shape smallcaps
Recessive
\shape default
 bits is counted in 
\family roman
\shape italic
integ_counter
\family default
\shape default
.
 If 11 consecutive 
\shape smallcaps
Recessive
\shape default
 bits are reached, Operation Control moves to 
\family roman
\shape italic
idle
\family default
\shape default
.
 Upon detection of valid data for transmission (
\family roman
\shape italic
tran_frame_valid_in
\family default
\shape default
), Operation State is changed to 
\family roman
\shape italic
transceiver
\family default
\shape default
.
 Loss off arbitration is signaled from Protocol Control FSM via 
\family roman
\shape italic
arbitration_lost 
\family default
\shape default
signal.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_operation_control.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Operation Control state machine
\begin_inset CommandInset label
LatexCommand label
name "fig:OP_control"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.3 Fault Confinement
\end_layout

\begin_layout Description
File faultConf.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in core_top.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
faultConf
\end_layout

\begin_layout Standard
Fault Confinement module implements 
\shape smallcaps
Fault Confinement
\shape default
 state (
\family roman
\shape italic
error_state
\family default
\shape default
), 
\shape smallcaps
TX / RX Error Counters
\shape default
 (
\family roman
\shape italic
tx_counter
\family default
\shape default
, 
\family roman
\shape italic
rx_counter
\family default
\shape default
), 
\shape smallcaps
Bit Error
\shape default
 and 
\shape smallcaps
Stuff Error
\shape default
 validation.
 Block diagram of this module is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Fault-block-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fault-block-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Error counters for 
\shape smallcaps
Fault Confinement
\shape default
 (
\family roman
\shape italic
rx_counter
\family default
\shape default
, 
\family roman
\shape italic
tx_counter
\family default
\shape default
) are manipulated via 
\family roman
\shape italic
inc_one
\family default
\shape default
, 
\family roman
\shape italic
inc_eight
\family default
\shape default
, 
\family roman
\shape italic
dec_one
\family default
\shape default
 signals from Protocol Control FSM, therefore all exceptions in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "true"

\end_inset

 (Fault Confinement Chapter) are managed by Protocol Control FSM.
 These error counters are implemented to be read / write via Driving Bus,
 signals 
\family roman
\shape italic
drv_ctr_sel
\family default
\shape default
, 
\family roman
\shape italic
drv_ctr_val
\family default
\shape default
 from Memory Registers.
 With this architecture 
\shape smallcaps
Fault Confinement
\shape default
 state can be manipulated from SW.
 This provides an extended testing functionality of CTU CAN FD controller.
 Furthermore, two additional counters (
\family roman
\shape italic
err_counter_norm
\family default
\shape default
, 
\family roman
\shape italic
err_counter_fd
\family default
\shape default
), are implemented to distinguish between errors which appeared in 
\shape smallcaps
Nominal Bit Rate
\shape default
 and 
\shape smallcaps
Data Bit Rate
\shape default
.
 These additional counters are incremented by 1 for each transmitted 
\shape smallcaps
Error Frame
\shape default
.
 
\end_layout

\begin_layout Standard
To remain compliant with CAN FD standard, counters for 128 occurrences of
 11 consecutive 
\shape smallcaps
Recessive
\shape default
 bits is implemented in this module (
\family roman
\shape italic
cons_rec_ctr, cons_128_11_rec_ctr
\family default
\shape default
).
 When command to reset error counters is given by write to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[MODE]{MODE}
\end_layout

\end_inset

, 
\family roman
\shape italic
drv_clr_err_ctrs
\family default
\shape default
 signal is activated and both counters are set to 0.
 When 
\family roman
\shape italic
cons_rec_ctr
\family default
\shape default
 reaches 10 (counting from 0), it is restarted and 
\family roman
\shape italic
cons_128_11_rec_ctr 
\family default
\shape default
counter is incremented.
 When 
\family roman
\shape italic
cons_128_11_rec_ctr
\family default
\shape default
 reaches 127, 
\family roman
\shape italic
reset_err_counters
\family default
\shape default
 is set, both Error counters are set to 0 and 
\shape smallcaps
Fault Confinement
\shape default
 state is set to 
\family roman
\shape italic
error_active
\family default
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Fault_State_Block_diagram.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fault Confinement block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Fault-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.4 Bit Stuffing
\end_layout

\begin_layout Description
File bitStuffing_v2.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in core_top.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
bitStuffing
\end_layout

\begin_layout Standard
Bit Stuffing module implements functionality 
\shape smallcaps
Stuff Bit
\shape default
 insertion into serial data stream.
 Number of equal consecutive bits is configurable via 
\family roman
\shape italic
length
\family default
\shape default
 input.
 
\shape smallcaps
Fixed Bit Stuffing
\shape default
 method for CRC field of CAN FD frames can be set by 
\family roman
\shape italic
fixed_stuff
\family default
\shape default
 input.
 Since CAN FD Protocol requires 
\shape smallcaps
Fixed Stuff Bit
\shape default
 to be inserted in the first bit of 
\shape smallcaps
CRC
\shape default
 field, Bit Stuffing circuit automatically inserts 
\shape smallcaps
Stuff Bit
\shape default
 after change on 
\family roman
\shape italic
fixed_stuff
\family default
\shape default
 input (0->1 transition).
 Circuit operates with Bit Stuffing Trigger (see 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Pipeline-Architecture]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Pipeline-Architecture"
plural "false"
caps "false"
noprefix "false"

\end_inset

), which is one clock cycle delayed from Transmit Trigger.
 Insertion of 
\shape smallcaps
Stuff Bit
\shape default
 is signaled via 
\family roman
\shape italic
data_halt
\family default
\shape default
 signal which is used to suspend Protocol Control State machine for one
 Bit time.
 Number of equal consecutive bits is kept in 
\family roman
\shape italic
same_bits 
\family default
\shape default
counter.
 Circuit also counts number of stuffed bits modulo 8 in 
\family roman
\shape italic
stuff_ctr 
\family default
\shape default
signal.
 Module is implemented as single process.
 Decision diagram is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Bit-stuffing-logic]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Bit-stuffing-logic"
plural "false"
caps "false"
noprefix "false"

\end_inset

, note that this Figure is not FSM, but rather decision tree which is evaluated
 upon clock rising edge.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Bit_Stuffing_Logic.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit Stuffing Logic
\begin_inset CommandInset label
LatexCommand label
name "fig:Bit-stuffing-logic"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.5 Bit De-stuffing
\end_layout

\begin_layout Description
File bitDestuffing.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in core_top.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
bitDestuffing
\end_layout

\begin_layout Standard
Bit Destuffing module implements the functionality of 
\shape smallcaps
Bit Destuffing
\shape default
 from serial data stream.
 The number of equal consecutive bits is configurable via 
\family roman
\shape italic
length
\family default
\shape default
 input.
 Fixed 
\shape smallcaps
Bit Destuffing
\shape default
 method for 
\shape smallcaps
CRC
\shape default
 field of CAN FD frames is configurable via 
\family roman
\shape italic
fixed_stuff
\family default
\shape default
 input.
 Since CAN FD Protocol requires 
\shape smallcaps
Fixed
\shape default
 
\shape smallcaps
Stuff Bit
\shape default
 to be discarded in the first bit of CRC field, Bit Destuffing circuit automatic
ally discards first bit after the change on 
\family roman
\shape italic
fixed_stuff
\family default
\shape default
 input (0->1).
 Circuit processes input data with Bit Stuffing Trigger (see 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Pipeline-Architecture]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Pipeline-Architecture"
plural "false"
caps "false"
noprefix "false"

\end_inset

), which is one clock cycle delayed from Sample Trigger.
 
\shape smallcaps
Stuff Bit
\shape default
 discarded is signaled to Protocol Control to stop the data reception via
 
\family roman
\shape italic
destuffed
\family default
\shape default
 signal.
 Circuit also provides number of 
\shape smallcaps
Destuffed Bits
\shape default
 modulo 8 to to Implement ISO FD functionality (
\family roman
\shape italic
dst_bit_ctr
\family default
\shape default
).
 
\shape smallcaps
Stuff Error
\shape default
 is detected when N-th bit is not inverse preceding bit where N value of
 
\family roman
\shape italic
length
\family default
\shape default
 input.
 When circuit is disabled, it by-passes data from input to output without
 
\shape smallcaps
Bit Destuffing
\shape default
.
 Decision diagram is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Bit-Destuffing-logic]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Bit-Destuffing-logic"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Bit_Destuffing_Logic.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit Destuffing Logic
\begin_inset CommandInset label
LatexCommand label
name "fig:Bit-Destuffing-logic"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
2.7.1.6 CRC
\begin_inset CommandInset label
LatexCommand label
name "subsec-CRC"

\end_inset


\end_layout

\begin_layout Description
File CRC.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in core_top.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
canCRC
\end_layout

\begin_layout Standard
CRC module implements cyclic redundancy check calculation according to 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "true"

\end_inset

.
 Circuit operation is started upon detection of 0 to 1 transition on 
\family roman
\shape italic
enable
\family default
\shape default
 input.
 Input data are processed with 
\family roman
\shape italic
trig
\family default
\shape default
 input signal.
 After finishing the calculation, CRC value remains valid until next 0 to
 1 transition on 
\family roman
\shape italic
enable
\family default
\shape default
 input.
 CRC value is calculated in shift registers 
\family roman
\shape italic
crc15_reg
\family default
\shape default
, 
\family roman
\shape italic
crc17_reg
\family default
\shape default
, 
\family roman
\shape italic
crc21_reg
\family default
\shape default
.
 Shift register is shifted every step.
 Furthermore XOR operation is executed if next input bit (
\family roman
\shape italic
data_in
\family default
\shape default
) is different than highest bit of CRC polynomial.
 Note that shift register implementation is chosen over combinational implementa
tion to avoid long combinational paths.
\end_layout

\begin_layout Standard
Result CRC values are propagated to outputs 
\family roman
\shape italic
crc15
\family default
\shape default
, 
\family roman
\shape italic
crc17
\family default
\shape default
, 
\family roman
\shape italic
crc21
\family default
\shape default
 of the circuit.
 All three CRC values are calculated at the same time.
 Since CRC calculation in ISO FD and Non-ISO are different, highest bit
 of 
\family roman
\shape italic
crc17_reg
\family default
\shape default
 and 
\family roman
\shape italic
crc21_reg
\family default
\shape default
 shift registers are different upon restart of calculation.
 Contents of these registers is determined by 
\family roman
\shape italic
drv_fd_type
\family default
\shape default
 signal which is derived from Driving Bus.
\end_layout

\begin_layout Subsection
2.7.2 Bus Sampling
\begin_inset CommandInset label
LatexCommand label
name "subsec-Bus-Sampling"

\end_inset


\end_layout

\begin_layout Description
File busSync.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
busSync
\end_layout

\begin_layout Standard
Bus Sampling module samples value of CAN Bus (
\family roman
\shape italic
CAN_RX
\family default
\shape default
) in 
\shape smallcaps
Sample Point
\shape default
 of 
\shape smallcaps
Bit Time
\shape default
.
 RX signal from CAN Bus (
\family roman
\shape italic
CAN_RX
\family default
\shape default
) is optionally synchronized via two flip-flop Synchronization chain.
 Usage of this synchronization chain is configurable via 
\family roman
\shape italic
use_sync
\family default
\shape default
 generic.
 It is recommended to use this synchronization chain, unless synthesizer
 inserts synchronization chain automatically! Synchronized data (
\family roman
\shape italic
sync_data
\family default
\shape default
) can be optionally evaluated via Triple Sampling circuit.
 
\shape smallcaps
Triple Sampling
\shape default
 contains 3 bits long shift register (
\family roman
\shape italic
trs_reg
\family default
\shape default
).
 Majority of 3 decoder (
\family roman
\shape italic
trs_majority
\family default
\shape default
) is used to pick final sampled value.
 Usage of Triple Sampling is configurable from User Registers by 
\family roman
\shape italic
drv_sam
\family default
\shape default
 signal.
 Data are sampled in Sample Point via Sample Trigger (RX) (refer to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Pipeline-Architecture]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Pipeline-Architecture"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Sample Trigger is multiplexed between Nominal (
\family roman
\shape italic
sample_nbt
\family default
\shape default
), Data (
\family roman
\shape italic
sample_dbt
\family default
\shape default
) and Secondary (
\family roman
\shape italic
sample_sec
\family default
\shape default
) Triggers by Sample Control (
\family roman
\shape italic
sp_control
\family default
\shape default
).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Bus_sampling_block_diagram.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Bus sampling block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:bus-sampling-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To signal presence of valid 
\shape smallcaps
Synchronization Edge
\shape default
, Edge Detection Process (
\family roman
\shape italic
edge_proc
\family default
\shape default
) is used.
 Edge Detection Process is comparing bus value sampled in previous Sample
 Point (
\family roman
\shape italic
prev_sample
\family default
\shape default
) with actual sampled value on CAN Bus (
\family roman
\shape italic
sync_Data
\family default
\shape default
).
 Upon detection of 
\shape smallcaps
Recessive
\shape default
 to 
\shape smallcaps
Dominant
\shape default
 transition 
\shape smallcaps
Synchronization Edge
\shape default
 is detected (
\family roman
\shape italic
edge_rx_valid
\family default
\shape default
).
 Transceiver Delay Measurement is started upon command from Protocol Control
 (
\family roman
\shape italic
trv_delay_calib
\family default
\shape default
) and 
\family roman
\shape italic
trv_running
\family default
\shape default
 is set.
 When nearest edge on TX Data occurs (
\family roman
\shape italic
edge_tx_valid
\family default
\shape default
), Transceiver Delay Counter (
\family roman
\shape italic
trv_delay
\family default
\shape default
) is erased.
 Each clock cycle Transceiver Delay Counter is incremented by 1.
 Measurement is stopped when an edge (the edge of the same bit that erased
 Transceiver Delay Counter on TX Data) occurs on RX Data (
\family roman
\shape italic
edge_rx_valid
\family default
\shape default
).
 After such a measurement, 
\family roman
\shape italic
trv_delay
\family default
\shape default
 contains number of clock cycles it took to propagate 
\shape smallcaps
Recessive
\shape default
 to 
\shape smallcaps
Dominant
\shape default
 Edge from TX pin to RX pin.
 This measurement is started in 
\shape smallcaps
Sample Point
\shape default
 of 
\shape smallcaps
Extended Data Length
\shape default
 bit of CAN FD Frame, thus correct edge type (
\shape smallcaps
Recessive
\shape default
 to 
\shape smallcaps
Dominant
\shape default
) is guaranteed.
\end_layout

\begin_layout Standard
CAN FD transceiver needs to detect 
\shape smallcaps
Bit Errors
\shape default
 when RX Data are not matching TX Data.
 In 
\shape smallcaps
Nominal Bit Time
\shape default
, this does not cause any problems.
 Simply sampled RX pin (
\family roman
\shape italic
CAN_rx
\family default
\shape default
) is compared with value of TX Data (
\family roman
\shape italic
data_tx
\family default
\shape default
).
 In 
\shape smallcaps
Data Bit-Rate
\shape default
 this is not possible, since value of RX pin in 
\shape smallcaps
Sample Point
\shape default
 might not yet be the same due to 
\shape smallcaps
Transceiver Delay
\shape default
 from TX to RX pin! To implement 
\shape smallcaps
Bit Error
\shape default
 detection in 
\shape smallcaps
Data Bit-Rate
\shape default
, TX Data are delayed via shift register (
\family roman
\shape italic
ssp_shift
\family default
\shape default
) and delayed version of TX Data is compared with RX Data.
 Note that after time corresponding to 
\shape smallcaps
Transceiver Delay 
\shape default
(during 
\shape smallcaps
Data Bit-Rate
\shape default
 measured in 
\family roman
\shape italic
trv_delay
\family default
\shape default
), TX Data value will propagate to RX Data and thus it is possible to address
 data in Delayed TX Data Shift Register via 
\family roman
\shape italic
trv_delay
\family default
\shape default
 signal.
 To sample the delayed version of TX Data properly, another shift register
 (
\family roman
\shape italic
sample_sec
\family default
\shape default
) for 
\shape smallcaps
Data Bit-Rate
\shape default
 Sample Triggers is used.
 Sample Triggers are fed to this shift register and delayed version creates
 Secondary Sample Trigger (
\family roman
\shape italic
sample_sec
\family default
\shape default
) upon which 
\shape smallcaps
Bit Error
\shape default
 (
\family roman
\shape italic
bit_Error_reg
\family default
\shape default
) is evaluated.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
2.7.3 Interrupt Manager
\end_layout

\begin_layout Description
File intManager.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
intManager
\end_layout

\begin_layout Standard
Interrupt Manager provides interrupt via 
\family roman
\shape italic
int
\family default
\shape default
 / 
\family roman
\shape italic
irq
\family default
\shape default
 output of CTU CAN FD IP Core.
 Interrupts are configurable from memory registers via Driving Bus.
 Interrupts manager captures interrupt on events (
\family roman
\shape italic
int_input_active
\family default
\shape default
) in CAN Core into DQ Flip-Flop 
\family roman
\shape italic
int_vect_reg
\family default
\shape default
.
 Events are captured only if particular interrupt is un-masked (
\family roman
\shape italic
int_mask_reg(i) = '0'
\family default
\shape default
).
 Interrupt manager generates 
\family roman
\shape italic
int
\family default
\shape default
 / 
\family roman
\shape italic
irq
\family default
\shape default
 output by logic OR function between all elements of interrupt vector.
 To allow generation of interrupt by active bit in 
\family roman
\shape italic
int_vect_reg
\family default
\shape default
, interrupt must be enabled (
\family roman
\shape italic
int_ena_reg
\family default
\shape default
).
 Interrupt output is deactivated (logic 0) as soon as the Interrupt Status
 is cleared.
 Structure of Interrupt registers is selected to achieve accessibility from
 multiple threads / processes under OS, without necessity of using locking
 mechanisms such as mutexes or semaphores.
 Interrupt structure is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:INT-manager-block]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:INT-manager-block"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Interrupt_Block_diagram.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Interrupt Manager block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:INT-manager-block"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
2.7.4 Prescaler
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec-Operation-control"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Description
File prescaler_v3.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
prescaler_v3
\end_layout

\begin_layout Standard
Prescaler implements functionality of CAN 
\shape smallcaps
Bus Timing
\shape default
 and its block diagram is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:prescaler-block-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:prescaler-block-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Elementary time interval on CAN Bus is 
\shape smallcaps
Time Quant
\shape default
um.
 Firstly, proper 
\shape smallcaps
Time Quantum
\shape default
 duration (
\family roman
\shape italic
tq_m
\family default
\shape default
) is multiplexed by Sample Control (
\family roman
\shape italic
sp_control
\family default
\shape default
) from 
\shape smallcaps
Nominal Bit-rate
\shape default
 
\shape smallcaps
Time Quantum
\shape default
 (
\family roman
\shape italic
tq_nbt
\family default
\shape default
) and 
\shape smallcaps
Data Bit-Rate Time Quantum
\shape default
 (
\family roman
\shape italic
tq_dbt
\family default
\shape default
).
 
\shape smallcaps
Time Quantum
\shape default
 is measured via Time Quantum Counter (
\family roman
\shape italic
tq_counter
\family default
\shape default
) and start of new 
\shape smallcaps
Time Quantum
\shape default
 is signaled via 
\family roman
\shape italic
tq_edge
\family default
\shape default
 signal.
 Additional clock signal outputs with frequency matching 
\shape smallcaps
Bit-Rate
\shape default
 are provided in 
\family roman
\shape italic
clk_tq_nbt
\family default
\shape default
, 
\family roman
\shape italic
clk_tq_dbt
\family default
\shape default
.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/CAN_FD_IP_Core/doc/pics/Visio_generated/Prescaler_Block_Diagram.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Prescaler block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:prescaler-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\shape smallcaps
Bit Time
\shape default
 behavior is controlled by Bit Time FSM whose state transition diagram is
 shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Bit-Time-FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Bit-Time-FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Each segment of 
\shape smallcaps
Bit Time
\shape default
 is handled by a separate state (
\family roman
\shape italic
sync
\family default
\shape default
, 
\family roman
\shape italic
prop
\family default
\shape default
, 
\family roman
\shape italic
ph1
\family default
\shape default
, 
\family roman
\shape italic
ph2
\family default
\shape default
).
 Additional state, which is a substitute for 
\family roman
\shape italic
sync
\family default
\shape default
, 
\family roman
\shape italic
ph1
\family default
\shape default
 and 
\family roman
\shape italic
ph2
\family default
\shape default
 in case of 
\shape smallcaps
Hard Synchronization
\shape default
 is 
\family roman
\shape italic
h_sync
\family default
\shape default
.
 Duration of each state is controlled by Bit Time Counter (
\family roman
\shape italic
bt_counter
\family default
\shape default
) which is directly set inside Bit Time FSM.
 Bit Time Counter is compared with real duration of 
\shape smallcaps
Phase 1
\shape default
 and 
\shape smallcaps
Phase 2
\shape default
 registers (
\family roman
\shape italic
ph1_real
\family default
\shape default
, 
\family roman
\shape italic
ph2_real
\family default
\shape default
).
 These registers are driven by resynchronization process.
 Upon start of Bit (in 
\family roman
\shape italic
sync
\family default
\shape default
), both registers are set to its nominal values as configured from SW.
 If 
\shape smallcaps
Synchronization Edge
\shape default
 is signaled (
\family roman
\shape italic
sync_edge
\family default
\shape default
) and Synchronization Type (
\family roman
\shape italic
sync_control
\family default
\shape default
) is set to 
\family roman
\shape italic
RESYNC
\family default
\shape default
, 
\family roman
\shape italic
ph1_real
\family default
\shape default
 / 
\family roman
\shape italic
ph2_real
\family default
\shape default
 are lengthened / shortened accordingly.
 If 
\shape smallcaps
Synchronization Edge
\shape default
 is active during 
\family roman
\shape italic
prop
\family default
\shape default
 or 
\family roman
\shape italic
ph1
\family default
\shape default
, 
\shape smallcaps
Positive Resynchronization
\shape default
 is signaled (
\family roman
\shape italic
pos_resync_cond
\family default
\shape default
).
 If 
\shape smallcaps
Synchronization Edge
\shape default
 arrives during 
\family roman
\shape italic
ph2
\family default
\shape default
, 
\shape smallcaps
Negative Resynchronization
\shape default
 is signaled (
\family roman
\shape italic
neg_resync_cond
\family default
\shape default
).
\end_layout

\begin_layout Standard
Special bits from 
\shape smallcaps
Bit Timing
\shape default
 point of view are 
\shape smallcaps
Bit Rate Shift
\shape default
 and 
\shape smallcaps
CRC Delimiter
\shape default
.
 During these bits, 
\shape smallcaps
Bit-Rate
\shape default
 is shifted in 
\shape smallcaps
Sample Point
\shape default
.
 As explained in 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec-Information-processing"
plural "false"
caps "false"
noprefix "false"

\end_inset

 
\shape smallcaps
Information Processing Time
\shape default
 is 4 clock cycles due to architecture of Triggering Signals, and it is
 not possible to determine if 
\shape smallcaps
Bit-Rate
\shape default
 was shifted sooner than 4 clock cycles after sampling the actual bus value!
 If 
\shape smallcaps
Nominal Bit-Rate
\shape default
 was used during these 4 clock cycles, overall length of 
\shape smallcaps
Phase 2
\shape default
 segment would not be correct.
 To avoid this problem, 
\family roman
\shape italic
ph2
\family default
\shape default
 is always measured with two counters.
 Bit Time Counter (
\family roman
\shape italic
bt_counter
\family default
\shape default
) is used for bits where 
\shape smallcaps
Bit-Rate
\shape default
 shift did not occur, and its validity in 
\family roman
\shape italic
ph2
\family default
\shape default
 -> 
\family roman
\shape italic
sync
\family default
\shape default
 transition is selected by 
\family roman
\shape italic
use_default_ctr
\family default
\shape default
 signal.
 If 
\shape smallcaps
Bit-Rate
\shape default
 shift occurred, Special Bit Counter (
\family roman
\shape italic
bt_counter_sw
\family default
\shape default
) is used.
 This counter is preset to value of 
\shape smallcaps
Phase 2
\shape default
 * 
\shape smallcaps
Baud Rate Prescaler
\shape default
 (
\family roman
\shape italic
ph2_extra
\family default
\shape default
), thus counting in clock cycles instead of 
\shape smallcaps
Time Quant
\shape default
um.
 To detect change of 
\shape smallcaps
Bit-Rate
\shape default
, Sample Control signal is stored upon transition to 
\family roman
\shape italic
ph2
\family default
\shape default
 in 
\family roman
\shape italic
sp_control_stored
\family default
\shape default
.
 Upon mismatch between actual 
\shape smallcaps
Bit-Rate
\shape default
 type (
\family roman
\shape italic
sp_control
\family default
\shape default
) and stored 
\shape smallcaps
Bit-Rate
\shape default
 (
\family roman
\shape italic
sp_control_stored
\family default
\shape default
), usage of extra counter is selected (
\family roman
\shape italic
use_spec_counter
\family default
\shape default
).
 During 
\shape smallcaps
Bit-Rate
\shape default
 shift 
\shape smallcaps
Resynchronization
\shape default
 also needs to be performed (extra counter is used, 
\family roman
\shape italic
ph2_real
\family default
\shape default
 is not used and extra counter is counting till 0), 
\family roman
\shape italic
brs_resync
\family default
\shape default
 signal is used.
 If 
\shape smallcaps
Resynchronization
\shape default
 edge occurs during 
\shape smallcaps
Phase 2
\shape default
, 
\family roman
\shape italic
brs_resync
\family default
\shape default
 is set.
 Upon nearest 
\shape smallcaps
Time Quantum
\shape default
 actual bit is terminated as if 
\shape smallcaps
Phase 2
\shape default
 was shortened.
\end_layout

\begin_layout Standard
As explained in 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec-Information-processing"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\shape smallcaps
Information Processing Time
\shape default
 of CTU CAN FD is 4 clock cycles.
 It is not possible to decrease duration of 
\shape smallcaps
Phase 2
\shape default
 to less than 4 clock cycles.
 There is no guarantee that 
\shape smallcaps
Resynchronization
\shape default
 edge (
\family roman
\shape italic
sync_edge
\family default
\shape default
), will not occur in less than 4 clock cycles after 
\shape smallcaps
Sample Point
\shape default
.
 To make sure that 
\shape smallcaps
Phase 2
\shape default
 will not be shortened to less than 4 clock cycles, additional counter is
 used (
\family roman
\shape italic
ipt_counter
\family default
\shape default
).
 This counter is set to 3 upon each transition to 
\shape smallcaps
Phase 2
\shape default
.
 Counter is decremented each clock cycle, and 
\shape smallcaps
Phase 2
\shape default
 is not allowed to exit until zero is reached.
 This fact is signaled by 
\family roman
\shape italic
ipt_ok
\family default
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_Bit_time.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit Time FSM
\begin_inset CommandInset label
LatexCommand label
name "fig:Bit-Time-FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
2.7.5 Message Filter
\end_layout

\begin_layout Description
File messageFilter.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
messageFilter
\end_layout

\begin_layout Standard
Message Filter validates received frame on output of CAN Core.
 Block diagram of Message Filter circuit is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Message-filter-block]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Message-filter-block"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 If frame identifier matches one of three (A, B, C) Mask Filters or one
 Range Filter, and it has valid Frame Type and Identifier Type (CAN 2.0 /
 CAN FD, BASE / EXTENDED), then 
\family roman
\shape italic
out_ident_valid
\family default
\shape default
 is set with one clock cycle delay.
 Message Filter is configured via Driving Bus from User Registers.
 In case of Mask Filter, active bits (logic 1) in configured mask (
\family roman
\shape italic
drv_filter_A_mask
\family default
\shape default
, 
\family roman
\shape italic
drv_filter_B_mask
\family default
\shape default
, 
\family roman
\shape italic
drv_filter_C_mask
\family default
\shape default
) are compared between RX Identifier (
\family roman
\shape italic
rec_ident_in
\family default
\shape default
) and filter settings (
\family roman
\shape italic
drv_filter_A_bits
\family default
\shape default
, 
\family roman
\shape italic
drv_filter_B_bits
\family default
\shape default
, 
\family roman
\shape italic
drv_filter_C_bits
\family default
\shape default
).
 Received Frame Type (
\family roman
\shape italic
frame_type
\family default
\shape default
) and Identifier Type (
\family roman
\shape italic
ident_type
\family default
\shape default
) are compared with accepted Frame and Identifier types (
\family roman
\shape italic
drv_filter_A_ctrl
\family default
\shape default
, 
\family roman
\shape italic
drv_filter_B_ctrl
\family default
\shape default
, 
\family roman
\shape italic
drv_filter_C_ctrl
\family default
\shape default
).
 Range Filter converts received Identifier to decimal value (
\family roman
\shape italic
rec_ident_dec
\family default
\shape default
) and compares whether it is between Lower Range Threshold (
\family roman
\shape italic
drv_filter_ran_lo_th
\family default
\shape default
) and Upper Range Threshold (
\family roman
\shape italic
drv_filter_ran_hi_th
\family default
\shape default
).
 The output is valid if identifier matches at least one filter (logic OR).
 Message Filters are configurable before synthesis via 
\family roman
\shape italic
sup_filtA
\family default
\shape default
, 
\family roman
\shape italic
sup_filtB
\family default
\shape default
, 
\family roman
\shape italic
sup_filtC
\family default
\shape default
 and 
\family roman
\shape italic
sup_range
\family default
\shape default
 generics.
 If filter is not synthesized (generic set to 
\family roman
\shape italic
false
\family default
\shape default
), then the outcome of filter is as if the filter is not passing.
 If no filter is synthesized (all generics set to 
\family roman
\shape italic
false
\family default
\shape default
), the output of Message Filter is set to 
\family roman
\shape italic
true
\family default
\shape default
, accepting every received frame.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Message_filter_block_diagram.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Message Filter block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Message-filter-block"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
2.7.6 RX Buffer 
\begin_inset CommandInset label
LatexCommand label
name "subsec:2.3.10-RX-buffer-1"

\end_inset


\end_layout

\begin_layout Description
File rxBuffer.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
rxBuffer
\end_layout

\begin_layout Standard
RX Buffer implements FIFO RAM memory for storing received CAN frames.
 Block diagram of RX Buffer is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:RX-buffer-block]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RX-buffer-block"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Basic unit of buffer is 32 bit word.
 Size of RX Buffer is configurable (generic 
\family roman
\shape italic
buff_size
\family default
\shape default
) before synthesis.
 However because of addressing logic, only powers of 2 are allowed! Receive
 Buffer FIFO is implemented as 
\family roman
\shape italic
array
\family default
\shape default
 of 
\family roman
\shape italic
std_logic_vector
\family default
\shape default
 (signal 
\family roman
\shape italic
memory
\family default
\shape default
).
 Memory is initialized for simulation only, so that synthesis tools can
 infer Dual Port RAM memory.
 One frame in RX Buffer contains from 5 to 20 words.
 An example of CAN Frames stored in RX Buffer FIFO is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:RX_Buffer-memory-layout]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RX_Buffer-memory-layout"

\end_inset

.
 RX Buffer supports Timestamp capturing in 
\shape smallcaps
Start Of Frame
\shape default
 Bit or upon successful reception of CAN Frame (end of 
\shape smallcaps
End Of Frame
\shape default
 field).
 This option can be configured by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[RX_SETTINGS]{RX
\backslash
textunderscore SETTINGS[RTSOP]}
\end_layout

\end_inset

 bit from SW and corresponds to 
\family roman
\shape italic
drv_rtsopt
\family default
\shape default
 signal.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/RX_Buffer_Block_diagram.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:RX-buffer-block"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/RX_Buffer_layout.pdf
	lyxscale 20
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer memory layout
\begin_inset CommandInset label
LatexCommand label
name "fig:RX_Buffer-memory-layout"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
CAN frame is stored continuously in RAM memory of RX Buffer during frame
 reception.
 Process of storing is controlled by Protocol Control via signals 
\family roman
\shape italic
store_metadata
\family default
\shape default
, 
\family roman
\shape italic
store_data
\family default
\shape default
, 
\family roman
\shape italic
store_data_word
\family default
\shape default
, 
\family roman
\shape italic
rec_message_valid
\family default
\shape default
 and 
\family roman
\shape italic
rec_abort
\family default
\shape default
.
 Additional signal 
\family roman
\shape italic
sof_pulse
\family default
\shape default
 is present.
 Storing is implemented in RX Buffer FSM (
\family roman
\shape italic
rx_fsm
\family default
\shape default
) which is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:RX-buffer-FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RX-buffer-FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Upon start of CAN Frame 
\family roman
\shape italic
sof_pulse
\family default
\shape default
 signal is given by Protocol Control and Timestamp of 
\shape smallcaps
Start Of Frame
\shape default
 Bit is stored in 
\family roman
\shape italic
timestamp_capture
\family default
\shape default
 register.
 As frame reception progresses, at the end of 
\family roman
\shape italic
control
\family default
\shape default
 state of Protocol Control, it is already clear whether unit is 
\shape smallcaps
Transmitter
\shape default
 or 
\shape smallcaps
Receiver
\shape default
, all metadata are received (
\family roman
\shape italic
rec_frame_type_in
\family default
\shape default
, 
\family roman
\shape italic
rec_dlc_in
\family default
\shape default
, 
\family roman
\shape italic
rec_ident_type_in
\family default
\shape default
, 
\family roman
\shape italic
rec_ident_in
\family default
\shape default
) thus 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[FRAME_FORM_W]{FRAME
\backslash
textunderscore FORM
\backslash
textunderscore W}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[IDENTIFIER_W]{IDENTIFIER
\backslash
textunderscore W}
\end_layout

\end_inset

 can be stored.
 Protocol Control sets 
\family roman
\shape italic
store_metadata
\family default
\shape default
 for one clock cycle and RX Buffer FSM moves from 
\family roman
\shape italic
idle
\family default
\shape default
, through 
\family roman
\shape italic
rxb_store_frame_format
\family default
\shape default
, 
\family roman
\shape italic
rxb_store_identifier
\family default
\shape default
, 
\family roman
\shape italic
rxb_store_beg_ts_low
\family default
\shape default
 and 
\family roman
\shape italic
rxb_store_beg_ts_high
\family default
\shape default
 to 
\family roman
\shape italic
rxb_store_data
\family default
\shape default
 state.
 During each of these states one word is stored in RX Buffer FIFO.
 In 
\family roman
\shape italic
rxb_store_data
\family default
\shape default
 RX Buffer FSM is waiting for next commands from Protocol Control.
 Reception of each 4 bytes of CAN data is signaled by Protocol Control via
 
\family roman
\shape italic
store_data
\family default
\shape default
 signal and data are present in 
\family roman
\shape italic
store_data_word
\family default
\shape default
.
 When frame reception is finished, 
\family roman
\shape italic
rec_message_valid
\family default
\shape default
 is activated by Protocol Control and storing of RX Frame either finishes
 (
\family roman
\shape italic
rxb_idle
\family default
\shape default
) or goes through two extra states (
\family roman
\shape italic
rxb_store_end_ts_low
\family default
\shape default
, 
\family roman
\shape italic
rxb_store_end_ts_high
\family default
\shape default
) which are used to store captured Timestamp from 
\shape smallcaps
End Of Frame
\shape default
.
 If any error occurred during reception (e.g.
 CRC mismatch or another 
\shape smallcaps
Error Frame
\shape default
), storing is aborted via 
\family roman
\shape italic
rec_abort
\family default
\shape default
 signal.
\end_layout

\begin_layout Standard
RX Buffer contains two write pointers: 
\family roman
\shape italic
write_pointer
\family default
\shape default
 and 
\family roman
\shape italic
write_pointer_raw
\family default
\shape default
.
 First pointer is 
\begin_inset Quotes eld
\end_inset

real
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

committed
\begin_inset Quotes erd
\end_inset

 pointer which is available to SW, second pointer is used during process
 of storing.
 Single read pointer (
\family roman
\shape italic
read_pointer
\family default
\shape default
) is used to access the RAM from second port, and read CAN Frame.
 During storing process, amount of free memory is checked and 
\family roman
\shape italic
overrun_condition
\family default
\shape default
 is active when there is an intent to write to RX Buffer RAM (
\family roman
\shape italic
write_raw_intent
\family default
\shape default
) and there is not enough space in RX Buffer RAM.
 Overrun Condition signals that RX Buffer is full, and next word can not
 be stored.
 Such a condition is captured in Internal Overrun Flag (
\family roman
\shape italic
data_overrun_int)
\family default
\shape default
 register and whole frame is discarded upon the 
\shape smallcaps
End Of Frame
\shape default
.
 Additional flag 
\family roman
\shape italic
data_overrun_r
\family default
\shape default
 is set.
 This flag can be read from SW to find out about lost frame due to Data
 Overrun.
 When successful frame reception is signaled (
\family roman
\shape italic
rec_frame_valid_r = '1'
\family default
\shape default
), RX Buffer FSM is transiting from either 
\family roman
\shape italic
rxb_store_data 
\family default
\shape default
or 
\family roman
\shape italic
rxb_store_end_ts_high 
\family default
\shape default
to 
\family roman
\shape italic
rxb_idle
\family default
\shape default
, Internal Overrun Flag is checked.
 If no Data Overrun occurred during process of storing, frame is validated
 and signal 
\family roman
\shape italic
commit_rx_frame
\family default
\shape default
 is set.
 This action is considered as validation of stored frame, and frame can
 be now read from SW side of RX Buffer FIFO.
 Upon this action 
\family roman
\shape italic
write_pointer_raw
\family default
\shape default
 is loaded to 
\family roman
\shape italic
write_pointer
\family default
\shape default
.
 If frame storing is aborted due to 
\family roman
\shape italic
rec_abort
\family default
\shape default
 or 
\family roman
\shape italic
data_overrun_int
\family default
\shape default
, 
\family roman
\shape italic
write_pointer_raw
\family default
\shape default
 is reset to value of 
\family roman
\shape italic
write_pointer
\family default
\shape default
.
\end_layout

\begin_layout Standard
Always one word (addressed by 
\family roman
\shape italic
read_pointer
\family default
\shape default
 signal) is on the output of circuit to be read.
 If SW reads this word 
\family roman
\shape italic
drv_read_start
\family default
\shape default
 is activated, and 
\family roman
\shape italic
read_pointer
\family default
\shape default
 is automatically incremented by 1.
 Frame can be read out from RX Buffer only when RX Buffer contains at least
 one committed frame (what an unexpected information).
 This is signaled in 
\family roman
\shape italic
message_count
\family default
\shape default
 signal and 
\family roman
\shape italic
rx_empty
\family default
\shape default
 signal.
 Upon read of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[FRAME_FORM_W]{FRAME
\backslash
textunderscore FORM
\backslash
textunderscore W}
\end_layout

\end_inset

, additional counter (
\family roman
\shape italic
read_frame_counter
\family default
\shape default
) is set to value in RWCNT fields of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[FRAME_FORM_W]{FRAME
\backslash
textunderscore FORM
\backslash
textunderscore W}
\end_layout

\end_inset

.
 Upon each next read, this counter is decremented.
 When zero is reached, whole frame was read, and 
\family roman
\shape italic
message_count
\family default
\shape default
 can be decremented by 1.
 Note that since Frame reception and Frame read by SW are not synchronized,
 simultaneous effect of finishing read (
\family roman
\shape italic
drv_read_start
\family default
\shape default
 and 
\family roman
\shape italic
read_frame_counter = 1
\family default
\shape default
) and committing new frame (
\family roman
\shape italic
commit_rx_frame
\family default
\shape default
) on 
\family roman
\shape italic
message_count
\family default
\shape default
 are taken into account to avoid hazards.
 Note that SW read if RX buffer is empty, or frame is not yet completely
 stored, has no effect and all zeroes are returned (
\family roman
\shape italic
rx_read_buff
\family default
\shape default
).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_RX_Buffer.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX Buffer FSM
\begin_inset CommandInset label
LatexCommand label
name "fig:RX-buffer-FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
2.7.7 Transmit buffer - Time (TXT) 
\begin_inset CommandInset label
LatexCommand label
name "subsec-TXT-buffer"

\end_inset


\end_layout

\begin_layout Description
File txtBuffer.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
txtBuffer
\end_layout

\begin_layout Standard
TXT Buffer is a module which contains one CAN Frame to be transmitted.
 Block diagram of TXT Buffer is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:TXT-buffer-block]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TXT-buffer-block"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The actual implementation of CTU CAN FD contains 4 TXT Buffers, but the
 design is ready for extensions up to 8 buffers.
 Buffers are accessed via memory access to 
\begin_inset Quotes eld
\end_inset

TXT Buffer 1,2,3,4
\begin_inset Quotes erd
\end_inset

 memory regions.
 Each TXT Buffer contains a state machine which controls operation of the
 buffer, and availability of data within it.
 The state machine is controlled by SW (via SW commands) and by CAN Core
 (via HW commands) and it is described in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:TXT_Buffer-FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TXT_Buffer-FSM"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/TXT_Buffer_Block_diagram.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:TXT-buffer-block"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Memory in TXT Buffer (signal 
\family roman
\shape italic
txt_buffer_mem
\family default
\shape default
) is write only from SW, with only support of 32 bit writes.
 SW is accessing the memory via 
\family roman
\shape italic
tran_data
\family default
\shape default
, 
\family roman
\shape italic
tran_addr
\family default
\shape default
 and 
\family roman
\shape italic
tran_cs
\family default
\shape default
 signals which are driven in Memory Registers module (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Memory-registers"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Note that TXT Buffer memory can be written into by SW only when TXT Buffer
 is accessible (
\family roman
\shape italic
txtb_user_accessible
\family default
\shape default
 signal).
 Buffer is accessible when TXT Buffer FSM is in one of following states:
 
\family roman
\shape italic
txt_empty
\family default
\shape default
, 
\family roman
\shape italic
txt_error
\family default
\shape default
, 
\family roman
\shape italic
txt_aborted
\family default
\shape default
 or 
\family roman
\shape italic
txt_ok
\family default
\shape default
.
 In other states of TXT Buffer FSM, writes to TXT Buffer Memory have no
 effect.
 HW (Protocol Control module) is accessing the memory via 
\family roman
\shape italic
txt_addr
\family default
\shape default
 and reading data in 
\family roman
\shape italic
txt_word
\family default
\shape default
 signal.
 In states where TXT Buffer RAM is accessible from SW, it is not accessed
 by Protocol Control.
 If TXT Buffer is accessed by Protocol Control (Frame transmission is in
 progress), TXT Buffer is not accessible from SW.
\end_layout

\begin_layout Standard
SW commands on TXT Buffer can be issued via 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TX_COMMAND]{TX
\backslash
textunderscore COMMAND}
\end_layout

\end_inset

 register.
 Issuing invalid command (not supported in actual state of TXT Buffer FSM)
 has no effect.
 Once user sets the buffer to 
\family roman
\shape italic
txt_ready
\family default
\shape default
 via 
\family roman
\shape italic
txt_sw_cmd.set_rdy
\family default
\shape default
, CAN Core (Protocol Control) will lock (
\family roman
\shape italic
txt_hw_cmd.lock
\family default
\shape default
) the buffer (make it inaccessible to SW) as soon as CAN Bus is Idle, and
 transit to 
\family roman
\shape italic
txt_tx_prog
\family default
\shape default
.
 In 
\family roman
\shape italic
txt_tx_prog
\family default
\shape default
, Protocol Control is driving 
\family roman
\shape italic
txt_addr
\family default
\shape default
 signal and reading CAN Frame Identifier and Data for transmission.
 Upon successful transmission of CAN Frame 
\family roman
\shape italic
txt_hw_cmd.valid
\family default
\shape default
 is activated and TXT Buffer FSM moves to 
\family roman
\shape italic
txt_tx_ok
\family default
\shape default
.
 If Arbitration is lost during transmission, 
\family roman
\shape italic
txt_hw_cmd.arbl
\family default
\shape default
 is signaled, and TXT Buffer is moved back to 
\family roman
\shape italic
txt_ready
\family default
\shape default
.
 If CTU CAN FD reached limit of CAN Frame re-transmissions (either due to
 multiple Error Frames or Arbitration loses), 
\family roman
\shape italic
txt_hw_cmd.failed
\family default
\shape default
 command is issued and TXT Buffer FSM is moved to 
\family roman
\shape italic
txt_error
\family default
\shape default
.
 SW can also issue Abort Command (
\family roman
\shape italic
txt_sw_cmd.set_abt
\family default
\shape default
) and at next Error Frame or Arbitration Loss, TXT Buffer FSM is moved to
 
\family roman
\shape italic
txt_aborted
\family default
\shape default
.
 Since there are multiple instances of TXT Buffer in each CTU CAN FD, HW
 and SW commands must be filtered for each of them.
 TXT Buffer is uniquely distinguished by 
\family roman
\shape italic
ID
\family default
\shape default
 generic.
 SW commands distinguish between instances via 
\family roman
\shape italic
sw_cbs
\family default
\shape default
 and HW commands via 
\family roman
\shape italic
hw_cbs
\family default
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_TXT_Buffer.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT Buffer state machine
\begin_inset CommandInset label
LatexCommand label
name "fig:TXT_Buffer-FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
2.7.8 Memory registers
\begin_inset CommandInset label
LatexCommand label
name "subsec-Memory-registers"

\end_inset


\end_layout

\begin_layout Description
File canfd_registers.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
canfd_registers
\end_layout

\begin_layout Standard
Memory Registers provide an interface between SoC Memory Bus (Avalon or
 APB) and all control and Status signals of CTU CAN FD IP function.
 Address decoder for access to TXT Buffers is implemented in this module.
 Driving bus assignments are implemented in this module.
 Register structure is in described in Chapter: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[3.
 CAN FD Core memory map]{3.
 CAN FD Core memory map}
\end_layout

\end_inset

.
 Frame Format in TXT Buffers and RX Buffer is described in Chapter: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[4.
 CAN FD frame format]{4.
 CAN FD frame format}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
2.7.9 TX Arbitrator
\end_layout

\begin_layout Description
File txArbitrator.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
txArbitrator
\end_layout

\begin_layout Standard
TX Arbitrator module has three main purposes:
\end_layout

\begin_layout Itemize
Select highest priority TXT Buffer whose TXT Buffer FSM is in 
\family roman
\shape italic
txt_ready
\family default
\shape default
 and can be chosen for transmission.
\end_layout

\begin_layout Itemize
Compare Timestamp from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_L_W]{TIMESTAMP
\backslash
textunderscore L
\backslash
textunderscore W}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_U_W]{TIMESTAMP
\backslash
textunderscore U
\backslash
textunderscore W}
\end_layout

\end_inset

 with external Timestamp and signal to CAN Core, whether Timestamp of highest
 priority TXT Buffer is higher than value of 
\family roman
\shape italic
timestamp
\family default
\shape default
 input.
\end_layout

\begin_layout Itemize
Load metadata from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[FRAME_FORM_W]{FRAME
\backslash
textunderscore FORM
\backslash
textunderscore W}
\end_layout

\end_inset

 from highest priority frame, once CAN Frame Timestamp from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_L_W]{TIMESTAMP
\backslash
textunderscore L
\backslash
textunderscore W}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_U_W]{TIMESTAMP
\backslash
textunderscore U
\backslash
textunderscore W}
\end_layout

\end_inset

 is higher than value of
\family roman
\shape italic
 timestamp
\family default
\shape default
 input.
 This comparison allows propagation of CAN Frame to CAN Core only when Timestamp
 input becomes higher than CAN Frame Timestamp.
 In other words, CAN Frame can be transmitted only when 
\family roman
\shape italic
timestamp
\family default
\shape default
 reaches value of CAN Frame Timestamp, which creates function of 
\begin_inset Quotes eld
\end_inset

send at certain time
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
TX Arbitrator block diagram is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:TX-arbitrator-block]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TX-arbitrator-block"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 It contains FSM whose state transition diagram is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:TX_Arbitrator-FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TX_Arbitrator-FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 FSM resolves Timestamp comparisons and Metadata loads on outputs.
 Highest priority TXT Buffer is selected by Priority Decoder.
 Priority Decoder is implemented in a separate sub-module and it is set
 of priority comparators organized as tree.
 Priority decoder can handle up to 8 TXT Buffers, thus it logically has
 3 levels of priority comparisons.
\end_layout

\begin_layout Standard
TX Arbitrator FSM (
\family roman
\shape italic
tx_arb_fsm
\family default
\shape default
) is started in 
\family roman
\shape italic
arb_sel_low_ts
\family default
\shape default
 state which selects 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_L_W]{TIMESTAMP
\backslash
textunderscore L
\backslash
textunderscore W}
\end_layout

\end_inset

 word from TXT Buffer memory.
 TX Arbitrator is held in this state as long as there is no valid frame
 selected by Priority Decoder (
\family roman
\shape italic
select_buf_avail
\family default
\shape default
 
\family roman
\shape italic
= '0'
\family default
\shape default
).
 In this state lower part of CAN Frame Timestamp is stored in 
\family roman
\shape italic
ts_low_internal
\family default
\shape default
.
 Upon selection of valid TXT Buffer (
\family roman
\shape italic
select_buf_avail
\family default
\shape default
 
\family roman
\shape italic
= '1'), 
\family default
\shape default
TX Arbitrator FSM is moved to 
\family roman
\shape italic
arb_sel_upp_ts
\family default
\shape default
 in which 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_U_W]{TIMESTAMP
\backslash
textunderscore U
\backslash
textunderscore W}
\end_layout

\end_inset

 is addressed from TXT Buffer RAM.
 In this state Upper part of CAN Frame Timestamp is on the output of TXT
 Buffer RAM and Lower part of CAN Frame Timestamp is stored in 
\family roman
\shape italic
ts_low_internal
\family default
\shape default
.
 Timestamp comparison is executed (
\family roman
\shape italic
timestamp_valid
\family default
\shape default
) and if 
\family roman
\shape italic
timestamp
\family default
\shape default
 has past CAN Frame Timestamp, TX Arbitrator FSM is updated to 
\family roman
\shape italic
arb_sel_ffw
\family default
\shape default
.
 If not, TX Arbitrator FSM is waiting for 
\family roman
\shape italic
timestamp
\family default
\shape default
 to pass CAN Frame Timestamp.
 In 
\family roman
\shape italic
arb_sel_ffw
\family default
\shape default
, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[FRAME_FORM_W]{FRAME
\backslash
textunderscore FORM
\backslash
textunderscore W}
\end_layout

\end_inset

 is addressed and CAN Frame metadata are stored on outputs of TX Arbitrator
 (
\family roman
\shape italic
tran_dlc
\family default
\shape default
, 
\family roman
\shape italic
tran_frame_type
\family default
\shape default
, 
\family roman
\shape italic
tran_ident_type
\family default
\shape default
, 
\family roman
\shape italic
tran_is_rtr
\family default
\shape default
).
 Frame is marked as valid (
\family roman
\shape italic
tran_frame_valid_com
\family default
\shape default
) for CAN Core.
 Note that validity of output frame is logic AND between 
\family roman
\shape italic
tran_frame_valid_com
\family default
\shape default
 and combinational signal 
\family roman
\shape italic
select_buf_avail
\family default
\shape default
 from Priority Decoder.
 This fact is important due to hazard protection and it is further explained
 in 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec-TX-Datapath-hazard-protection"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Upon change of Index of selected TXT Buffer, TX Arbitrator FSM is restarted
 (
\family roman
\shape italic
select_buf_index_reg /= select_buf_index
\family default
\shape default
) and selection process repeats.
 This architecture guarantees that CAN Frame from highest Priority TXT Buffer
 is propagated for transmission.
 If Protocol Control gives Lock command (
\family roman
\shape italic
txt_hw_cmd.lock
\family default
\shape default
) TX Arbitrator FSM moves to 
\family roman
\shape italic
arb_locked
\family default
\shape default
 and frame selection is stopped until 
\family roman
\shape italic
txt_hw_cmd.unlock
\family default
\shape default
 is signaled.
 Index of actually selected TXT Buffer for transmission is always stored
 in 
\family roman
\shape italic
int_txtb_index
\family default
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/TX_Arbitrator_Block_diagram.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Arbitrator block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:TX-arbitrator-block"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Each state of TX Arbitrator which is addressing word in TXT Buffer memory
 contains Wait State (
\family roman
\shape italic
fsm_wait_state
\family default
\shape default
).
 Due to this Wait State FSM waits one additional clock cycle before processing
 data from TXT Buffer.
 This Wait State is necessary since output of TXT Buffer RAM is clocked,
 and it takes one clock cycle to provide the data after 
\family roman
\shape italic
txtb_ptr
\family default
\shape default
 was set.
 Selection process transits through 3 States of TX Arbitrator with one clock
 cycle Wait State and one clock cycle for data processing in each of the
 states.
 This creates delay of 6 clock cycles between TXT Buffer is set to 
\family roman
\shape italic
txt_ready,
\family default
\shape default
 and TX Frame is selected for transmission.
 Note that with 100 MHz clock, this creates delay of 60 ns which is far
 below maximum 
\shape smallcaps
Nominal Bit Time
\shape default
 length (1000 ns), and thus it does not impose any restrictions on time
 sensitive CAN applications as TTCAN.
 Since TX Arbitrator (during reading 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_L_W]{TIMESTAMP
\backslash
textunderscore L
\backslash
textunderscore W}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_U_W]{TIMESTAMP
\backslash
textunderscore U
\backslash
textunderscore W}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[FRAME_FORM_W]{FRAME
\backslash
textunderscore FORM
\backslash
textunderscore W}
\end_layout

\end_inset

) and Protocol Control (during frame transmission) both need data from TXT
 Buffer Memory, pointer to TXT Buffer Memory is multiplexed between 
\family roman
\shape italic
txtb_pointer_meta
\family default
\shape default
 and 
\family roman
\shape italic
txtb_core_pointer
\family default
\shape default
.
 When frame is not yet selected, TXT Buffer Memory is addressed with 
\family roman
\shape italic
txtb_pointer_meta
\family default
\shape default
.
 Once frame is selected and TX Arbitrator FSM is in 
\family roman
\shape italic
arb_locked
\family default
\shape default
, 
\family roman
\shape italic
txtb_core_pointer
\family default
\shape default
 is used.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_TX_Arbitrator.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Arbitrator state machine
\begin_inset CommandInset label
LatexCommand label
name "fig:TX_Arbitrator-FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
2.7.10 Event Logger (optional) 
\begin_inset CommandInset label
LatexCommand label
name "subsec-Event-logger"

\end_inset


\end_layout

\begin_layout Description
File logger.vhd
\end_layout

\begin_layout Description
Used
\begin_inset space ~
\end_inset

in CAN_top_level.vhd
\end_layout

\begin_layout Description
Entity 
\family roman
\shape italic
CAN_logger
\end_layout

\begin_layout Standard
Event Logger is a module capturing events on CAN Bus and Timestamp of these
 events.
 FIFO memory is implemented with configurable size (generic 
\family roman
\shape italic
memory_size
\family default
\shape default
).
 Event Logger implements state machine with 
\family roman
\shape italic
config
\family default
\shape default
 state which is dedicated to reading out previously logged data, configuring
 triggering and capturing event types.
 Block diagram of this state machine is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Event-logger-FSM]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Event-logger-FSM"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 When command is given (via Driving bus, see register 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[LOG_COMMAND]{LOG
\backslash
textunderscore COMMAND}
\end_layout

\end_inset

) state machine is moved to 
\family roman
\shape italic
ready
\family default
\shape default
 state where it is waiting for triggering condition to move to 
\family roman
\shape italic
running
\family default
\shape default
 state.
 In 
\family roman
\shape italic
running
\family default
\shape default
 state, events are being captured along with Timestamp and additional informatio
n (see register 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[LOG_CAPT_EVENT_1]{LOG
\backslash
textunderscore CAPT
\backslash
textunderscore EVENT
\backslash
textunderscore 1}
\end_layout

\end_inset

).
 When memory is full, circuit automatically moves to 
\family roman
\shape italic
config
\family default
\shape default
 state and sets 
\family roman
\shape italic
logger_finished
\family default
\shape default
 output.
 From 
\family roman
\shape italic
ready
\family default
\shape default
 and 
\family roman
\shape italic
running
\family default
\shape default
 state, circuit operation can be aborted via Driving Bus.
 Block diagram of Event Logger is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Event-logger-block]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Event-logger-block"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Event_Logger_Block_diagram.pdf
	lyxscale 20
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Event Logger block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Event-logger-block"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Event Logger implements so called 
\begin_inset Quotes eld
\end_inset

Event harvesting
\begin_inset Quotes erd
\end_inset

 mechanism.
 Since there are many events sources in Status Bus, several events can occur
 at once! Any events that occur are stored in an internal register upon
 edge detection on this event.
 In next up to N clock cycles (N is the amount of simultaneous events) events
 are written to RAM memory of Event Logger.
 If any other event occurs (of the same type) during these N cycles it is
 not logged.
 Note that events on CAN Bus does not occur with such a high frequency,
 thus this restriction does not impose any restrictions on Event Logger
 usage.
\end_layout

\begin_layout Standard
This circuit provides additional testing capability beyond CAN FD specification.
 Events can be read out from memory from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[LOG_CAPT_EVENT_1]{LOG
\backslash
textunderscore CAPT
\backslash
textunderscore EVENT
\backslash
textunderscore 1}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[LOG_CAPT_EVENT_2]{LOG
\backslash
textunderscore CAPT
\backslash
textunderscore EVENT
\backslash
textunderscore 2}
\end_layout

\end_inset

 register.
 The event at position of 
\family roman
\shape italic
read_pointer
\family default
\shape default
 is read out.
 
\family roman
\shape italic
read_pointer
\family default
\shape default
 position can be manipulated via 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[LOG_COMMAND]{LOG
\backslash
textunderscore COMMAND}
\end_layout

\end_inset

 register.
 
\end_layout

\begin_layout Standard
FIFO Memory is implemented equally as RX Buffer and TXT Buffer memories.
 It is un-initialized during reset which allows ALTERA Synthesis tools to
 infer native RAM memory.
 Additional vector 
\family roman
\shape italic
memory_valid
\family default
\shape default
 is stored which contains information about state of memory row, so it is
 possible to achieve erase-on-reset behavior from user perspective.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_event_logger.pdf
	lyxscale 20
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Event logger state machine
\begin_inset CommandInset label
LatexCommand label
name "fig:Event-logger-FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
2.8 Information Processing Time
\begin_inset CommandInset label
LatexCommand label
name "sec-Information-processing"

\end_inset


\end_layout

\begin_layout Standard
CAN standard defines 
\shape smallcaps
Information Processing Time
\shape default
 (IPT) which can be different for every implementation of CAN controller.
 IPT determines how many clock cycles CAN controller needs after sampling
 bus value in 
\shape smallcaps
Sample Point
\shape default
, before determining following bit value.
 Implementation of CTU CAN FD IP core is based on Triggers as explained
 in 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec-Pipeline-architecture"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 For sampling, three Triggering signals are used.
 These signals are mutually delayed by one clock cycle (Sample Trigger,
 Bit Destuffing Trigger, Receive Trigger).
 Thus minimal duration of 
\shape smallcaps
Phase 2
\shape default
 is 4 clock cycles (one more cycle is needed to update internal registers
 of Fault Confinement and Protocol Control).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab: IPT_reqs]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab: IPT_reqs"

\end_inset

 shows minimal 
\shape smallcaps
Bit Time
\shape default
 settings in relation to Prescaler settings.
 Triggering signals (TX and RX) in this corner case are shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Minimal_bit_time]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Minimal_bit_time"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Min.
 
\shape smallcaps
Prop
\shape default
 + 
\shape smallcaps
Ph1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Min.
 
\shape smallcaps
Ph2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape smallcaps
Information Processing Time
\shape default
 requirements
\begin_inset CommandInset label
LatexCommand label
name "tab: IPT_reqs"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Minimal_IPT.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Minimal Bit Time
\begin_inset CommandInset label
LatexCommand label
name "fig:Minimal_bit_time"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
From 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab: IPT_reqs]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab: IPT_reqs"

\end_inset

 theoretical maximum 
\shape smallcaps
Data Bit-Rate
\shape default
 of CAN Frame can be calculated.
 Assuming we have Prescaler set to 1, length of all bit segments together
 is 7, and clock is 100 MHz, CTU CAN FD IP Core reaches 14,7 Mbit/s 
\shape smallcaps
Bit-Rate
\shape default
.
 Note that this situation is theoretical maximum, and since timing conditions
 are very tight, synchronization errors can appear.
 This configuration was tested (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec-Sanity-test"
plural "false"
caps "false"
noprefix "false"

\end_inset

) in simulation, and one such a frame is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Max_bitrate]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Max_bitrate"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/14Mbit_20m_Star.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Frame with maximum 
\shape smallcaps
Data Bit-Rate
\shape default

\begin_inset CommandInset label
LatexCommand label
name "fig:Max_bitrate"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
2.9 Error detection architecture
\begin_inset CommandInset label
LatexCommand label
name "sec-Error-detection"

\end_inset


\end_layout

\begin_layout Standard
This section describes how each type of error on CAN Bus is handled in CTU
 CAN FD.
\end_layout

\begin_layout Subsection
2.9.1 Bit Error
\end_layout

\begin_layout Standard

\shape smallcaps
Bit Error
\shape default
 in CTU CAN FD is detected in several ways according to part of Frame where
 it might occur:
\end_layout

\begin_layout Itemize
In 
\shape smallcaps
Start Of Frame
\shape default
 bit (
\family roman
\shape italic
PC_State = sof
\family default
\shape default
), 
\shape smallcaps
Bit Error
\shape default
 is detected explicitly in Protocol Control.
 Upon Sampling 
\shape smallcaps
Recessive
\shape default
 bit Protocol Control is updated to 
\family roman
\shape italic
error
\family default
\shape default
, thus causing transmission of 
\shape smallcaps
Error Frame
\shape default
.
\end_layout

\begin_layout Itemize
In 
\shape smallcaps
Arbitration
\shape default
, 
\shape smallcaps
Bit Error
\shape default
 is considered only when 
\shape smallcaps
Dominant
\shape default
 is sent and 
\shape smallcaps
Recessive
\shape default
 is received.
 This case is handled directly in 
\family roman
\shape italic
arbitration
\family default
\shape default
 state and Protocol Control is updated to 
\family roman
\shape italic
error
\family default
\shape default
.
\end_layout

\begin_layout Itemize
In 
\shape smallcaps
Control
\shape default
, 
\shape smallcaps
Data
\shape default
 and 
\shape smallcaps
CRC
\shape default
 fields 
\shape smallcaps
Bit Error
\shape default
 is detected by Bus Sampling module on 
\family roman
\shape italic
bit_Error
\family default
\shape default
 output.
 This module continuously compares Data sent with TX Trigger and Sampled
 with RX Trigger.
 Bit Error output is validated by Fault Confinement module, which checks
 actual value of Protocol Control FSM and sets 
\family roman
\shape italic
bit_Error_valid
\family default
\shape default
 output.
 If 
\family roman
\shape italic
bit_Error_valid
\family default
\shape default
 is detected in any state of Protocol Control, it is updated to 
\family roman
\shape italic
error
\family default
\shape default
.
\end_layout

\begin_layout Itemize
In 
\shape smallcaps
CRC Delimiter
\shape default
 and 
\shape smallcaps
Acknowledge Delimiter
\shape default
, 
\shape smallcaps
Bit Error
\shape default
 is detected by Protocol Control itself by explicitly checking sampled RX
 value to be 
\shape smallcaps
Recessive
\shape default
.
 In case of 
\shape smallcaps
Dominant
\shape default
 Bit, Protocol Control is updated to 
\family roman
\shape italic
error
\family default
\shape default
.
\end_layout

\begin_layout Itemize
In 
\shape smallcaps
End of Frame
\shape default
, detection of any 
\shape smallcaps
Dominant
\shape default
 Bit is evaluated as a presence of 
\shape smallcaps
Active Error Flag
\shape default
 and Protocol Control is updated to 
\family roman
\shape italic
error
\family default
\shape default
.
\end_layout

\begin_layout Itemize
During 
\shape smallcaps
Error Frame
\shape default
 and 
\shape smallcaps
Overload Frame
\shape default
, 
\shape smallcaps
Bit Errors
\shape default
 are handled in 
\family roman
\shape italic
error
\family default
\shape default
 and 
\family roman
\shape italic
overload
\family default
\shape default
 states explicitly.
 Upon detection of 
\shape smallcaps
Recessive
\shape default
 Bit during 
\shape smallcaps
Active Error Flag
\shape default
, Error Counters are increased accordingly.
 Upon detection of 14 consecutive 
\shape smallcaps
Dominant
\shape default
 Bits during 
\shape smallcaps
Error Flag Superposition
\shape default
, Error counters are incremented accordingly.
\end_layout

\begin_layout Subsection
2.9.2 Stuff Error
\end_layout

\begin_layout Standard

\shape smallcaps
Stuff Error
\shape default
 is detected for standard 
\shape smallcaps
Bit Stuffing
\shape default
 as well as 
\shape smallcaps
Fixed Bit Stuffing
\shape default
 by Bit De-stuffing module and signaled via 
\family roman
\shape italic
stuff_Error
\family default
\shape default
 output.
 
\shape smallcaps
Stuff Error
\shape default
 is enabled in 
\shape smallcaps
Start of Frame
\shape default
, 
\shape smallcaps
Arbitration
\shape default
, 
\shape smallcaps
Control
\shape default
, Data and 
\shape smallcaps
CRC Sequence
\shape default
 fields of CAN Frame.
 Note that CAN FD standard proposes that an error in 
\shape smallcaps
Fixed Bit Stuffing
\shape default
 method shall be interpreted as 
\shape smallcaps
Form Error
\shape default
 instead of 
\shape smallcaps
Stuff Error
\shape default
.
 CTU CAN FD detects this error as 
\shape smallcaps
Stuff Error
\shape default
 due to shared 
\family roman
\shape italic
stuff_Error
\family default
\shape default
 output.
\end_layout

\begin_layout Subsection
2.9.3 Form Error
\end_layout

\begin_layout Standard

\shape smallcaps
Form Error
\shape default
 is detected by Protocol Control FSM and it is marked in 
\family roman
\shape italic
form_Error_r
\family default
\shape default
 in following cases:
\end_layout

\begin_layout Itemize
if r0 bit is received as 
\shape smallcaps
Recessive
\shape default
.
\end_layout

\begin_layout Itemize
if r1 bit is received as 
\shape smallcaps
Recessive
\shape default
 in CAN 2.0 Frames with 
\shape smallcaps
Extended
\shape default
 Identifier.
 For other frame, types r1 is part of 
\shape smallcaps
Arbitration
\shape default
 Field and detection of illegal value is covered by 
\shape smallcaps
Bit Error
\shape default
 detection.
\end_layout

\begin_layout Itemize
If support for CAN FD is disabled via 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[SETTINGS]{SETTINGS}
\end_layout

\end_inset

 and 
\shape smallcaps
Extended Data Length
\shape default
 bit is detected 
\shape smallcaps
Recessive
\shape default
!
\end_layout

\begin_layout Itemize
If 
\shape smallcaps
CRC Delimiter
\shape default
 is received as 
\shape smallcaps
Dominant
\shape default
 or 
\shape smallcaps
ACK Delimiter
\shape default
 is received as 
\shape smallcaps
Dominant
\shape default
.
\end_layout

\begin_layout Subsection
2.9.4 ACK Error
\end_layout

\begin_layout Standard

\shape smallcaps
ACK Error
\shape default
 is detected when 
\shape smallcaps
Recessive
\shape default
 value is detected in 
\shape smallcaps
ACK
\shape default
 bit.
 This error is detected by Protocol Control FSM.
\end_layout

\begin_layout Subsection
2.9.5 CRC Error
\end_layout

\begin_layout Standard

\shape smallcaps
CRC Error
\shape default
 is detected by Protocol Control FSM and it occurs upon mismatch between
 received CRC (
\family roman
\shape italic
rec_crc_r
\family default
\shape default
) and calculated CRC (
\family roman
\shape italic
crc15
\family default
\shape default
, 
\family roman
\shape italic
crc17
\family default
\shape default
, 
\family roman
\shape italic
crc21
\family default
\shape default
).
 Mismatch is combinationally evaluated in 
\family roman
\shape italic
crc_and_parity_valid
\family default
\shape default
 and it is compared in first clock cycle of 
\family roman
\shape italic
delim_ack state
\family default
\shape default
 of Protocol Control and stored in 
\family roman
\shape italic
crc_check
\family default
\shape default
.
\end_layout

\begin_layout Section
2.10 Node restart after Bus-off
\end_layout

\begin_layout Standard
CAN FD standard defines that CAN Node shall wait for 128 occurrences of
 11 consecutive 
\shape smallcaps
Recessive
\shape default
 bits after transfer to 
\shape smallcaps
Bus Off
\shape default
, before going to 
\shape smallcaps
Error Active
\shape default
 again.
 Since SW can manipulate Error counters of CTU CAN FD, it is possible to
 force Fault Confinement state to become 
\shape smallcaps
Error Active
\shape default
 without satisfying this condition.
 Two ways of restarting error counters must be distinguished:
\end_layout

\begin_layout Standard
1.
 Reset error counters via 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[CTR_PRES]{CTR
\backslash
textunderscore PRES}
\end_layout

\end_inset

 register.
 This approach is 
\series bold
not
\series default
 ISO CAN FD compliant.
\end_layout

\begin_layout Standard
2.
 Give Reset Error Counters command via 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[COMMAND]{COMMAND[ERCRST]}
\end_layout

\end_inset

 register.
 SW using this approach is ISO CAN FD compliant.
\end_layout

\begin_layout Section
2.11 Special features summary
\end_layout

\begin_layout Standard
CTU CAN FD contains following features which are not required by CAN FD
 standard:
\end_layout

\begin_layout Enumerate
Manipulation of 
\shape smallcaps
TX Error Counter
\shape default
 and 
\shape smallcaps
RX Error Counter
\shape default
, thus directly affect 
\shape smallcaps
Fault Confinement
\shape default
 state.
\end_layout

\begin_layout Enumerate
Time triggered transmission from TX Buffer.
\end_layout

\begin_layout Enumerate
Reception of RX Frame Timestamp in 
\shape smallcaps
Start of Frame
\shape default
 or 
\shape smallcaps
End of Frame
\shape default
.
\end_layout

\begin_layout Enumerate
Chance to immediately abort transmission.
\end_layout

\begin_layout Enumerate
Logging events on CAN Bus via Event Logger.
\end_layout

\begin_layout Enumerate
Transmission of special RTR frame with non-zero DLC (refer to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[MODE]{MODE[RTR
\backslash
textunderscore PREF]}
\end_layout

\end_inset

).
\end_layout

\begin_layout Enumerate
Extra error counters to distinguish between errors in 
\shape smallcaps
Nominal Bit-Rate
\shape default
 and 
\shape smallcaps
Data Bit-Rate
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
2.12 TX Data-path hazard protection
\begin_inset CommandInset label
LatexCommand label
name "sec-TX-Datapath-hazard-protection"

\end_inset


\end_layout

\begin_layout Standard
Architecture of TXT Buffer and TX Arbitrator might invoke suspicion of control
 hazard susceptibility.
 This section explains why control hazards will never occur on TXT Buffers
 and TX Arbitrator.
 Architecture of Logic signals is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:TX-DataPath-Logic]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TX-DataPath-Logic"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
TXT Buffer FSM is manipulated via SW commands and HW Commands simultaneously.
 HW Commands have higher priority (see source code of TXT Buffer).
 HW Commands for locking TXT Buffer (
\family roman
\shape italic
txt_hw_cmd.lock
\family default
\shape default
), will occur only when 
\family roman
\shape italic
tran_frame_valid_in
\family default
\shape default
 is signaled by TX Arbitrator to Protocol Control.
 Valid TX Frame is signaled by TX Arbitrator if at least one TXT Buffer
 is in Ready state (
\family roman
\shape italic
txt_ready
\family default
\shape default
), Frame Transmit Timestamp has elapsed and Metadata are loaded on output
 of TX Arbitrator.
 If frame is valid for transmission (
\family roman
\shape italic
tran_frame_valid
\family default
\shape default
) and Set Abort (
\family roman
\shape italic
txt_sw_cmd.set_abt
\family default
\shape default
) SW command is active in the same clock cycle as HW Command for locking
 the TXT Buffer, hazard would not occur due to direct combinational path
 between Set Abort SW Command and 
\family roman
\shape italic
tran_frame_valid
\family default
\shape default
.
 Thus, if TXT Buffer is 
\family roman
\shape italic
txtb_ready
\family default
\shape default
, and Set Abort SW Command is activated, 
\family roman
\shape italic
tran_frame_valid
\family default
\shape default
 is deactivated combinationally and Lock command will not be activated by
 Protocol Control.
\end_layout

\begin_layout Standard
Hazard would occur if red combinational path in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:TX-DataPath-Logic]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TX-DataPath-Logic"
plural "false"
caps "false"
noprefix "false"

\end_inset

 was missing.
 Consider following sequence of actions:
\end_layout

\begin_layout Enumerate
Set Abort SW Command is activated by SW in clock cycle N.
\end_layout

\begin_layout Enumerate
Due to missing red combinational path in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:TX-DataPath-Logic]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TX-DataPath-Logic"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\family roman
\shape italic
tran_frame_valid_in
\family default
\shape default
 is still active in this clock cycle.
\end_layout

\begin_layout Enumerate
Upon rising edge in clock cycle N + 1, TXT Buffer Lock Command is set by
 Protocol Control (
\family roman
\shape italic
tran_frame_valid_in
\family default
\shape default
 was active).
 Since Set Abort Command was active in clock cycle N, and no HW Command
 was active in this clock cycle, TXT Buffer moved to Aborted State (
\family roman
\shape italic
txt_aborted
\family default
\shape default
, in this state RAM of TXT Buffer is accessible from SW).
 TX Arbitrator FSM recognized TXT Buffer Lock command and moved to 
\family roman
\shape italic
arb_locked
\family default
\shape default
 state.
 Due to missing combination path, TX Arbitrator was not informed about TXT
 Buffer which is about to be moved to 
\family roman
\shape italic
txt_aborted
\family default
\shape default
 state, thus it still signaled valid frame for Protocol Control..
\end_layout

\begin_layout Enumerate
Now Protocol Control has Locked TX Arbitrator and starts transmission from
 TXT Buffer.
 However TXT Buffer is in Aborted state, and its memory is accessible to
 user at the same time as Protocol Control is transmitting from the Buffer.
 TXT Buffer is in Aborted State, but Transmission is in progress from the
 Buffer, since 
\family roman
\shape italic
tran_frame_valid
\family default
\shape default
 was deactivated with one clock cycle delay due to missing red combinational
 path in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:TX-DataPath-Logic]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TX-DataPath-Logic"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Hazard_prevention_logic.pdf
	lyxscale 20
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TX Data-path Logic
\begin_inset CommandInset label
LatexCommand label
name "fig:TX-DataPath-Logic"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above mentioned explanation shows that due to direct combinational path
 between TXT Buffer SW Commands and signaling of valid frame on output of
 TX Arbitrator, TX Data-path is 
\series bold
NOT susceptible to hazards!
\series default
 If pipelines were inserted (e.g.
 on output of Priority Decoder), full handshake mechanism would need to
 be created to avoid control hazards.
 Note that other commands such as Set Ready (
\family roman
\shape italic
txt_sw_cmd.set_rdy
\family default
\shape default
) or Set Empty (
\family roman
\shape italic
txt_sw_cmd.set_ety
\family default
\shape default
) will never cause hazards, since TXT Buffer is never marked as ready when
 one of these commands occurs.
 Thus Protocol Control will never issue Lock Command on TXT Buffer which
 is not in 
\family roman
\shape italic
txtb_ready
\family default
\shape default
 state.
\end_layout

\begin_layout Standard
Logic architecture described in this section contains fairly long combinational
 paths from TXT Buffer Priorities registers and SW Command registers in
 Memory Registers Module through TX Arbitrator FSM logic up to TXT Buffer
 Lock Command.
 It is no surprise that during synthesis these paths are most critical paths
 which limit maximal frequency of operation.
 Optimizations of this architecture are not planned at the moment, since
 CTU CAN FD reaches over 100 MHz maximal frequency with this architecture.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "registerMap.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "CANFrameFormat.lyx"

\end_inset


\end_layout

\begin_layout Chapter
5.
 Testbench
\end_layout

\begin_layout Standard
CAN FD IP Core is tested in the dedicated testing framework (CANTest) implemente
d in VHDL, TCL and Python.
 It provides automated, randomized and reproducible RTL tests.
 CANTest always follows a simple rule: Each test must have
\series bold
 exact result
\series default
 whether the test passed or failed! VUnit library is used as wrapper, GHDL
 and Modelsim Altera 6.5b are used as target simulators.
 Tests are executed automatically after every merge request to master branch
 of CTU FEE GitLab repository.
 Furthermore, automated test run is available every night.
\end_layout

\begin_layout Standard
All source codes of CANTest are located in 
\series bold
testbench
\series default
 directory.
 CANTest can be started from Linux terminal by running script 
\series bold
run.py <config_name> 
\series default
where <config_name> corresponds to YAML config file with tests that should
 be executed.
 Description of each test and its configuration is shown in following sub-chapte
rs.
 At the moment there are two configurations available:
\end_layout

\begin_layout Description
\begin_inset space \qquad{}
\end_inset

tests_fast.yml Fast test run which is executed on every merge request.
\end_layout

\begin_layout Description
\begin_inset space \qquad{}
\end_inset

tests_nightly.yml Longer test run which is executed once every 24 hours.
\end_layout

\begin_layout Standard
CANTest framework implements 
\series bold
4 types of tests
\series default
:
\end_layout

\begin_layout Description
\begin_inset space \qquad{}
\end_inset

Unit Test each circuit towards its expected functionality.
\end_layout

\begin_layout Description
\begin_inset space \qquad{}
\end_inset

Feature Test functionality of CTU CAN FD as whole in specific situations.
\end_layout

\begin_layout Description
\begin_inset space \qquad{}
\end_inset

Sanity Test implements various bus topologies and simulates bus traffic
 with more controllers.
\end_layout

\begin_layout Description
\begin_inset space \qquad{}
\end_inset

Reference Test verifies communication with existing CAN FD implementations.
\end_layout

\begin_layout Standard
By default, tests are executed via GHDL simulator.
 An example of test command for fast test run is:
\end_layout

\begin_layout Quotation

\series bold
run.py test tests_fast.yml
\end_layout

\begin_layout Standard
To use Modelsim as simulator (for manual debug with graphic wave output),
 following command can be used:
\end_layout

\begin_layout Quotation

\series bold
VUNIT_SIMULATOR=modelsim ./run.py test tests_fast.yml -- -g
\end_layout

\begin_layout Standard
Note that when running simulations with graphic output from remote PC over
 SSH connection 
\begin_inset Quotes eld
\end_inset

-Y
\begin_inset Quotes erd
\end_inset

 argument must be used.
 
\end_layout

\begin_layout Section
5.1 VHDL Test libraries
\end_layout

\begin_layout Subsection
5.1.1 CANTestlib.vhd
\end_layout

\begin_layout Standard
CANtestLib.vhd provides set of types and procedures which aim to ease the
 test implementation and debugging.
 CANtestLib provides set of HAL functions which access CTU CAN FD and configure
 its functionality.
 During test implementation, it is recommended to use HAL wrappers as much
 as possible instead of direct register access!
\end_layout

\begin_layout Subsection
5.1.2 randomLib.vhd
\end_layout

\begin_layout Standard
Random lib contains custom functions for generation of random numbers.
 File 
\series bold
randomlib.vhd
\series default
 contains generated array and set of procedures for returning random elements.
 This array of numbers was generated by Matlab and has 
\series bold
Uniform distribution
\series default
 of values from the interval (0,1).
 Functions from the library provide values from generated array in a form
 of std_logic or std_logic vector.
 Additional function (
\family roman
\shape italic
rand_gaus
\family default
\shape default
) provides random numbers with a Gaussian distribution.
 To obtain random element (vector, bit, etc.) signal 
\family roman
\shape italic
rand_ctr
\family default
\shape default
 needs to be provided.
 This signal represents an index of the returned element (from generated
 array) and is automatically increased when the procedure ends.
 Note that this approach provides only pseudo-random number generation,
 but it is sufficient for the purpose of CANTest framework.
 By increasing the size of generated array quality of random number generation
 is also increased.
 Actual size of the generated array is 3000 elements in range 0 to 1.
 There is one major disadvantage of this approach.
 When random number generation is used from several processes, more rand_ctr
 signals are needed.
 Basic test entity has one implicit signal rand_ctr defined for this purpose.
\end_layout

\begin_layout Section
5.2 Test entities
\end_layout

\begin_layout Standard
In order to unify all tests of CANTest, 
\family roman
\shape italic
CAN_test
\family default
\shape default
 entity is implemented, and it is described in following table:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Source file
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CANtestLib.vhd
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Entity name
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
CAN_test
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none" width="17cm">
\begin_inset Text

\begin_layout Plain Layout
\noindent
\begin_inset VSpace defskip
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
use_makebox 0
width "95col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Basic test entity.
 Provides common test parameters for all tests.
 Each test is intended to implement architecture of this entity.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\begin_inset VSpace defskip
\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Ports
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Direction
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
run
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boolean
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Starting signal for the test
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
iterations
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
natural
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of iterations to be executed in one test run
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
log_level
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
log_lvl_type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logging severity which should be reported.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
error_beh
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
err_beh_type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Specifies how does the test behave when error occurs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
error_tol
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
natural
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximal amount of errors which does not cause test to fail
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
status
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
test_status_type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Actual status of the test.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\shape italic
errors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
out
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
natural
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error counter of the test
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
5.3 Python test framework
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
5.4 Common test configuration
\begin_inset CommandInset label
LatexCommand label
name "sec-common-Test-configuration"

\end_inset


\end_layout

\begin_layout Standard
YAML configuration file for test run configuration has several common attributes
 for each test in CANTest framework.
 Note that YAML is tree-like structure, and if config is not specified in
 a node, configuration from upper level of tree-like structure is taken.
 CANTest has following default YAML parameters available:
\end_layout

\begin_layout Description
log_level Logging severity which should be used during the test.
\end_layout

\begin_layout Description
error_tolerance Number of errors that can be tolerated in the test.
 If number of errors exceeds this number, test outcome is evaluated as failed.
 Note that in default configuration of test framework, simulation is stopped
 immediately after report with error severity, thus making this configuration
 parameter redundant.
\end_layout

\begin_layout Description
iterations Number of iterations that should be executed on single test.
 This value corresponds to 
\family roman
\shape italic
iterations
\family default
\shape default
 input of 
\family roman
\shape italic
CAN_test
\family default
\shape default
 entity.
\end_layout

\begin_layout Description
timeout Timeout on length of test run, before VUnit will abort the simulation.
\end_layout

\begin_layout Description
wave TCL file which displays most important signals of DUT in Wave window
 of Modelsim simulator.
 This parameter is used for manual debugging and bring-up of tests.
\end_layout

\begin_layout Section
5.5 Code coverage
\end_layout

\begin_layout Standard
GNU lcov engine is used to evaluate code coverage of CTU CAN FD source codes
 and test benches during automated runs in GitLab of CTU FEE.
 Refer to 
\begin_inset Quotes eld
\end_inset

test/Makefile
\begin_inset Quotes erd
\end_inset

 file with following target:
\end_layout

\begin_layout Quote
coverage: 
\end_layout

\begin_deeper
\begin_layout Quote
lcov --capture --directory build --output-file code_coverage.info
\end_layout

\begin_layout Quote
genhtml code_coverage.info --output-directory code_html 
\end_layout

\end_deeper
\begin_layout Standard
An example result of code coverage result is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Code-coverage-example]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Code-coverage-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /DOKUMENTY/Skola/CVUT-FEL/CAN_FD_IP_Core/doc/pics/Code_coverage_example.pdf
	lyxscale 20
	scale 45
	rotateAngle 270

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Code coverage example
\begin_inset CommandInset label
LatexCommand label
name "fig:Code-coverage-example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
5.6 Simulator settings
\end_layout

\begin_layout Standard
CANTest framework is using some simulator settings which are not default.
 These settings are required for proper functionality:
\end_layout

\begin_layout Itemize
default time unit is 
\begin_inset Quotes eld
\end_inset

fs
\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

ns
\begin_inset Quotes erd
\end_inset

.
 This setting is needed to simulate precise oscillator tolerance!
\end_layout

\begin_layout Section
5.7 Unit tests
\end_layout

\begin_layout Standard
Unit tests verify functionality of each circuit on its own, and compare
 it with expected functionality.
 Expected functionality is implemented in behavioral manner (as a circuit
 model or verification function).
 It is important that the circuit implementation and the behavioral model
 of circuit are very well separated, and share as little source code as
 possible! Basic architecture of each unit test is in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Unit_diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Unit_diagram"

\end_inset

 and can be summed up in following points:
\end_layout

\begin_layout Enumerate
Generate constrained random inputs to DUT (Device Under Test).
\end_layout

\begin_layout Enumerate
Observe circuit function.
\end_layout

\begin_layout Enumerate
Compare outputs of the circuit and outputs of the model or evaluation function.
\end_layout

\begin_layout Enumerate
If a mismatch between model and DUT occurs, increase error counter and report
 error log.
\end_layout

\begin_layout Enumerate
Repeat steps 1 to 4 until a certain number of iterations was reached.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/unit_test_diagram.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Unit test principle
\begin_inset CommandInset label
LatexCommand label
name "fig:Unit_diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each unit test has its own TCL script which adds the most important wave-forms
 to Wave window of Modelsim simulator.
 This Wave file is used for manual debugging of circuit or a test.
\end_layout

\begin_layout Standard
Each unit test must be located in a separate directory under 
\series bold
unit
\series default
 directory.
 The test directory (e.g CRC) must contain one 
\series bold
VHDL file
\series default
 which implements test architecture.
 TCL file with waveform configurations is optional, and it is mostly used
 for manual debugging of a test or circuit.
 Each unit test requires a separate run of simulator, since each unit test
 implements different DUT, thus simulated architecture is distinct in each
 unit test.
\end_layout

\begin_layout Subsection
5.7.1 How to add new unit test?
\end_layout

\begin_layout Standard
Following steps are recommended when creating new unit test in CANTest:
\end_layout

\begin_layout Enumerate
Create a new folder in unit folder.
\end_layout

\begin_layout Enumerate
Implement test as an architecture of 
\begin_inset Quotes eld
\end_inset

CAN_test
\begin_inset Quotes erd
\end_inset

.
 Note that test 
\series bold
must have 
\begin_inset Quotes eld
\end_inset

_tb
\begin_inset Quotes erd
\end_inset

 suffix
\series default
 in the name of VHDL file.
 It recommended to copy existing test and modify it to cover new functionality.
\end_layout

\begin_layout Enumerate
Copy existing TCL script from some unit test and modify the wave-forms to
 be observed.
\end_layout

\begin_layout Enumerate
Add test to one of configuration files under 
\begin_inset Quotes eld
\end_inset

unit/tests
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
5.7.2 Existing unit tests
\end_layout

\begin_layout Subsubsection
Bit Stuffing and Bit Destuffing
\end_layout

\begin_layout Standard
This unit test includes the unit test of Bit Stuffing and Bit De-stuffing
 circuit as well.
 Both circuits are connected in a chain, after 
\shape smallcaps
Bit Stuffing
\shape default
 serial data stream is fed to 
\shape smallcaps
Bit De-stuffing
\shape default
.
 In each step of unit test, random settings of both modules (length of 
\shape smallcaps
Bit Stuffing
\shape default
 Rule) and randomized bit sequence are generated (procedure
\family roman
\shape italic
 generate_bs_settings
\family default
\shape default
).
 To emulate insertion of extra Stuff Bit in the first bit of CAN FD CRC,
 some of bit sequences assume that at certain bit, Bit Stuffing method will
 change to Fixed Bit Stuffing.
 The presence / absence of change to Fixed Bit Stuffing is generated in
 
\family roman
\shape italic
set.change_to_fixed
\family default
\shape default
 variable.
 Length of standard Bit Stuffing is in 
\family roman
\shape italic
set.bc_non_fixed
\family default
\shape default
.
 Length of Fixed Bit Stuffing is in 
\family roman
\shape italic
set.bc_fixed
\family default
\shape default
.
 Note that generated bit sequence has higher probability (85 %) of equal
 value between two consecutive bits.
 This precaution makes sure that fair amount of Stuff Bits will be inserted
 and discarded during the test.
 A special assertion command is present to verify proper recursive behavior
 of Bit Stuffing.
\end_layout

\begin_layout Standard
SW model is realized via 
\family roman
\shape italic
calc_sw_bit_stuf_sequence
\family default
\shape default
 procedure which calculates expected bit sequence after bit stuffing in
 
\family roman
\shape italic
set.stuffed_data_seq
\family default
\shape default
 from generated bit sequence 
\family roman
\shape italic
set.tx_data_seq
\family default
\shape default
.
 Output of Bit Stuffing DUT is compared with expected output from model
 after each bit is fed to Bit Stuffing DUT.
 Furthermore upon insertion of 
\shape smallcaps
Stuff Bit
\shape default
, random bit-flip is added into bit stream (
\family roman
\shape italic
err_data
\family default
\shape default
) before Bit De-stuffing and verification of 
\shape smallcaps
Stuff Error
\shape default
 detection is performed (
\family roman
\shape italic
gen_st_error
\family default
\shape default
 process).
\end_layout

\begin_layout Subsubsection
Bus Sampling
\end_layout

\begin_layout Standard
Testbench generates random data sequences to be transmitted (as if coming
 from CAN Core) by 
\family roman
\shape italic
data_gen
\family default
\shape default
 process and appropriate Triggering Signals (with random 
\shape smallcaps
Bit-Rate
\shape default
 settings).
 Transmitted data on DUT output are inserted into a shift register that
 is realizing 
\shape smallcaps
Transceiver Delay
\shape default
 (
\family roman
\shape italic
tran_del_proc
\family default
\shape default
 process).
 Random errors are also inserted to this shift register (
\family roman
\shape italic
rand_ctr_noise_gen
\family default
\shape default
).
 Note that insertion of errors is forbidden for measurement of 
\shape smallcaps
Transceiver Delay
\shape default
 to avoid malfunction of measurement.
 This point is potentially week spot of CAN FD Protocol! The test has 3
 parts.
 
\end_layout

\begin_layout Standard
In the first part, Nominal Sampling is used and sampled data (
\family roman
\shape italic
data_rx
\family default
\shape default
) are compared with transmitted data (
\family roman
\shape italic
data_tx
\family default
\shape default
).
 
\family roman
\shape italic
bit_Error
\family default
\shape default
 output is also observed.
 If there is a mismatch between transmitted and sampled data and 
\family roman
\shape italic
bit_error
\family default
\shape default
 output is inactive, error in test is detected.
\end_layout

\begin_layout Standard
In the second part Data Sampling is used, but test sequence remains the
 same as in the first part.
\end_layout

\begin_layout Standard
In third part, Secondary Sampling is used and additional shift register
 is implemented in the test which stores the transmitted data (
\family roman
\shape italic
tran_del_sr
\family default
\shape default
).
 In the beginning of the third part, 
\shape smallcaps
Transceiver Delay
\shape default
 is measured by 
\family roman
\shape italic
trv_delay_calib
\family default
\shape default
 command (as coming from Protocol Control in Extended Data Length bit).
 Then, received data and delayed transmitted data are compared.
 Transmitted data are delayed by length of measured 
\shape smallcaps
Transceiver Delay
\shape default
.
 If a mismatch occurs, and 
\family roman
\shape italic
bit_error
\family default
\shape default
 output is not set by DUT, error is detected.
 Note that in the beginning of third part, no 
\shape smallcaps
Bit Errors
\shape default
 are generated during the time when 
\shape smallcaps
Transceiver Delay
\shape default
 is being measured.
 Also, only 
\shape smallcaps
Recessive
\shape default
 bits are generated for a short period at the beginning of third part.
 This is to simulate condition that during 
\shape smallcaps
Extended Data Length
\shape default
 bit 
\shape smallcaps
Nominal Bit-Rate
\shape default
 is still used, and 
\shape smallcaps
Transceiver Delay
\shape default
 is shorter than a 
\shape smallcaps
Nominal Bit Time
\shape default
.
 Refer to source code of the test for more detailed explanation.
\end_layout

\begin_layout Standard
This test thus verifies proper measurement of 
\shape smallcaps
Transceiver Delay
\shape default
, proper sampling of CAN Bus and 
\shape smallcaps
Bit Error
\shape default
 detection during 
\shape smallcaps
Secondary Sampling
\shape default
 
\shape smallcaps
Point
\shape default
.
\end_layout

\begin_layout Subsubsection
CRC
\end_layout

\begin_layout Standard
CRC unit test generates random bit sequence 10 to 620 bits long (
\family roman
\shape italic
gen_bit_sequence
\family default
\shape default
).
 It also generates random 
\family roman
\shape italic
drv_fd_type
\family default
\shape default
 setting.
 According to ISO FD standard, there is different starting value in CRC
 shift register in ISO CAN protocol as in non-ISO CAN protocol.
 Signal 
\family roman
\shape italic
drv_fd_type
\family default
\shape default
 distinguishes between these two options.
 Then CRC is calculated in software by 
\family roman
\shape italic
calc_crc
\family default
\shape default
 procedure.
 Afterwards, bit sequence is applied to DUT input.
 Triggering signals are generated by 
\family roman
\shape italic
sample_gen
\family default
\shape default
 process, and serial data are processed by CRC circuit.
 At the end, software calculated CRC and DUT output are compared.
 If these two are not equal, an error is detected.
\end_layout

\begin_layout Subsubsection
Event Logger
\end_layout

\begin_layout Standard
Testbench generates random event inputs on Status Bus by 
\family roman
\shape italic
ev_gen
\family default
\shape default
 process.
 An edge on each of generated events is evaluated by 
\family roman
\shape italic
ev_edge_proc
\family default
\shape default
 process.
 To emulate behavior of Event Logger, SW model in 
\family roman
\shape italic
ev_logger_model_proc
\family default
\shape default
 process is implemented.
 The process waits until Event Logger FSM is in state 
\family roman
\shape italic
running
\family default
\shape default
, and then fills 
\family roman
\shape italic
log_mod_mem
\family default
\shape default
 memory upon occurrence of event edge.
 Note that for loop which evaluates each event, is selected to count top
 to bottom, to achieve the same priority as Event Harvesting mechanism of
 DUT.
 The main test process 
\family roman
\shape italic
test_proc
\family default
\shape default
, generates random trigger settings by 
\family roman
\shape italic
generate_trigger_setting
\family default
\shape default
 and random logging settings by 
\family roman
\shape italic
generate_capture_setting
\family default
\shape default
.
 Upon the end of Event Logging (Event Logger FSM is in 
\family roman
\shape italic
config
\family default
\shape default
), contents of test memory is compared with Events read out from DUT by
 
\family roman
\shape italic
check_events
\family default
\shape default
 procedure.
\end_layout

\begin_layout Subsubsection
Interrupt Manager
\end_layout

\begin_layout Standard
Testbench generates random interrupt sources at any time by 
\family roman
\shape italic
src_gen
\family default
\shape default
 procedure.
 In each step random Interrupt settings are generated by 
\family roman
\shape italic
generate_commands
\family default
\shape default
 procedure.
 
\family roman
\shape italic
int_emu_proc
\family default
\shape default
 process calculates expected values on 
\family roman
\shape italic
int_out
\family default
\shape default
, 
\family roman
\shape italic
int_vector
\family default
\shape default
, 
\family roman
\shape italic
int_mask
\family default
\shape default
 and 
\family roman
\shape italic
int_ena
\family default
\shape default
 outputs.
 These outputs are compared with DUT output, and error is reported upon
 mismatch between DUT and expected output.
\end_layout

\begin_layout Subsubsection
Message Filter
\end_layout

\begin_layout Standard
Random input frame type and identifier are generated on input of DUT by
 
\family roman
\shape italic
generate_input
\family default
\shape default
 procedure.
 These inputs emulate received frame from CAN Core.
 Random filter settings are generated on Driving Bus by 
\family roman
\shape italic
generate_setting
\family default
\shape default
 procedure.
 Testbench waits for one clock cycle since there is one Flip-Flop on the
 output of Message Filter circuit.
 Then 
\family roman
\shape italic
validate
\family default
\shape default
 function is called, which compares DUT output and expected output.
 
\family roman
\shape italic
validate
\family default
\shape default
 function represents software model of Message Filter.
 If 
\family roman
\shape italic
false
\family default
\shape default
 is returned then an error is detected and reported.
\end_layout

\begin_layout Subsubsection
Prescaler
\end_layout

\begin_layout Standard
Prescaler testbench consists of 3 parts: Testing without 
\shape smallcaps
Resynchronization
\shape default
, Testing with 
\shape smallcaps
Resynchronization
\shape default
 and Testing of 
\shape smallcaps
Bit-Rate Shift
\shape default
.
 All there parts share the same 
\shape smallcaps
Bit-Rate
\shape default
 settings which are generated in the first part of the each test step by
 
\family roman
\shape italic
gen_bit_time_setting
\family default
\shape default
 procedure.
\end_layout

\begin_layout Standard
In the first part, 
\shape smallcaps
Resynchronization
\shape default
 is forbidden.
 Testbench measures number of clock cycles between two consecutive Transmit
 Triggers (which represent the moment of bit transmission, thus measuring
 length of bit) in 
\family roman
\shape italic
check_ctr
\family default
\shape default
 counter.
 Value of this counter is compared with expected value in 
\family roman
\shape italic
exp_dur
\family default
\shape default
.
 Note that value of 
\family roman
\shape italic
check_ctr
\family default
\shape default
 counter is calculated in clock cycles and not 
\shape smallcaps
Time Quanta
\shape default
! Upon mismatch between expected and real length of bit, error is reported.
\end_layout

\begin_layout Standard
In the second part, 
\shape smallcaps
Resynchronization
\shape default
 is allowed, and 
\shape smallcaps
Resynchronization Edges
\shape default
 are generated by 
\family roman
\shape italic
sync_gen_proc
\family default
\shape default
 process.
 Number of clock cycles between two consecutive Transmit Triggers is again
 counted, and compared with expected duration of bit with 
\shape smallcaps
Resynchronization
\shape default
 taken into account.
 Note that since 
\shape smallcaps
Resynchronization
\shape default
 operates on 
\shape smallcaps
Time Quantum,
\shape default
 not clock cycles thus mismatch between expected and real length of bit
 up to value of 
\shape smallcaps
Baud Rate Prescaler
\shape default
 is tolerated.
\end_layout

\begin_layout Standard
In the third part, length of 
\shape smallcaps
Bit Rate Shift
\shape default
 bit and 
\shape smallcaps
CRC Delimiter
\shape default
 bit is calculated, measured and evaluated.
 In 
\shape smallcaps
Bit Rate Shift
\shape default
 bit, 
\shape smallcaps
Bit-Rate
\shape default
 is switched in
\shape smallcaps
 Sample Point
\shape default
 from 
\shape smallcaps
Nominal Bit-Rate
\shape default
 to 
\shape smallcaps
Data Bit-Rate
\shape default
 and in 
\shape smallcaps
CRC Delimiter
\shape default
 bit vice-versa.
 Note that that delay of 2 clock cycles from Sample Trigger is emulated
 on change of 
\shape smallcaps
Bit-Rate
\shape default
 (
\family roman
\shape italic
sample_control
\family default
\shape default
).
 This part of test verifies proper behavior during change of 
\shape smallcaps
Bit-Rate
\shape default
.
\end_layout

\begin_layout Subsubsection
Protocol Control
\end_layout

\begin_layout Standard
Architecture of testbench is shown in a header of testbench itself.
 Random frame is generated on a input of DUT by 
\family roman
\shape italic
CAN_generate_frame
\family default
\shape default
.
 From this frame, expected bit sequence is calculated by 
\family roman
\shape italic
gen_sw_CAN
\family default
\shape default
 procedure.
 After generated frame is applied on the input of DUT, a frame is transmitted
 by DUT1 (
\family roman
\shape italic
tran_frame_valid_in_1
\family default
\shape default
).
 CAN bus level is monitored and transmitted bit sequence is recorded (
\family roman
\shape italic
record_bit_seq
\family default
\shape default
).
 Another DUT (DUT2) receives the frame and sends the 
\shape smallcaps
Acknowledge
\shape default
.
 After the transmission, expected and recorded bit sequence are compared.
 If there is any mismatch error is detected.
 Also, recieved frame (
\family roman
\shape italic
read_frame_from_test_mem
\family default
\shape default
) on the output of DUT2 is compared with original generated frame and mismatch
 also indicates an error.
 Note that transmitted bit sequence does not include 
\shape smallcaps
Stuff Bits
\shape default
, since 
\shape smallcaps
Stuff Bits
\shape default
 are inserted outside of Protocol Control!
\end_layout

\begin_layout Subsubsection
RX Buffer
\end_layout

\begin_layout Standard
RX Buffer unit test simulates received frame as if stored by CAN Core via
 RX Buffer commands.
 A random frame is generated and RX Buffer storing protocol is emulated
 by procedure 
\family roman
\shape italic
insert_frame_to_RX_Buffer
\family default
\shape default
.
 Upon successful storing of frame (
\family roman
\shape italic
rx_data_overrun
\family default
\shape default
 was not activated by DUT), CAN frame is also stored to Input test memory
 (
\family roman
\shape italic
in_mem
\family default
\shape default
) by 
\family roman
\shape italic
insert_frame_test_mem
\family default
\shape default
 procedure.
 Another process 
\family roman
\shape italic
data_reader
\family default
\shape default
 emulates SW, reading frames from RX Buffer, and storing them to Output
 test memory (
\family roman
\shape italic
out_mem
\family default
\shape default
).
 When both memories are filled (
\family roman
\shape italic
in_mem_full
\family default
\shape default
, 
\family roman
\shape italic
out_mem_full
\family default
\shape default
), data consistency checker process compares content of Input test memory
 and Output test memory.
 Upon mismatch, error is reported.
 Note that between two successive frame reads, testbench waits for random
 number of clock cycles by 
\family roman
\shape italic
wait_rand_cycles
\family default
\shape default
.
 This is to guarantee that RX Buffer data overrun will occur in some of
 the situations, and thus verifies proper operation of Data Overrun detection
 logic.
\end_layout

\begin_layout Subsubsection
TX Arbitrator
\end_layout

\begin_layout Standard

\color black
TX Arbitrator unit test models behavior of TXT Buffers by 
\family roman
\shape italic
buf_em_proc
\family default
\shape default
 process.
 This process randomly moves TXT Buffer between FSM states which are ready
 for transmission, and FSM states which are not ready for transmission (
\family roman
\shape italic
txt_buf_ready
\family default
\shape default
 signal).
 Buffers are filled (as if from SW) by 
\family roman
\shape italic
buf_acc_proc
\family default
\shape default
 process with random data.
 Content of Buffer model is stored in 
\family roman
\shape italic
shadow_mem
\family default
\shape default
 signal.
 Function of Priority Decoder is modeled by 
\family roman
\shape italic
prio_dec_model_proc
\family default
\shape default
 process which selects highest priority TXT Buffer in ready state.
 Selection of 
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_L_W]{TIMESTAMP
\backslash
textunderscore L
\backslash
textunderscore W}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[TIMESTAMP_U_W]{TIMESTAMP
\backslash
textunderscore U
\backslash
textunderscore W}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[FRAME_FORM_W]{FRAME
\backslash
textunderscore FORM
\backslash
textunderscore W}
\end_layout

\end_inset

 words from TXT Buffer is modeled by 
\family roman
\shape italic
tx_time_proc
\family default
\shape default
 process.
 Delay counter (
\family roman
\shape italic
del_counter
\family default
\shape default
) emulates delay of 6 cycles (3 selection states of TXT Buffer FSM * 2 cycles
 for each state), on the output of TX Arbitrator.
 To model commands from CAN Core on TXT Buffers and TX Arbitrator, 
\family roman
\shape italic
cmd_mod_proc
\family default
\shape default
 process is implemented.
 Lock and Unlock commands of 
\family roman
\shape italic
txt_hw_cmd
\family default
\shape default
 signal are randomly asserted upon presence of valid frame on output of
 DUT (
\family roman
\shape italic
tran_frame_valid_out
\family default
\shape default
).
 Processes which emulates TXT Buffers and CAN Core commands are connected
 to DUT, as well as processes modeling behavior of TX Arbitrator.
 Upon mismatch between outputs of DUT and SW models, error is detected by
 
\family roman
\shape italic
cmp_proc
\family default
\shape default
 process.
 Whole test is managed by 
\family roman
\shape italic
test_proc
\family default
\shape default
 process which generates random TXT Buffer priorities for each test step
 by 
\family roman
\shape italic
set_priorities
\family default
\shape default
 function.
\end_layout

\begin_layout Subsubsection

\color black
TXT Buffer
\end_layout

\begin_layout Standard

\color black
TXT Buffer unit test generates random data as if written by SW in 
\family roman
\shape italic
data_gen_proc
\family default
\shape default
 process.
 In each state where TXT Buffer is accessible, random CAN frame is stored
 to DUT and also to test memory (
\family roman
\shape italic
shadow_mem
\family default
\shape default
) which represents SW model of TXT Buffer.
 Access to TXT Buffer from CAN Core is emulated by 
\family roman
\shape italic
data_read_proc
\family default
\shape default
 process.
 If there is a mismatch between contents of data read from TXT Buffer and
 shadow memory, 
\family roman
\shape italic
data_coh_err_ctr
\family default
\shape default
 signal is set.
 SW and HW commands on TXT Buffer are modeled by commands_proc process which
 evaluates proper function of TXT Buffer FSM, reports error and asserts
 
\family roman
\shape italic
state_coh_error_ctr
\family default
\shape default
 upon upon mismatch.
 Whole unit test is controlled by 
\family roman
\shape italic
test_proc
\family default
\shape default
 process.
\end_layout

\begin_layout Section
5.8 Reference test
\end_layout

\begin_layout Standard
Reference test verifies operation of CTU CAN FD with reference controller.
 To achieve this, several sets of random CAN Frames were generated, transmitted
 by reference CAN FD controller, and recorded by logic analyzer.
 Each data set thus contains CAN Frame and according bit sequence which
 was transmitted by reference controller.
 Generation of CAN Frames, transmission by reference controller, control
 of logic analyzer and recording of data sets was executed by auxiliary
 utility Kvaalt Logger implemented in C (located in 
\begin_inset Quotes eld
\end_inset

tools
\begin_inset Quotes erd
\end_inset

 directory).
\end_layout

\begin_layout Standard
The architecture of Reference test is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:reference-test-block-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:reference-test-block-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 First 
\shape smallcaps
Bit-Rate
\shape default
 is configured by 
\family roman
\shape italic
CAN_configure_timing
\family default
\shape default
 procedure.
 At the moment, only one configuration is used (500 Kb/s in 
\shape smallcaps
Nominal Bit-Rate
\shape default
, 2 Mb/s in 
\shape smallcaps
Data Bit-Rate
\shape default
 and 80 % 
\shape smallcaps
Sample Point
\shape default
).
 Then, bit sequence (
\family roman
\shape italic
bit_sequence)
\family default
\shape default
 and CAN frame (
\family roman
\shape italic
TX_frame
\family default
\shape default
) are read from data set by 
\family roman
\shape italic
read_bit_sequence
\family default
\shape default
 function.
 Then Bit Generator (
\family roman
\shape italic
bit_gen_comp
\family default
\shape default
) is started.
 Bit Generator generates this sequence on CAN Bus which is connected to
 CTU CAN FD.
 Upon the end of generation (
\family roman
\shape italic
bit_gen_done = true
\family default
\shape default
), CTU CAN FD should have CAN FD frame received in RX Buffer.
 Frame is read from CTU CAN FD and compared with generated frame which was
 inserted to reference controller (
\family roman
\shape italic
TX_frame
\family default
\shape default
).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Reference_Block_diagram.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Reference test block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:reference-test-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
5.9 Feature tests
\end_layout

\begin_layout Standard
Feature tests examines functionality of CTU CAN FD which is created by cooperati
on of more circuits, and thus can not be tested in a unit test.
 An architecture of feature tests is different than in unit tests.
 First of all, feature tests have only one test environment, located in
 
\begin_inset Quotes eld
\end_inset

test/feature/tb_feature.vhd
\begin_inset Quotes erd
\end_inset

.
 Each feature test is then implemented as VHDL procedure in separate test
 file (e.g.
 test/feature/arbitration_feature_tb.vhd).
 The architecture of this test is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:Feature-test-env]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Feature-test-env"

\end_inset

.
 Two separate CTU CAN FD controllers (
\family roman
\shape italic
CAN_inst
\family default
\shape default
) are instantiated, and connected to CAN Bus in 
\family roman
\shape italic
CAN_feature_test
\family default
\shape default
 entity.
 Fixed transceiver delay is emulated (20 clock cycles) between 
\family roman
\shape italic
CAN_TX
\family default
\shape default
 and 
\family roman
\shape italic
CAN_RX
\family default
\shape default
 pins of CTU CAN FD via 
\family roman
\shape italic
tr_proc
\family default
\shape default
 process.
 Feature tests contain two separate clock sources with 0 ppm and 100 ppm
 oscillator tolerance (
\family roman
\shape italic
p(i).clk_sys
\family default
\shape default
).
 This setting is to make sure that 
\shape smallcaps
Resynchronization
\shape default
 between two CTU CAN FD nodes works properly.
 Each clock source is connected to one CTU CAN FD controller.
 Test interface to this environment is via two Avalon buses (
\family roman
\shape italic
mem_bus(i)
\family default
\shape default
) , one for each CTU CAN FD controller.
 Both nodes in feature test environment are configured with default values
 of Bit time registers.
 It is recommended not to modify this configuration.
 Several existing feature tests rely on default configuration to function
 properly (e.g.
 waiting times).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Feature_env.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Feature test environment
\begin_inset CommandInset label
LatexCommand label
name "fig:Feature-test-env"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each feature test is implemented in a standalone package.
 This package contains procedure with assignments to memory buses and observatio
ns of bus values or internal signals.
 Each procedure is called from 
\family roman
\shape italic
exec_feature_test
\family default
\shape default
 procedure in main test loop.
 Correct feature test procedure is selected based on the value in 
\family roman
\shape italic
test_name
\family default
\shape default
.
 This signal is set in beginning of each feature test execution.
\end_layout

\begin_layout Subsection
5.9.1 How to add new feature test?
\end_layout

\begin_layout Standard
Following steps must be taken when new feature test is added:
\end_layout

\begin_layout Enumerate
Copy existing feature test to new test file (e.g.
 arbitration_feature_tb.vhd)
\end_layout

\begin_layout Enumerate
Rename the package to have a unique name.
 Rename the procedure in the package accordingly.
 Note that test 
\series bold
must have 
\begin_inset Quotes eld
\end_inset

_tb
\begin_inset Quotes erd
\end_inset

 suffix
\series default
 in the name of VHDL file.
\end_layout

\begin_layout Enumerate
Implement feature test procedure by executing memory accesses to CTU CAN
 FD nodes in feature test environment.
 The variable 
\family roman
\shape italic
outcome
\family default
\shape default
 must be set to 
\family roman
\shape italic
true
\family default
\shape default
 if the test passed, and to 
\family roman
\shape italic
false
\family default
\shape default
 if the test failed.
 One execution of the procedure corresponds to one iteration of the test.
 If error is detected, it is good to report an error, since default behavior
 of actual test framework, is to finish execution upon log with error severity.
\end_layout

\begin_layout Enumerate
Add test name to YAML configuration file under 
\begin_inset Quotes eld
\end_inset

feature/tests
\begin_inset Quotes erd
\end_inset

 configuration.
\end_layout

\begin_layout Subsection
5.9.2 Existing feature tests
\end_layout

\begin_layout Standard
At the moment, following feature test are implemented for CTU CAN FD:
\end_layout

\begin_layout Itemize
abort_transmittion_feature_tb.vhd
\end_layout

\begin_layout Itemize
arbitration_feature_tb.vhd
\end_layout

\begin_layout Itemize
retr_limit_feature_tb.vhd
\end_layout

\begin_layout Itemize
byte_enable_feature_tb.vhd
\end_layout

\begin_layout Itemize
rtr_pref_feature_tb.vhd
\end_layout

\begin_layout Itemize
data_length_code_feature_tb.vhd
\end_layout

\begin_layout Itemize
rx_status_feature_tb.vhd
\end_layout

\begin_layout Itemize
fault_confinement_feature_tb.vhd
\end_layout

\begin_layout Itemize
spec_mode_feature_tb.vhd
\end_layout

\begin_layout Itemize
feature_env_setup.tcl
\end_layout

\begin_layout Itemize
forbid_fd_feature_tb.vhd
\end_layout

\begin_layout Itemize
timestamp_options_feature_tb.vhd
\end_layout

\begin_layout Itemize
interrupt_feature_tb.vhd
\end_layout

\begin_layout Itemize
traf_meas_feature_tb.vhd
\end_layout

\begin_layout Itemize
invalid_configs_feature_tb.vhd
\end_layout

\begin_layout Itemize
tran_delay_feature_tb.vhd
\end_layout

\begin_layout Itemize
overload_feature_tb.vhd
\end_layout

\begin_layout Itemize
tx_arb_time_tran_feature_tb.vhd
\end_layout

\begin_layout Itemize
bus_start_feature_tb.vhd
\end_layout

\begin_layout Standard
Each feature test is described within header of test implementation.
 Each test is described as sequence of steps, which are executed during
 feature test procedure.
 Refer to source code of each test for further description of each test.
\end_layout

\begin_layout Section
5.10 Sanity test
\begin_inset CommandInset label
LatexCommand label
name "sec-Sanity-test"

\end_inset


\end_layout

\begin_layout Standard
Sanity test simulates behavior of CTU CAN FD in environment which is close
 to real operation.
 Sanity test consists of 4 CTU CAN FD nodes (
\family roman
\shape italic
node_1_comp
\family default
\shape default
) connected on CAN Bus.
 It can be easily extended to more than 4 nodes.
 Block diagram of sanity test is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:sanity-block-diagram]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sanity-block-diagram"

\end_inset

.
 Sanity test has following features:
\end_layout

\begin_layout Itemize

\shape smallcaps
Transceiver Delay
\shape default
 modeling
\end_layout

\begin_layout Itemize
Real bus topology
\end_layout

\begin_layout Itemize
Oscillator tolerance simulation
\end_layout

\begin_layout Itemize
Noise generation
\end_layout

\begin_layout Itemize
Traffic emulation and data consistency evaluation
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/sanity_env.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sanity test block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:sanity-block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
5.10.1 Transciever delay
\begin_inset CommandInset label
LatexCommand label
name "subsec-Transciever-delay"

\end_inset


\end_layout

\begin_layout Standard

\family roman
\shape italic
CAN_TX
\family default
\shape default
 and 
\family roman
\shape italic
CAN_RX
\family default
\shape default
 ports of each CTU CAN FD are connected to Signal Delayer components (
\family roman
\shape italic
trv_del_gen_tx_delayer
\family default
\shape default
, 
\family roman
\shape italic
trv_del_gen_rx_delayer
\family default
\shape default
) which delay input signal by certain amount of time (
\family roman
\shape italic
delay
\family default
\shape default
 input).
 This feature is especially important in fast 
\shape smallcaps
Data Bit-Rate
\shape default
 where 
\shape smallcaps
Bit Time
\shape default
 is shorter than 
\shape smallcaps
Transceiver Delay
\shape default
.
 In order to find out how to configure 
\shape smallcaps
Transceiver Delay
\shape default
 refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Sanity-test"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsection
5.10.2 Bus topology
\begin_inset CommandInset label
LatexCommand label
name "subsec-Real-bus-topology"

\end_inset


\end_layout

\begin_layout Standard
To implement real delays on CAN Bus, Signal Delayer components are used
 in a matrix (
\family roman
\shape italic
i_txdelay
\family default
\shape default
 components), which emulates delay from 
\family roman
\shape italic
CAN_TX
\family default
\shape default
 pin of each CTU CAN FD to 
\family roman
\shape italic
CAN_RX
\family default
\shape default
 pin of each CTU CAN FD.
 Assuming 1 ns equals approximately 20 cm of electric signal transport delay,
 bus lengths have resolution 10 cm.
 Delayed signal from each transciever is connected via AND gate to each
 receiver.
 Length of the delay is given by 
\series bold
Bus Matrix
\series default
:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $M_{B}=\left[\begin{array}{cccc}
0 & d_{12} & d_{13} & d_{14}\\
d_{21} & 0 & d_{23} & d_{24}\\
d_{31} & d_{32} & 0 & d_{34}\\
d_{41} & d_{42} & d_{43} & 0
\end{array}\right]$
\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $d_{ab}$
\end_inset

 is the delay from the 
\family roman
\shape italic
CAN_TX
\family default
\shape default
 pin 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 to 
\family roman
\shape italic
CAN_RX
\family default
\shape default
 pin 
\begin_inset Quotes eld
\end_inset

b
\begin_inset Quotes erd
\end_inset

.
 Each row of matrix represents delay from one node to other nodes.
 In general case, Bus Matrix (
\family roman
\shape italic
bus_matrix
\family default
\shape default
) is n*n matrix where 
\begin_inset Quotes eld
\end_inset

n
\begin_inset Quotes erd
\end_inset

 is the amount of CTU CAN FD Controllers on the bus.
 Note that diagonal of Bus Matrix is equal to zero.
 
\shape smallcaps
Transciever Delay
\shape default
 is already modeled before the node is connected to the bus.
 Bus Matrix is symmetrical along its main diagonal.
 Delay from Node A to Node B is equal to delay from Node B to Node A.
 Bus Matrix can describe every configuration of the Bus with N controllers.
 Bus topology in sanity test does not simulate any analog effects, its purpose
 is to simulate delay caused by finite speed of electrical signal propagation.
 In order to simplify the Bus Matrix calculation, most common topologies
 are implemented in sanity test.
\end_layout

\begin_layout Subsubsection
Bus
\end_layout

\begin_layout Standard
Bus topology is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:bus_topology]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bus_topology"

\end_inset

.
 Bus Matrix for Bus topology is:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $M_{B}=\left[\begin{array}{cccc}
0 & l_{1} & l_{1}+l_{2} & l_{1}+l_{2}+l_{3}\\
l_{1} & 0 & l_{2} & l_{2}+l_{3}\\
l_{1}+l_{2} & l_{2} & 0 & l_{3}\\
l_{1}+l_{2}+l_{3} & l_{2}+l_{3} & l_{3} & 0
\end{array}\right]$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/bus_topology.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Bus topology
\begin_inset CommandInset label
LatexCommand label
name "fig:bus_topology"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Star
\end_layout

\begin_layout Standard
Star topology is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:star_topology]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:star_topology"

\end_inset

.
 Bus Matrix for Star topology is :
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $M_{B}=\left[\begin{array}{cccc}
0 & l_{1}+l_{2} & l_{1}+l_{3} & l_{1}+l_{4}\\
l_{1}+l_{2} & 0 & l_{2}+l_{3} & l_{3}+l_{4}\\
l_{1}+l_{3} & l_{2}+l_{3} & 0 & l_{3}+l_{4}\\
l_{1}+l_{4} & l_{2}+l_{4} & l_{3}+l_{4} & 0
\end{array}\right]$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/star_topology.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Star topology
\begin_inset CommandInset label
LatexCommand label
name "fig:star_topology"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Tree 
\end_layout

\begin_layout Standard
Tree topology is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:tree_topology]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:tree_topology"

\end_inset

.
 Bus Matrix for Tree topology is :
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $M_{B}=\left[\begin{array}{cccc}
0 & l_{1}+l_{2} & l_{1}+l_{3}+l_{5} & l_{1}+l_{4}+l_{5}\\
l_{1}+l_{2} & 0 & l_{2}+l_{3}+l_{5} & l_{2}+l_{4}+l_{5}\\
l_{1}+l_{3}+l_{5} & l_{2}+l_{3}+l_{5} & 0 & l_{3}+l_{4}\\
l_{1}+l_{4}+l_{5} & l_{2}+l_{4}+l_{5} & l_{3}+l_{4} & 0
\end{array}\right]$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/tree_topology.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tree topology
\begin_inset CommandInset label
LatexCommand label
name "fig:tree_topology"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Ring 
\end_layout

\begin_layout Standard
Ring topology is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:ring_topology]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ring_topology"

\end_inset

.
 Bus matrix for Ring topology is :
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $M_{B}=\left[\begin{array}{cccc}
0 & min(l_{1},l_{2}+l_{3}+l_{4}) & min(l_{1}+l_{2},l_{3}+l_{4}) & min(l_{4},l_{1}+l_{2}+l_{3})\\
min(l_{1},l_{2}+l_{3}+l_{4}) & 0 & min(l_{2},l_{1}+l_{3}+l_{4}) & min(l_{2}+l_{3},l_{1}+l_{4})\\
min(l_{1}+l_{2},l_{3}+l_{4}) & min(l_{2},l_{1}+l_{3}+l_{4}) & 0 & min(l_{3},l_{1}+l_{2}+l_{4})\\
min(l_{4},l_{1}+l_{2}+l_{3}) & min(l_{2}+l_{3},l_{1}+l_{4}) & min(l_{3},l_{1}+l_{2}+l_{4}) & 0
\end{array}\right]$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/ring_topology.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ring topology
\begin_inset CommandInset label
LatexCommand label
name "fig:ring_topology"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Custom
\end_layout

\begin_layout Standard
In custom topolgy user/tester can set arbitrary values to Bus Matrix.
 Bus Matrix in custom topology is:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Formula $M_{B}=\left[\begin{array}{cccc}
0 & l_{1} & l_{2} & l_{3}\\
l_{1} & 0 & l_{4} & l_{5}\\
l_{2} & l_{4} & 0 & l_{6}\\
l_{3} & l_{5} & l_{6} & 0
\end{array}\right]$
\end_inset


\end_layout

\begin_layout Subsection
5.10.3 Oscillator tolerance
\begin_inset CommandInset label
LatexCommand label
name "subsec-Oscillator-tollerance"

\end_inset


\end_layout

\begin_layout Standard
Each controller in sanity test environment has separate clock source with
 100 MHz frequency.
 Since oscillators in real devices are not ideal, oscillator tolerance needs
 to be simulated.
 Each controllers clock has its own tolerance in ppm.
 Each tolerance is maximal possible tolerance, that means the clock is generated
 with this error.
 This approach covers the worst possible case that can happen.
 In order to properly simulate oscillator tolerance time resolution, default
 time unit of simulator must be set to 
\begin_inset Quotes eld
\end_inset

fs
\begin_inset Quotes erd
\end_inset

.
 If set to 
\begin_inset Quotes eld
\end_inset

ps
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

ns
\begin_inset Quotes erd
\end_inset

, error in each clock cycle is lower than shortest time unit, and will be
 rounded to zero and 
\family roman
\shape italic
clk_sys
\family default
\shape default
 of all controllers will have frequency exactly 100 MHz! During the simulation,
 it is possible to check whether oscillator tolerance is used properly.
 If two nodes have different oscillator tolerance, then according input
 timestamp signals should reach different values after simulation runs for
 some time.
 In order to find out how to configure oscillator tolerance refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Sanity-test"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
5.10.4 Noise generation
\begin_inset CommandInset label
LatexCommand label
name "subsec-Noise-generation"

\end_inset


\end_layout

\begin_layout Standard
In order to simulate glitches on the bus, random binary noise is generated
 on 
\family roman
\shape italic
CAN_RX
\family default
\shape default
 pins of each CTU CAN FD.
 When noise glitch is generated, there is 50 % probability it will be received
 on 
\family roman
\shape italic
CAN_RX
\family default
\shape default
 pin of each CTU CAN FD instance.
 Glitches are not received by all nodes uniquely in order to distinguish
 between global (all nodes receive glitch) and local (only some nodes receive
 glitch) errors.
 Once a glitch is received (signal 
\family roman
\shape italic
noise_force
\family default
\shape default
), unit receives only generated value of noise, thus it is possible to receive
 
\shape smallcaps
Recessive
\shape default
 value when 
\shape smallcaps
Dominant
\shape default
 value is on the bus.
 Noise generator has two parameters: Noise width and Noise gap.
 Noise width is the length of generated glitch.
 Noise gap is time between two generated glitches.
 Noise width follows Gaussian distribution and Noise gap follows Exponential
 distribution.
 Noise generation can be configured by following parameters:
\end_layout

\begin_layout Description
nw_mean Mean value of Noise width (in nanoseconds)
\end_layout

\begin_layout Description
nw_var Variance of Noise width (in nanoseconds)
\end_layout

\begin_layout Description
ng_mean Mean value of Noise gap (in nanoseconds)
\end_layout

\begin_layout Description
ng_var Variance of Noise gap (in nanoseconds)
\end_layout

\begin_layout Standard
Each configuration parameter corresponds to VHDL signal.
 To find out how to configure these parameters refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Sanity-test"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
5.10.5 Traffic emulation and data consistency evaluation
\begin_inset CommandInset label
LatexCommand label
name "subsec-Traffic-emulation"

\end_inset


\end_layout

\begin_layout Standard
Sanity test generates random CAN frames and inserts these frames to be transmitt
ed on the CAN bus by 
\family roman
\shape italic
node_access_proc
\family default
\shape default
 process.
 Each frame that is inserted to node (
\family roman
\shape italic
CAN_send_frame
\family default
\shape default
), is also inserted to according TX memory (
\family roman
\shape italic
store_frame_to_test_mem
\family default
\shape default
 procedure, 
\family roman
\shape italic
tx_mems
\family default
\shape default
 signal).
 The content of TX memories monitors which frames were sent on the bus.
 Sanity test reads received frames from CAN Nodes (
\family roman
\shape italic
CAN_read_frame
\family default
\shape default
) and stores them into RX memories (
\family roman
\shape italic
store_frame_to_test_mem
\family default
\shape default
 procedure, 
\family roman
\shape italic
rx_mems
\family default
\shape default
 signal).
 After TX memories are filled, traffic generation is finished.
 In order for sanity test to pass, the data consistency must be kept.
 Each frame which was transmitted by any node must be received by all other
 nodes! Contents of TX and RX memories are compared and data consistency
 is evaluated (
\family roman
\shape italic
check_memories
\family default
\shape default
).
 One iteration of Sanity test (with given configuration) can be summed up
 in following steps:
\end_layout

\begin_layout Enumerate
Generate frames and insert them to CAN Nodes.
\end_layout

\begin_layout Enumerate
Wait until all frames are received or unit turned 
\shape smallcaps
Error Passive 
\shape default
(indicates heavily disturbed bus).
\end_layout

\begin_layout Enumerate
Compare TX Memories and RX Memories contents for data consistency.
 If any frame was not properly received or dropped, error is detected and
 test fails.
\end_layout

\begin_layout Subsection
5.10.6 Sanity test configuration
\begin_inset CommandInset label
LatexCommand label
name "subsec-Sanity-test"

\end_inset


\end_layout

\begin_layout Standard
Sanity test can be configured by default YAML config attributes which are
 common for whole CANTest framework and described in 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec-common-Test-configuration"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Apart from these attributes, there are special attributes which are used
 for configuration of sanity test:
\end_layout

\begin_layout Description
topology Bus topology used in this configuration.
 Valid values are : 
\begin_inset Quotes eld
\end_inset

bus
\begin_inset Quotes erd
\end_inset

 , 
\begin_inset Quotes eld
\end_inset

star
\begin_inset Quotes erd
\end_inset

 , 
\begin_inset Quotes eld
\end_inset

tree
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ring
\begin_inset Quotes erd
\end_inset

.
 For more information about topologies refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Real-bus-topology"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Description
bus_len_v Length of the bus segments 
\begin_inset Formula $l_{1}$
\end_inset

 to 
\begin_inset Formula $l_{6}$
\end_inset

.
 These parameters have a different meaning for each topology.
 Please refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Real-bus-topology"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to find out the exact meaning of these parameters.
 Please note that if a parameter is not used in Bus Matrix then it can have
 arbitrary value.
\end_layout

\begin_layout Description
trv_del_v Transciever delays of each node in multiples of 10 ns (e.g.
 transciever delay = 220 ns , then td(n)=22).
 Refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Transciever-delay"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Description
osc_tol_v Oscillator errors (maximal tolerance) of each node in ppm.
 Refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec-Oscillator-tollerance"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Description
nw_mean Mean value of noise width (ns).
\end_layout

\begin_layout Description
nw_var Variance of noise width (ns).
\end_layout

\begin_layout Description
ng_mean Mean value of gap between two noise glitches (ns).
\end_layout

\begin_layout Description
ng_var Variance of between two noise glitches (ns).
\end_layout

\begin_layout Description
brp 
\shape smallcaps
Baud Rate Prescaler
\shape default
 in 
\shape smallcaps
Nominal Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR]{BTR[BRP]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
brp_fd 
\shape smallcaps
Baud Rate Prescaler
\shape default
 in 
\shape smallcaps
Data Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR_FD]{BTR
\backslash
textunderscore FD[BRP
\backslash
textunderscore FD]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
prop Length of 
\shape smallcaps
Propagation
\shape default
 segment in 
\shape smallcaps
Nominal Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR]{BTR[PROP]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
ph1 Length of 
\shape smallcaps
Phase 1
\shape default
 segment in 
\shape smallcaps
Nominal Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR]{BTR[PH1]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
ph2 Length of 
\shape smallcaps
Phase 2
\shape default
 segment in 
\shape smallcaps
Nominal Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR]{BTR[PH2]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
sjw Length of 
\shape smallcaps
Synchronization Jump Width
\shape default
 in 
\shape smallcaps
Nominal Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR]{BTR[SJW]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
prop_fd Length of 
\shape smallcaps
Propagation
\shape default
 segment in 
\shape smallcaps
Data Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR_FD]{BTR
\backslash
textunderscore FD[PROP
\backslash
textunderscore FD]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
ph1_fd Length of 
\shape smallcaps
Phase 1
\shape default
 segment in 
\shape smallcaps
Data Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR_FD]{BTR
\backslash
textunderscore FD[PH1
\backslash
textunderscore FD]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
ph2_fd Length of 
\shape smallcaps
Phase 2
\shape default
 segment in 
\shape smallcaps
Data Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR_FD]{BTR
\backslash
textunderscore FD[PH2
\backslash
textunderscore FD]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
sjw_fd Length of 
\shape smallcaps
Synchronization Jump Width
\shape default
 in 
\shape smallcaps
Data Bit-Rate
\shape default
.
 Corresponds to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[BTR_FD]{BTR
\backslash
textunderscore FD[SJW
\backslash
textunderscore FD]}
\end_layout

\end_inset

 register.
\end_layout

\begin_layout Description
desc Description of this configuration.
\end_layout

\begin_layout Standard
Sample screen shot which describes sanity test configuration in YAML file
 is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:sanity_config_example]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sanity_config_example"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Sanity_cfg.pdf
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sanity test example configuration
\begin_inset CommandInset label
LatexCommand label
name "fig:sanity_config_example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
6.
 Synthesis
\end_layout

\begin_layout Standard
CTU CAN FD Synthesis was evaluated towards Cyclone V FPGA Family (Intel)
 and Zynq family (Xilinx).
 CTU CAN FD was not synthesized for ASIC production at the moment.
 Design size and performance depends on configuration constants.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab:synthesis-intel]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:synthesis-intel"

\end_inset

 shows results for synthesis in Intel Cyclone V family, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[tab:synthesis-xilinx]{Table }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:synthesis-xilinx"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows result for synthesis in Xilinx Zynq family.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="8">
<features tabularvalignment="top">
<column alignment="center" valignment="middle" width="1.8cm">
<column alignment="center" valignment="middle" width="1.3cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2.6cm">
<column alignment="center" valignment="middle" width="1.5cm">
<column alignment="center" valignment="middle" width="1.5cm">
<column alignment="center" valignment="middle" width="1.5cm">
<column alignment="center" valignment="middle" width="1.5cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer size [words]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logger size [events]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supported filters [value, range]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LUTs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LC Registers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory bits
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ALMs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximal frequency [MHz]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2601
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1928
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3744
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1831
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
97.74
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
256
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2,0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2813
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2109
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12032
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1990
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
102.29
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4096
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3022
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2316
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
154112
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2176
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
105.98
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4096
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3301
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2514
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
154616
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2382
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
101.88
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4096
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3448
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2585
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
158144
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2471
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
98.29
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Synthesis results in Intel Cyclone V FPGA
\begin_inset CommandInset label
LatexCommand label
name "tab:synthesis-intel"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="8">
<features tabularvalignment="top">
<column alignment="center" valignment="middle" width="1.8cm">
<column alignment="center" valignment="middle" width="1.3cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2.6cm">
<column alignment="center" valignment="middle" width="1.5cm">
<column alignment="center" valignment="middle" width="1.5cm">
<column alignment="center" valignment="middle" width="1.5cm">
<column alignment="center" valignment="middle" width="1.5cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer size [words]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logger size [events]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supported filters [value, range]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LC Combinationals 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LC Registers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory bits
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ALMs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximal frequency [MHz]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
256
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2,0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4096
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4096
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4096
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Synthesis results in Xilinx Zynq FPGA
\begin_inset CommandInset label
LatexCommand label
name "tab:synthesis-xilinx"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
7.
 FPGA Verification
\end_layout

\begin_layout Standard
The functionality of CAN FD IP Core is verified in real hardware manually
 at the moment.
 Future certification according to ISO 16845-1 2016 is planned in cooperation
 with industrial partners.
 At the moment, core is recommended for FPGA implementation only.
 Build of automated CAN testing network (HIL) is being planned in cooperation
 with CTU FEE.
\end_layout

\begin_layout Standard
CTU CAN FD was communicating with following devices which implement CAN
 FD Protocol:
\end_layout

\begin_layout Itemize
CANoe USB/CAN device from Vector Informatik GmbH.
\end_layout

\begin_layout Itemize
Open source SJA1000 Implementation by Igor Mohor , from 
\begin_inset CommandInset href
LatexCommand href
name "www.opencores.org"
target "www.opencores.org"
literal "false"

\end_inset

.
\end_layout

\begin_layout Itemize
SJA1000 chips from Philips semiconductors.
\end_layout

\begin_layout Itemize
Kvaser Memorator Pro 2xHS v2 which is used for Reference test.
 ISO CAN FD protocol was used.
\end_layout

\begin_layout Itemize
Atmel SAMV71 Ultra development board.
 NON ISO CAN FD protocol was used.
\end_layout

\begin_layout Standard
Several Bit-rates were tested during this testing:
\end_layout

\begin_layout Itemize
250 kbit/s 
\shape smallcaps
Nominal Bit-Rate
\shape default
, 1 Mbit/s 
\shape smallcaps
Data Bit-Rate.
\end_layout

\begin_layout Itemize
500 kbit/s 
\shape smallcaps
Nominal Bit-Rate
\shape default
, 2 Mbit/s 
\shape smallcaps
Data Bit-Rate.
\end_layout

\begin_layout Itemize
1 Mbit/s 
\shape smallcaps
Nominal Bit-Rate
\shape default
, 2 Mbit/s 
\shape smallcaps
Data Bit-Rate.
\end_layout

\begin_layout Standard
Faster bit rates were not examined in real hardware since used transceivers
 did not support bit-rates over 2 Mbit/s (TJA1041 supports only 1 Mbit/s,
 but it has proven to be functional at 2 Mbit/s).
 An experimental test setup is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:test_setup]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:test_setup"

\end_inset

.
 An example of frame sampled by Signal Tap II logic analyzer in Intel FPGA
 is shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[fig:frame_example]{Figure }
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:frame_example"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/0p5MB_2MB.png
	lyxscale 20
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sampled 64 byte frame
\begin_inset CommandInset label
LatexCommand label
name "fig:frame_example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Test_setup/IMG_20160902_174031.jpg
	lyxscale 20
	scale 19
	rotateAngle 270

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test setup
\begin_inset CommandInset label
LatexCommand label
name "fig:test_setup"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
7.
 Linux driver
\end_layout

\begin_layout Standard
TODO by Martin Jerabek.
\end_layout

\begin_layout Chapter
8.
 Known issues and future work
\end_layout

\begin_layout Standard
CTU CAN FD has many features which are not required by CAN FD specification.
 However there is still room for improvement.
 Following list names possible improvements:
\end_layout

\begin_layout Itemize
Extend Python register generator with generation of VHDL register module.
 This module would be instantiated in Memory Registers and connected to
 Driving Bus and Status Bus.
\end_layout

\begin_layout Itemize
Automate design of Driving Bus and Status Bus.
 These would be described in IP-XACT and signal list would be generated
 automatically (including documentation).
 Another approach would be to remove Driving Bus and Status Bus completely
 and use generated structure throughout the design.
\end_layout

\begin_layout Itemize
Generate automated description of tests from headers of testbench source
 code.
\end_layout

\begin_layout Itemize
Extend reference test to also transmission of CAN frame by CTU CAN FD.
 Bit sequence would be also compared with reference sequence (with small
 error allowed).
\end_layout

\begin_layout Itemize
Implement second memory interface on CTU CAN FD.
 This interface would be a master interface and could perform DMA operations
 to/from main memory on transmission/reception.
 Implement additional registers for configuration of DMA engine.
 Add DMA support to Linux driver.
\end_layout

\begin_layout Itemize
Perform standardization of CTU CAN FD according to ISO 16845-1 2016 standard.
\end_layout

\begin_layout Itemize
Implement automatic 
\shape smallcaps
Bit-Rate
\shape default
 detection, either as part of CTU CAN FD or separate module.
 Once the unit would be turned on, it would measure 
\shape smallcaps
Bit-Rate
\shape default
 (e.g.
 over several frames) and provide the results, or even set bus timing registers.
\end_layout

\begin_layout Itemize
Implement additional state machine which would decide about usage of 
\shape smallcaps
Data Bit-Rate
\shape default
 based on relative error rate of two 
\shape smallcaps
Bit-Rates
\shape default
.
\end_layout

\begin_layout Chapter
Appendix A - Driving bus signals
\begin_inset CommandInset label
LatexCommand label
name "chap:Appendix-A--"

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="34" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0-5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_tq_nbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time quantum length, Nominal bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6-11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_tq_dbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time quantum length, Nominal bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17-12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_prs_nbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Propagation segment length , Nominal bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18-23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_ph1_nbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Phase 1 segment length, Nominal bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24-29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_ph2_nbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Phase 2 segment length, Nominal bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30-33
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_prs_dbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Propagation segment length , Data bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34-37
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_ph1_dbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Phase 1 segment length, Data bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
38-41
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_ph2_dbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Phase 2 segment length, Data bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
42-45
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_sjw_nbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronisation jump width, Nominal bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
46-49
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_sjw_dbt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prescaler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronisation jump width, Data bit time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50-60
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
61-80
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
81-109
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_A_mask
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mask for filter A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110-113
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_A_ctrl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allowed frames for filter A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
114-142
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_A_bits
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bits to compare for filter A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
171-143
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_B_mask
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mask for filter B
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
175-172
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_B_ctrl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allowed frames for filter B
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
204-176
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_B_bits
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bits to compare for filter B
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
205-233
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_C_mask
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mask for filter C
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
234-237
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_C_ctrl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allowed frames for filter C
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
238-266
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_C_bits
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bits to compare for filter C
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
267-270
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_ran_ctrl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allowed frames for range filter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
271-299
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_ran_lo_th
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Low range treshold for range filter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
300-328
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_ran_hi_th
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
High range treshold for range filter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
329
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_filter_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable applying message filters.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
330-349
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
350
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_erase_rx
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erase recieved buffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
351
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
352
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_read_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Move to next word in recieve buffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
353
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_clr_ovr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX Buffer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clear Overrun flag
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
351-355
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
356
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_erase_txt1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erase message in TXT 1 buffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
357
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_store_txt1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store message in registers into TXT 1 buffer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="45" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
358
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_erase_txt2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erase message in TXT 2 buffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
359
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_store_txt2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Buffer 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store message in registers into TXT2 buffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
360
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
361
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_allow_txt1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Arbitrator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allow sending messages from TXT1 buffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
362
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_allow_txt2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXT Arbitrator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allow sending messages from TXT2 buffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
363-365
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
366
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_write_tx
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Buffer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
367
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_write_rx
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX Buffer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
368-371
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
372
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_sam
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus Synchron.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tripple sampling for slow speeds
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
373-375
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
376
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_bus_err_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable Bus error interrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
377
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_arb_lst_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable Arbitration lost interrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
378
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_err_pas_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable Fault confinement state changed interrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
379
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_wake_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
380
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_dov_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable Data overrun interrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
381
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_err_war_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable Error warning limit reached interrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
382
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_tx_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable sucessfull transcieve interrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
383
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_rx_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable logging finished interrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
384
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_log_fin_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable sucessfull recieve interrupt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
385
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_brs_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable bit rate shift interrutpt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
386
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_rx_full_int_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable interrupt when recieve buffer is full
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
387
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_int_vect_erase
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interrupt manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command to erase interrupt vector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
388-399
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
400-407
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_ewl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fault confinement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error warning limit (by standard 96)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
408-415
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_erp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fault confinement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error passive treshold (by standard 128)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
424-416
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_ctr_val
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fault confinement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value for presetting error counter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
428-425
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_ctr_sel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fault confinement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Control signals, which counters to preset
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
459-429
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
460
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_CAN_fd_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enable recieve of CAN FD frames
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
461
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_rtr_pref
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RTR preffered behaviour
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
462-464
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
465
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_retr_lim_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Retransmittion limit of errornous frames is enabled
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
466-469
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_retr_th
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Retransmittion treshold
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
470
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_bus_mon_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bus monitoring mode
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
471
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_self_test_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Self Test mode
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
472
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_abort_tran
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Immediately abort actual transmittion
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
473
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_set_rx_ctr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Preset sucessfully recieved messages counter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
474
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_set_tx_ctr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Preset sucessfully transcieved messages counter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
475-506
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_set_ctr_val
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value for presetting RX and TX counter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
507
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_ack_forb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acknowledge sending is forbidden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
508
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_int_loopback_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAN Core
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Internal loopback is enabled
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
509-519
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
520-551
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_config_data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal is not used
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="46" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
552
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_sof
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on Start of frame
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
553
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_arb_lost
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on Arbitration lost
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
554
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_rec_valid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on sucesfull recieve
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
555
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_tran_valid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on sucesfull transcieve
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
556
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_ovl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on overload frame transcieved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
557
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on error appeared
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
558
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_brs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on bit rate shifted
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
559
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_user_write
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger by logic 1 in this signal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
560
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_arb_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on Arbitration field start
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
561
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_contr_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on Control field start
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
562
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_data_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on Data field start
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
563
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_crc_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on CRC field start
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
564
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_ack_rec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on acknowledge recieved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
565
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_ack_n_rec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on acknowledge was not recieved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
566
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_ewl_reached
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on error warning limit was reached
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
567
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_erp_changed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on error passive state changed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
568
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_tran_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on transmittion started
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
569
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_trig_rec_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Trigger on reception started
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
570-579
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
580
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_sof
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture Start of Frame
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
581
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_arb_lost
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture Arbitration lost
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
582
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_rec_valid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture that message was recieved valid
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
583
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_tran_valid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture that message was transcieved valid
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
584
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_ovl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when overload frame is transmitted
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
585
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
crv_cap_error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when error appears
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
586
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_brs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when bit rate is shifted
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
587
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_arb_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when Arbitration field starts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
588
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_contr_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when Control field starts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
589
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_data_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when Data field starts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
590
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_crc_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when CRC field starts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
591
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_ack_rec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when Acknowledge was recieved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
592
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_ack_n_rec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when Acknowledge was not recieved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
593
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_ewl_reached
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when Error warning limit was reached
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
594
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_erp_changed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when Fault confinement state has changed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
595
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_tran_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when Transmittion starts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
596
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_sap_rec_start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture when reception starts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
597
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_sync_edge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture that Synchronisation edge appeared
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
598
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_stuffed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture that stuff bit was inserted
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
599
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_destuffed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture that bit was destuffed from stream
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
600
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_cap_ovr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capture that data overrun appeared
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
601-609
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
610
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_log_cmd_str
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command to start capturing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
611
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_log_cmd_abt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command to abort capturing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
612
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_log_cmd_up
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command to move read pointer up
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
613
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
drv_log_cmd_down
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event logger
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command to move read pointer down
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
Appendix B - Status bus signals
\begin_inset CommandInset label
LatexCommand label
name "chap:Appendix-B--"

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="31" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_OP_State
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operation state 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2-5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_PC_State
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol Control state 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_arb_lost
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arbitration was lost
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_set_trans
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit is set as transciever from next clock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_set_rec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit is set as reciever from next clock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_is_idle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit is idle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10-11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_sp_control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sample point control
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_ssp_reset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Secondary sample point reset
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_trv_delay_calib
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transciever delay calibration enabled
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14-15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_sync_control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synchronisation control
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_data_tx
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transcieved data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_data_rx
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieved data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_bs_enable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing enable
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_fixed_stuff
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fixed stuffing method is applied
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_data_halt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit was stuffed, transmitting should be halted
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21-23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_bs_length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit stuffing length
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_stuff_error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stuff Error appeared
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_destuffed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit is destufffed, shouldntbe recorded by Protocol control
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_bds_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit destuffing is enabled
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_stuff_error_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Stuffing error detection enabled
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_fixed_destuff
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fixed destuffing method should be used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29-31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_bds_length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit destuffing length
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-60
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tran_ident
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transcieved identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
61-64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tran_dlc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transcieved dlc
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
65
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tran_is_rtr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transcieved frame is rtr
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
66
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tran_frame_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transcieved frame type (normal or FD frame)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
67
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tran_ident_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transcieved identifier type (basic or extended)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
68
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tran_data_ack
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acknowledge for TXT buffers, TX data are stored in internal buffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
69
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tran_brs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transcieved message should shift bitrate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
70
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_frame_store
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Command to store input frame for transcieve
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="37" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
71-79
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tx_counter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TX error counter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
80
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
81-89
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rx_counter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RX error counter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
90-98
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_error_counter_norm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error counter for errors appeared in nominal bit rate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
99-107
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_error_counter_fd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error counter for errors appeared in data bit rate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
108-109
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_error_state
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fault confinement state
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_form_error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Form error appeared
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
111
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_crc_error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC error appeared
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
112
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_ack_error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acknowledge error appeared
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
113
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_unknown_state_error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocol control is in undefined state
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
114
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_bit_stuff_error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit or Stuff error appeared
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
115
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_first_bit_after
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
116
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_valid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message was recieved valid
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
117
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tran_valid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Message was transcieved valid
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
118
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_const7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
119
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_const14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
120
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_transm_error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
121-149
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_ident_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieved identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
150-153
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_dlc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieved data length code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
154
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_is_rtr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieved frame is rtr
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
155
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_frame_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieved frame type (normal or FD)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
156
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_ident_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieved identifier type (basic or extended) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
157
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_brs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieved frame with bit rate shift
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
158-178
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_crc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieved CRC value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
179
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_esi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieverd Error state indicator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
180
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_crc_ena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRC calculation is enabled
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
181
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tran_trig
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transcieve trigger (in sync segment)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
182
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rec_trig
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recieve trigger (in sample point)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
183-187
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_alc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arbitration lost capture
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
188-219
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_rx_ctr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sucesfully recieved message counter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
220-251
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_tx_ctr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sucesfully transcieved message counter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
252
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_erp_changed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error passive state has changed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
253
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_ewl_reached
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error warning limit was reached 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
254
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_err_valid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error is valid
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
255
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_ack_recieved_out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Acknowledge was recieved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
256
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stat_bit_error_valid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit Error appeared
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"
literal "true"

\end_inset

CAN with Flexible Data-Rate Specification v 1.0, Robert Bosch GmbH, April
 2012
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"
literal "true"

\end_inset

CAN 2.0 Protocol standard, Robert Bosch GmbH, Rev 3.0
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-23"
literal "false"

\end_inset

AMBA Specification (Rev 2.0), ARM Limited 1999.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"
literal "true"

\end_inset

Controller Area Network - Basics, protocols, chips and applications, Prof.
 Dr.-Ing.
 K.
 Etschberger, 2001
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"
literal "true"

\end_inset

CRC for CAN with flexible data rate (CAN FD) - Whitepaper
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-20"
literal "true"

\end_inset

Software for Test Platform, DataSheet, Ille Ondrej, Czech Technical University,
 July 2015
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-21"
literal "true"

\end_inset

Implementation of unconventional CAN controller in VHDL, Diploma Thesis,
 Dušan Hamza, Czech technical university, 2013
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"
literal "true"

\end_inset

Robustness of a CAN FD Bus System – About Oscillator Tolerance and Edge
 Deviations, Dr.
 Arthur Mutter, Robert Bosch GmbH, 2013
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-6"
literal "true"

\end_inset

SJA1000 Standalone CAN Controller,Philips Semiconductors, January 2000
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-7"
literal "true"

\end_inset

TJA1041 High speed CAN transceiver Rev.
 06, December 2007, NXP Semiconductors
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-8"
literal "true"

\end_inset

ModelSim Advanced verification and debugging SE Command Reference, Mentor
 Graphics, v 6.0 November 2004
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-9"
literal "true"

\end_inset

VHDL guidlines for synthesis, Siemens semiconductor group
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-10"
literal "true"

\end_inset

FPGA prakticky - Realizace číslicových systémů pro hradlová pole, Jakub
 Šťastný, BEN Technická literatura 2011
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-11"
literal "true"

\end_inset

Číslicové systémy a jazyk VHDL , Jiří Pinker, Martin Poupa, BEN Technická
 literatura 2006
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-12"
literal "true"

\end_inset

 Understanding Metastability in FPGAs, ALTERA
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-13"
literal "true"

\end_inset

SAM V71, SMART ARM-based Flash MCU, Preeliminary datasheet, Atmel, February
 2015
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-14"
literal "true"

\end_inset

VHDL Guides , Dr.
 Jayram, Moorkanikara Nageswaran, Department of Computer Science University
 of California, http://www.ics.uci.edu/~jmoorkan/vhdlref/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-15"
literal "true"

\end_inset

Avalon Interface Specifications,ALTERA March 2015
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-16"
literal "true"

\end_inset

Methods for Testing the FlexRay Start-up Mechanism, Diploma thesis, Martin
 Paták ,Czech Technical University in Prague, 2012
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-17"
literal "true"

\end_inset

TimeQuest Timing Analyzer - Quick Start Tutorial, ALTERA, December 2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-19"
literal "true"

\end_inset

Implementing Inferred RAM, http://quartushelp.altera.com/14.0/mergedProjects/hdl/vh
dl/vhdl_pro_ram_inferred.htm
\end_layout

\end_body
\end_document
